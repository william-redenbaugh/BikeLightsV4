
/home/wredenba/git/BikeLightsV4/particle_impl/BikeLightsParticleSparkles/target/4.0.1/boron/BikeLightsParticleSparkles.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d64  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7d80  000b7d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7da4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e500  000b7da8  0001e500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000278  2003e578  2003e578  0002e578  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7e20  000b7e20  00027e20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7e48  000b7e48  00027e48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016214f  00000000  00000000  00027e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00018dcf  00000000  00000000  00189f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003468  00000000  00000000  001a2d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000430ae  00000000  00000000  001a61d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00050cf0  00000000  00000000  001e9280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0014d2fb  00000000  00000000  00239f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0004336e  00000000  00000000  0038726b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000bf10  00000000  00000000  003ca5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009478  00000000  00000000  003d64ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fa9f 	bl	b7570 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fac1 	bl	b75c0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e500 	.word	0x2003e500
   b4048:	000b7da8 	.word	0x000b7da8
   b404c:	2003e578 	.word	0x2003e578
   b4050:	2003e578 	.word	0x2003e578
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fb99 	bl	b5794 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7d4c 	.word	0x000b7d4c
   b407c:	000b7d78 	.word	0x000b7d78

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f821 	bl	b40cc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bb39 	b.w	b5704 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b869 	b.w	b5168 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b867 	b.w	b5168 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b86d 	b.w	b5178 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
#include "threads_init/threads_init.h"
#include "pubsub/pubsub.h"

SYSTEM_THREAD(ENABLED);

void setup() {
   b40b0:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b40b2:	4805      	ldr	r0, [pc, #20]	; (b40c8 <setup+0x18>)
   b40b4:	2300      	movs	r3, #0
   b40b6:	461a      	mov	r2, r3
   b40b8:	4619      	mov	r1, r3
   b40ba:	6840      	ldr	r0, [r0, #4]
   b40bc:	f000 fff0 	bl	b50a0 <network_off>
  Cellular.off();
  threads_list_init();
}
   b40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  threads_list_init();
   b40c4:	f000 b97e 	b.w	b43c4 <_Z17threads_list_initv>
   b40c8:	2003e6a0 	.word	0x2003e6a0

000b40cc <loop>:

void loop() {
   b40cc:	b508      	push	{r3, lr}

  publish_event(EVENT_LED_TURN_RIGHT, NULL);
   b40ce:	2100      	movs	r1, #0
   b40d0:	2005      	movs	r0, #5
   b40d2:	f000 fa85 	bl	b45e0 <_Z13publish_event12event_type_tPv>
  delay(3000);
   b40d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b40da:	f001 faed 	bl	b56b8 <delay>

  publish_event(EVENT_LED_TURN_LEFT, NULL);
   b40de:	2100      	movs	r1, #0
   b40e0:	2006      	movs	r0, #6
   b40e2:	f000 fa7d 	bl	b45e0 <_Z13publish_event12event_type_tPv>
  delay(3000);
   b40e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(3000);
   b40ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b40ee:	f001 bae3 	b.w	b56b8 <delay>

000b40f2 <_GLOBAL__sub_I_setup>:
SYSTEM_THREAD(ENABLED);
   b40f2:	2100      	movs	r1, #0
   b40f4:	2001      	movs	r0, #1
   b40f6:	f001 b81b 	b.w	b5130 <system_thread_set_state>
	...

000b40fc <_ZN9LedMatrixC1Ehh>:
#include "MAX7219LedMatrix/src/LedMatrix.h"
#include "cp437font.h"
/**
 * Heavily influenced by the code and the blog posts from https://github.com/nickgammon/MAX7219_Dot_Matrix
 */
LedMatrix::LedMatrix(byte numberOfDevices, byte slaveSelectPin) {
   b40fc:	b570      	push	{r4, r5, r6, lr}
   b40fe:	4604      	mov	r4, r0
   b4100:	460d      	mov	r5, r1
   b4102:	3014      	adds	r0, #20
   b4104:	490e      	ldr	r1, [pc, #56]	; (b4140 <_ZN9LedMatrixC1Ehh+0x44>)
   b4106:	4616      	mov	r6, r2
   b4108:	f002 ffb5 	bl	b7076 <_ZN6StringC1EPK19__FlashStringHelper>
   b410c:	490c      	ldr	r1, [pc, #48]	; (b4140 <_ZN9LedMatrixC1Ehh+0x44>)
   b410e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4112:	f002 ffb0 	bl	b7076 <_ZN6StringC1EPK19__FlashStringHelper>
   b4116:	2201      	movs	r2, #1
   b4118:	2300      	movs	r3, #0
   b411a:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b411e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4122:	63e3      	str	r3, [r4, #60]	; 0x3c
   b4124:	f240 1307 	movw	r3, #263	; 0x107
   b4128:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    myNumberOfDevices = numberOfDevices;
   b412c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    mySlaveSelectPin = slaveSelectPin;
   b4130:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    cols = new byte[numberOfDevices * 8];
   b4134:	00e8      	lsls	r0, r5, #3
   b4136:	f7ff ffae 	bl	b4096 <_Znaj>
   b413a:	6020      	str	r0, [r4, #0]
}
   b413c:	4620      	mov	r0, r4
   b413e:	bd70      	pop	{r4, r5, r6, pc}
   b4140:	000b7a0b 	.word	0x000b7a0b

000b4144 <_ZN9LedMatrix5clearEv>:
            break;
    }

}

void LedMatrix::clear() {
   b4144:	2300      	movs	r3, #0
   b4146:	b510      	push	{r4, lr}
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
        cols[col] = 0;
   b4148:	461c      	mov	r4, r3
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b414a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   b414e:	1c5a      	adds	r2, r3, #1
   b4150:	b2db      	uxtb	r3, r3
   b4152:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
   b4156:	da03      	bge.n	b4160 <_ZN9LedMatrix5clearEv+0x1c>
        cols[col] = 0;
   b4158:	6801      	ldr	r1, [r0, #0]
   b415a:	54cc      	strb	r4, [r1, r3]
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b415c:	4613      	mov	r3, r2
   b415e:	e7f4      	b.n	b414a <_ZN9LedMatrix5clearEv+0x6>
    }

}
   b4160:	bd10      	pop	{r4, pc}

000b4162 <_ZN9LedMatrix8setPixelEhh>:
void LedMatrix::setPixel(byte x, byte y) {

    // Weird Matrix operations to rotate everything around the way I need to
    // -- William Redenbaugh
    int matrix_x = 7-(x % 8);
    int matrix_y = y % 8;
   b4162:	f002 0207 	and.w	r2, r2, #7
    int which_matrix = x / 8;
    int new_x = (7 - matrix_y) + (which_matrix * 8);
   b4166:	08cb      	lsrs	r3, r1, #3
   b4168:	f1c2 0207 	rsb	r2, r2, #7
   b416c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    int new_y = matrix_x;

    bitWrite(cols[new_x], new_y, true);
   b4170:	6800      	ldr	r0, [r0, #0]
    int matrix_x = 7-(x % 8);
   b4172:	43c9      	mvns	r1, r1
    bitWrite(cols[new_x], new_y, true);
   b4174:	2301      	movs	r3, #1
    int matrix_x = 7-(x % 8);
   b4176:	f001 0107 	and.w	r1, r1, #7
    bitWrite(cols[new_x], new_y, true);
   b417a:	fa03 f101 	lsl.w	r1, r3, r1
   b417e:	5c83      	ldrb	r3, [r0, r2]
   b4180:	4319      	orrs	r1, r3
   b4182:	5481      	strb	r1, [r0, r2]
}
   b4184:	4770      	bx	lr
	...

000b4188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4188:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b418a:	4c0b      	ldr	r4, [pc, #44]	; (b41b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b418c:	7821      	ldrb	r1, [r4, #0]
   b418e:	f3bf 8f5b 	dmb	ish
   b4192:	f011 0101 	ands.w	r1, r1, #1
   b4196:	d10b      	bne.n	b41b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4198:	4620      	mov	r0, r4
   b419a:	9101      	str	r1, [sp, #4]
   b419c:	f7ff ff7f 	bl	b409e <__cxa_guard_acquire>
   b41a0:	9901      	ldr	r1, [sp, #4]
   b41a2:	b128      	cbz	r0, b41b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b41a4:	4805      	ldr	r0, [pc, #20]	; (b41bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b41a6:	f002 fe37 	bl	b6e18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b41aa:	4620      	mov	r0, r4
   b41ac:	f7ff ff7c 	bl	b40a8 <__cxa_guard_release>
        return instance;
    }
   b41b0:	4802      	ldr	r0, [pc, #8]	; (b41bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b41b2:	b002      	add	sp, #8
   b41b4:	bd10      	pop	{r4, pc}
   b41b6:	bf00      	nop
   b41b8:	2003e578 	.word	0x2003e578
   b41bc:	2003e57c 	.word	0x2003e57c

000b41c0 <_ZN9LedMatrix8sendByteEhhh>:
void LedMatrix::sendByte (const byte device, const byte reg, const byte data) {
   b41c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b41c4:	1d05      	adds	r5, r0, #4
   b41c6:	4604      	mov	r4, r0
   b41c8:	460e      	mov	r6, r1
   b41ca:	4690      	mov	r8, r2
        spiregister[i] = (byte)0;
   b41cc:	2100      	movs	r1, #0
   b41ce:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   b41d2:	9201      	str	r2, [sp, #4]
   b41d4:	4628      	mov	r0, r5
void LedMatrix::sendByte (const byte device, const byte reg, const byte data) {
   b41d6:	461f      	mov	r7, r3
        spiregister[i] = (byte)0;
   b41d8:	f003 f9f2 	bl	b75c0 <memset>
        spidata[i] = (byte)0;
   b41dc:	9a01      	ldr	r2, [sp, #4]
   b41de:	2100      	movs	r1, #0
   b41e0:	f104 000c 	add.w	r0, r4, #12
   b41e4:	f003 f9ec 	bl	b75c0 <memset>
    spiregister[offset] = reg;
   b41e8:	19a1      	adds	r1, r4, r6
    for(int i=0;i<myNumberOfDevices;i++) {
   b41ea:	f06f 0603 	mvn.w	r6, #3
    spiregister[offset] = reg;
   b41ee:	f881 8004 	strb.w	r8, [r1, #4]
    spidata[offset] = data;
   b41f2:	730f      	strb	r7, [r1, #12]
    digitalWrite(mySlaveSelectPin,LOW);
   b41f4:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
   b41f8:	2100      	movs	r1, #0
   b41fa:	f003 f870 	bl	b72de <digitalWrite>
    for(int i=0;i<myNumberOfDevices;i++) {
   b41fe:	1b36      	subs	r6, r6, r4
   b4200:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   b4204:	1973      	adds	r3, r6, r5
   b4206:	429a      	cmp	r2, r3
   b4208:	dd0f      	ble.n	b422a <_ZN9LedMatrix8sendByteEhhh+0x6a>
        SPI.transfer (spiregister[i]);
   b420a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b420e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4210:	f7ff ffba 	bl	b4188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4214:	9901      	ldr	r1, [sp, #4]
   b4216:	f002 fe9f 	bl	b6f58 <_ZN8SPIClass8transferEh>
        SPI.transfer (spidata[i]);
   b421a:	79e9      	ldrb	r1, [r5, #7]
   b421c:	9101      	str	r1, [sp, #4]
   b421e:	f7ff ffb3 	bl	b4188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4222:	9901      	ldr	r1, [sp, #4]
   b4224:	f002 fe98 	bl	b6f58 <_ZN8SPIClass8transferEh>
    for(int i=0;i<myNumberOfDevices;i++) {
   b4228:	e7ea      	b.n	b4200 <_ZN9LedMatrix8sendByteEhhh+0x40>
    digitalWrite (mySlaveSelectPin, HIGH);
   b422a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
   b422e:	2101      	movs	r1, #1
}
   b4230:	b002      	add	sp, #8
   b4232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite (mySlaveSelectPin, HIGH);
   b4236:	f003 b852 	b.w	b72de <digitalWrite>

000b423a <_ZN9LedMatrix4initEv>:
void LedMatrix::init() {
   b423a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    pinMode(mySlaveSelectPin, OUTPUT);
   b423c:	2101      	movs	r1, #1
void LedMatrix::init() {
   b423e:	4604      	mov	r4, r0
    pinMode(mySlaveSelectPin, OUTPUT);
   b4240:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b4244:	f003 f83a 	bl	b72bc <pinMode>
        instance().begin();
   b4248:	f7ff ff9e 	bl	b4188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b424c:	f002 fdee 	bl	b6e2c <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
   b4250:	f7ff ff9a 	bl	b4188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4254:	2100      	movs	r1, #0
   b4256:	f002 fdfd 	bl	b6e54 <_ZN8SPIClass11setDataModeEh>
        instance().setClockDivider(divider);
   b425a:	f7ff ff95 	bl	b4188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b425e:	2130      	movs	r1, #48	; 0x30
   b4260:	f002 fe54 	bl	b6f0c <_ZN8SPIClass15setClockDividerEh>
    }
   b4264:	2500      	movs	r5, #0
    for(byte device = 0; device < myNumberOfDevices; device++) {
   b4266:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   b426a:	b2e9      	uxtb	r1, r5
   b426c:	428b      	cmp	r3, r1
   b426e:	d91f      	bls.n	b42b0 <_ZN9LedMatrix4initEv+0x76>
        sendByte (device, MAX7219_REG_SCANLIMIT, 7);   // show all 8 digits
   b4270:	2307      	movs	r3, #7
   b4272:	220b      	movs	r2, #11
   b4274:	4620      	mov	r0, r4
   b4276:	9101      	str	r1, [sp, #4]
   b4278:	f7ff ffa2 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_DECODEMODE, 0);  // using an led matrix (not digits)
   b427c:	9901      	ldr	r1, [sp, #4]
   b427e:	2300      	movs	r3, #0
   b4280:	2209      	movs	r2, #9
   b4282:	4620      	mov	r0, r4
   b4284:	f7ff ff9c 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_DISPLAYTEST, 0); // no display test
   b4288:	9901      	ldr	r1, [sp, #4]
   b428a:	2300      	movs	r3, #0
   b428c:	220f      	movs	r2, #15
   b428e:	4620      	mov	r0, r4
   b4290:	f7ff ff96 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_INTENSITY, 0);   // character intensity: range: 0 to 15
   b4294:	9901      	ldr	r1, [sp, #4]
   b4296:	2300      	movs	r3, #0
   b4298:	220a      	movs	r2, #10
   b429a:	4620      	mov	r0, r4
   b429c:	f7ff ff90 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_SHUTDOWN, 1);    // not in shutdown mode (ie. start it up)
   b42a0:	9901      	ldr	r1, [sp, #4]
   b42a2:	2301      	movs	r3, #1
   b42a4:	220c      	movs	r2, #12
   b42a6:	4620      	mov	r0, r4
   b42a8:	f7ff ff8a 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
    for(byte device = 0; device < myNumberOfDevices; device++) {
   b42ac:	3501      	adds	r5, #1
   b42ae:	e7da      	b.n	b4266 <_ZN9LedMatrix4initEv+0x2c>
}
   b42b0:	b003      	add	sp, #12
   b42b2:	bd30      	pop	{r4, r5, pc}

000b42b4 <_ZN9LedMatrix8sendByteEhh>:
void LedMatrix::sendByte (const byte reg, const byte data) {
   b42b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42b6:	4604      	mov	r4, r0
   b42b8:	460e      	mov	r6, r1
   b42ba:	4617      	mov	r7, r2
   b42bc:	2500      	movs	r5, #0
    for(byte device = 0; device < myNumberOfDevices; device++) {
   b42be:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   b42c2:	b2e9      	uxtb	r1, r5
   b42c4:	428b      	cmp	r3, r1
   b42c6:	d906      	bls.n	b42d6 <_ZN9LedMatrix8sendByteEhh+0x22>
        sendByte(device, reg, data);
   b42c8:	463b      	mov	r3, r7
   b42ca:	4632      	mov	r2, r6
   b42cc:	4620      	mov	r0, r4
   b42ce:	f7ff ff77 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
    for(byte device = 0; device < myNumberOfDevices; device++) {
   b42d2:	3501      	adds	r5, #1
   b42d4:	e7f3      	b.n	b42be <_ZN9LedMatrix8sendByteEhh+0xa>
}
   b42d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42d8 <_ZN9LedMatrix12setIntensityEh>:
void LedMatrix::setIntensity(const byte intensity) {
   b42d8:	460a      	mov	r2, r1
    sendByte(MAX7219_REG_INTENSITY, intensity);
   b42da:	210a      	movs	r1, #10
   b42dc:	f7ff bfea 	b.w	b42b4 <_ZN9LedMatrix8sendByteEhh>

000b42e0 <_ZN9LedMatrix6commitEv>:
void LedMatrix::commit() {
   b42e0:	b538      	push	{r3, r4, r5, lr}
   b42e2:	4605      	mov	r5, r0
   b42e4:	2300      	movs	r3, #0
   b42e6:	b2d9      	uxtb	r1, r3
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b42e8:	1c5c      	adds	r4, r3, #1
   b42ea:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   b42ee:	ebb1 0fc3 	cmp.w	r1, r3, lsl #3
   b42f2:	da0a      	bge.n	b430a <_ZN9LedMatrix6commitEv+0x2a>
        sendByte(col / 8, col % 8 + 1, cols[col]);
   b42f4:	682b      	ldr	r3, [r5, #0]
   b42f6:	f001 0207 	and.w	r2, r1, #7
   b42fa:	5c5b      	ldrb	r3, [r3, r1]
   b42fc:	3201      	adds	r2, #1
   b42fe:	08c9      	lsrs	r1, r1, #3
   b4300:	4628      	mov	r0, r5
   b4302:	f7ff ff5d 	bl	b41c0 <_ZN9LedMatrix8sendByteEhhh>
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b4306:	4623      	mov	r3, r4
   b4308:	e7ed      	b.n	b42e6 <_ZN9LedMatrix6commitEv+0x6>
}
   b430a:	bd38      	pop	{r3, r4, r5, pc}

000b430c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b430c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b430e:	2301      	movs	r3, #1
   b4310:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b4312:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b4314:	4604      	mov	r4, r0
        if (th->func) {
   b4316:	b143      	cbz	r3, b432a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b4318:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b431a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b431c:	2301      	movs	r3, #1
   b431e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b4320:	2000      	movs	r0, #0
    }
   b4322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b4326:	f000 bd9f 	b.w	b4e68 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b432a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b432c:	2800      	cmp	r0, #0
   b432e:	d0f5      	beq.n	b431c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b4330:	6883      	ldr	r3, [r0, #8]
   b4332:	b90b      	cbnz	r3, b4338 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b4334:	f002 fff0 	bl	b7318 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4338:	68c3      	ldr	r3, [r0, #12]
   b433a:	e7ee      	b.n	b431a <_ZN6Thread3runEPv+0xe>

000b433c <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b433c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4340:	4604      	mov	r4, r0
   b4342:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b4344:	2014      	movs	r0, #20
   b4346:	491d      	ldr	r1, [pc, #116]	; (b43bc <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b4348:	4690      	mov	r8, r2
   b434a:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b434c:	f002 ffe0 	bl	b7310 <_ZnwjRKSt9nothrow_t>
   b4350:	b130      	cbz	r0, b4360 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b4352:	2500      	movs	r5, #0
            exited(false) {
   b4354:	e9c0 5500 	strd	r5, r5, [r0]
   b4358:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b435c:	7405      	strb	r5, [r0, #16]
   b435e:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b4360:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b4362:	b198      	cbz	r0, b438c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b4364:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4366:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b436a:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b436e:	4631      	mov	r1, r6
   b4370:	e9cd 0300 	strd	r0, r3, [sp]
   b4374:	4b12      	ldr	r3, [pc, #72]	; (b43c0 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x84>)
   b4376:	3004      	adds	r0, #4
   b4378:	f000 fcf6 	bl	b4d68 <os_thread_create>
   b437c:	b930      	cbnz	r0, b438c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b437e:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b4380:	7c1b      	ldrb	r3, [r3, #16]
   b4382:	b9bb      	cbnz	r3, b43b4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
            HAL_Delay_Milliseconds(1);
   b4384:	2001      	movs	r0, #1
   b4386:	f000 fe0b 	bl	b4fa0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b438a:	e7f8      	b.n	b437e <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b438c:	6826      	ldr	r6, [r4, #0]
	_M_ptr() = __p;
   b438e:	2300      	movs	r3, #0
   b4390:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b4392:	b17e      	cbz	r6, b43b4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b4394:	6835      	ldr	r5, [r6, #0]
   b4396:	b14d      	cbz	r5, b43ac <_ZN6ThreadC1EPKcPFvPvES2_hj+0x70>
      if (_M_manager)
   b4398:	68ab      	ldr	r3, [r5, #8]
   b439a:	b11b      	cbz	r3, b43a4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b439c:	2203      	movs	r2, #3
   b439e:	4629      	mov	r1, r5
   b43a0:	4628      	mov	r0, r5
   b43a2:	4798      	blx	r3
	delete __ptr;
   b43a4:	2110      	movs	r1, #16
   b43a6:	4628      	mov	r0, r5
   b43a8:	f7ff fe77 	bl	b409a <_ZdlPvj>
   b43ac:	2114      	movs	r1, #20
   b43ae:	4630      	mov	r0, r6
   b43b0:	f7ff fe73 	bl	b409a <_ZdlPvj>
    }
   b43b4:	4620      	mov	r0, r4
   b43b6:	b002      	add	sp, #8
   b43b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b43bc:	000b7bc0 	.word	0x000b7bc0
   b43c0:	000b430d 	.word	0x000b430d

000b43c4 <_Z17threads_list_initv>:
#include "threads_list.h"

static TaskListData task_data[NUM_THREADS];

void threads_list_init(void)
{
   b43c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43c6:	b099      	sub	sp, #100	; 0x64
    task_init_descriptor_t threads[NUM_THREADS] = THREAD_LIST;
   b43c8:	4913      	ldr	r1, [pc, #76]	; (b4418 <_Z17threads_list_initv+0x54>)
   b43ca:	2248      	movs	r2, #72	; 0x48
   b43cc:	a806      	add	r0, sp, #24
   b43ce:	f003 f8cf 	bl	b7570 <memcpy>

    // Run each setup function for each task
    for (int n = 0; n < NUM_THREADS; n++)
    {
        threads[n].task_init_fun();
   b43d2:	f000 f823 	bl	b441c <_Z15led_thread_initv>
   b43d6:	f000 f89b 	bl	b4510 <_Z28event_management_module_initv>
   b43da:	f000 fa5b 	bl	b4894 <_Z24bluetooth_interface_initv>
    for (int n = 0; n < NUM_THREADS; n++)
   b43de:	ac06      	add	r4, sp, #24
        threads[n].task_init_fun();
   b43e0:	2503      	movs	r5, #3
    }

    // Launch each task!
    for (int n = 0; n < NUM_THREADS; n++)
    {
        task_data[n].task_fun = threads[n].task_fun;
   b43e2:	6822      	ldr	r2, [r4, #0]
        task_data[n].task_name = threads[n].task_name;
   b43e4:	68e1      	ldr	r1, [r4, #12]
        task_data[n].stack_size = threads[n].stack_size;
        task_data[n].task_priority = threads[n].task_priority;
        task_data[n].param = threads[n].param;
   b43e6:	68a3      	ldr	r3, [r4, #8]
        task_data[n].task_fun = threads[n].task_fun;
   b43e8:	9205      	str	r2, [sp, #20]

        task_data[n].handler =  new Thread(threads[n].task_name, threads[n].task_fun, threads[n].param, threads[n].task_priority, threads[n].stack_size);
   b43ea:	2004      	movs	r0, #4
        task_data[n].task_priority = threads[n].task_priority;
   b43ec:	e9d4 7604 	ldrd	r7, r6, [r4, #16]
        task_data[n].task_name = threads[n].task_name;
   b43f0:	9104      	str	r1, [sp, #16]
        task_data[n].param = threads[n].param;
   b43f2:	9303      	str	r3, [sp, #12]
        task_data[n].handler =  new Thread(threads[n].task_name, threads[n].task_fun, threads[n].param, threads[n].task_priority, threads[n].stack_size);
   b43f4:	f7ff fe4d 	bl	b4092 <_Znwj>
   b43f8:	b138      	cbz	r0, b440a <_Z17threads_list_initv+0x46>
   b43fa:	b2f6      	uxtb	r6, r6
   b43fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   b4400:	9b03      	ldr	r3, [sp, #12]
   b4402:	9701      	str	r7, [sp, #4]
   b4404:	9600      	str	r6, [sp, #0]
   b4406:	f7ff ff99 	bl	b433c <_ZN6ThreadC1EPKcPFvPvES2_hj>
    for (int n = 0; n < NUM_THREADS; n++)
   b440a:	3d01      	subs	r5, #1
   b440c:	f104 0418 	add.w	r4, r4, #24
   b4410:	d1e7      	bne.n	b43e2 <_Z17threads_list_initv+0x1e>
    }
   b4412:	b019      	add	sp, #100	; 0x64
   b4414:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4416:	bf00      	nop
   b4418:	000b7790 	.word	0x000b7790

000b441c <_Z15led_thread_initv>:
    EVENT_LED_TURN_RIGHT,
    EVENT_LED_TURN_LEFT,
    EVENT_LED_FLASH_SLOWING_DOWN,
};

void led_thread_init(void){
   b441c:	b508      	push	{r3, lr}
    led_matrix.init();
   b441e:	480a      	ldr	r0, [pc, #40]	; (b4448 <_Z15led_thread_initv+0x2c>)
   b4420:	f7ff ff0b 	bl	b423a <_ZN9LedMatrix4initEv>
    led_matrix.setIntensity(2);
   b4424:	2102      	movs	r1, #2
   b4426:	4808      	ldr	r0, [pc, #32]	; (b4448 <_Z15led_thread_initv+0x2c>)
   b4428:	f7ff ff56 	bl	b42d8 <_ZN9LedMatrix12setIntensityEh>
    led_matrix.clear();
   b442c:	4806      	ldr	r0, [pc, #24]	; (b4448 <_Z15led_thread_initv+0x2c>)
   b442e:	f7ff fe89 	bl	b4144 <_ZN9LedMatrix5clearEv>
    led_matrix.commit();
   b4432:	4805      	ldr	r0, [pc, #20]	; (b4448 <_Z15led_thread_initv+0x2c>)
   b4434:	f7ff ff54 	bl	b42e0 <_ZN9LedMatrix6commitEv>

    // Subscribe to led change events
    eventspace = subscribe_eventlist(eventlist, sizeof(eventlist), 16);
   b4438:	4804      	ldr	r0, [pc, #16]	; (b444c <_Z15led_thread_initv+0x30>)
   b443a:	2210      	movs	r2, #16
   b443c:	2104      	movs	r1, #4
   b443e:	f000 f8ed 	bl	b461c <_Z19subscribe_eventlistP12event_type_tii>
   b4442:	4b03      	ldr	r3, [pc, #12]	; (b4450 <_Z15led_thread_initv+0x34>)
   b4444:	6018      	str	r0, [r3, #0]
}
   b4446:	bd08      	pop	{r3, pc}
   b4448:	2003e584 	.word	0x2003e584
   b444c:	2003e505 	.word	0x2003e505
   b4450:	2003e500 	.word	0x2003e500

000b4454 <_Z17led_matrix_threadPv>:
        delay(100);
    }
}


void led_matrix_thread(void *params){
   b4454:	b583      	push	{r0, r1, r7, lr}
   b4456:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b44fc <_Z17led_matrix_threadPv+0xa8>
    for(;;){
        // Whenever there are any events we consume them!

        if(available_events(eventspace)){
   b445a:	4f26      	ldr	r7, [pc, #152]	; (b44f4 <_Z17led_matrix_threadPv+0xa0>)
            current_mode = consume_event(eventspace).event;
            switch (current_mode)
            {
            case EVENT_LED_OFF:
                led_matrix.clear();
   b445c:	4c26      	ldr	r4, [pc, #152]	; (b44f8 <_Z17led_matrix_threadPv+0xa4>)
        if(available_events(eventspace)){
   b445e:	6838      	ldr	r0, [r7, #0]
   b4460:	f000 f926 	bl	b46b0 <_Z16available_eventsi>
   b4464:	b178      	cbz	r0, b4486 <_Z17led_matrix_threadPv+0x32>
            current_mode = consume_event(eventspace).event;
   b4466:	6839      	ldr	r1, [r7, #0]
   b4468:	4668      	mov	r0, sp
   b446a:	f000 f937 	bl	b46dc <_Z13consume_eventi>
   b446e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4472:	f888 3000 	strb.w	r3, [r8]
            switch (current_mode)
   b4476:	2b04      	cmp	r3, #4
   b4478:	d105      	bne.n	b4486 <_Z17led_matrix_threadPv+0x32>
                led_matrix.clear();
   b447a:	4620      	mov	r0, r4
   b447c:	f7ff fe62 	bl	b4144 <_ZN9LedMatrix5clearEv>
                led_matrix.commit();
   b4480:	4620      	mov	r0, r4
   b4482:	f7ff ff2d 	bl	b42e0 <_ZN9LedMatrix6commitEv>
            default:
                break;
            }
        }

        switch (current_mode)
   b4486:	f898 3000 	ldrb.w	r3, [r8]
   b448a:	2b05      	cmp	r3, #5
   b448c:	d019      	beq.n	b44c2 <_Z17led_matrix_threadPv+0x6e>
   b448e:	2b06      	cmp	r3, #6
   b4490:	d1e5      	bne.n	b445e <_Z17led_matrix_threadPv+0xa>
   b4492:	2508      	movs	r5, #8
        led_matrix.clear();
   b4494:	4620      	mov	r0, r4
   b4496:	f7ff fe55 	bl	b4144 <_ZN9LedMatrix5clearEv>
        for(int y = 0; y < 63; y++){
   b449a:	2600      	movs	r6, #0
            led_matrix.setPixel(y, x);
   b449c:	fa5f f985 	uxtb.w	r9, r5
   b44a0:	b2f1      	uxtb	r1, r6
   b44a2:	464a      	mov	r2, r9
   b44a4:	4620      	mov	r0, r4
        for(int y = 0; y < 63; y++){
   b44a6:	3601      	adds	r6, #1
            led_matrix.setPixel(y, x);
   b44a8:	f7ff fe5b 	bl	b4162 <_ZN9LedMatrix8setPixelEhh>
        for(int y = 0; y < 63; y++){
   b44ac:	2e3f      	cmp	r6, #63	; 0x3f
   b44ae:	d1f7      	bne.n	b44a0 <_Z17led_matrix_threadPv+0x4c>
        led_matrix.commit();
   b44b0:	4620      	mov	r0, r4
   b44b2:	f7ff ff15 	bl	b42e0 <_ZN9LedMatrix6commitEv>
        delay(100);
   b44b6:	2064      	movs	r0, #100	; 0x64
   b44b8:	f001 f8fe 	bl	b56b8 <delay>
    for(int x = 8; x >= 0; x--){
   b44bc:	3d01      	subs	r5, #1
   b44be:	d2e9      	bcs.n	b4494 <_Z17led_matrix_threadPv+0x40>
   b44c0:	e7cd      	b.n	b445e <_Z17led_matrix_threadPv+0xa>
        switch (current_mode)
   b44c2:	2500      	movs	r5, #0
        led_matrix.clear();
   b44c4:	4620      	mov	r0, r4
   b44c6:	f7ff fe3d 	bl	b4144 <_ZN9LedMatrix5clearEv>
        for(int y = 0; y < 63; y++){
   b44ca:	2600      	movs	r6, #0
            led_matrix.setPixel(y, x);
   b44cc:	fa5f f985 	uxtb.w	r9, r5
   b44d0:	b2f1      	uxtb	r1, r6
   b44d2:	464a      	mov	r2, r9
   b44d4:	4620      	mov	r0, r4
        for(int y = 0; y < 63; y++){
   b44d6:	3601      	adds	r6, #1
            led_matrix.setPixel(y, x);
   b44d8:	f7ff fe43 	bl	b4162 <_ZN9LedMatrix8setPixelEhh>
        for(int y = 0; y < 63; y++){
   b44dc:	2e3f      	cmp	r6, #63	; 0x3f
   b44de:	d1f7      	bne.n	b44d0 <_Z17led_matrix_threadPv+0x7c>
        led_matrix.commit();
   b44e0:	4620      	mov	r0, r4
   b44e2:	f7ff fefd 	bl	b42e0 <_ZN9LedMatrix6commitEv>
    for(int x = 0; x < 8; x++){
   b44e6:	3501      	adds	r5, #1
        delay(100);
   b44e8:	2064      	movs	r0, #100	; 0x64
   b44ea:	f001 f8e5 	bl	b56b8 <delay>
    for(int x = 0; x < 8; x++){
   b44ee:	2d08      	cmp	r5, #8
   b44f0:	d1e8      	bne.n	b44c4 <_Z17led_matrix_threadPv+0x70>
   b44f2:	e7b4      	b.n	b445e <_Z17led_matrix_threadPv+0xa>
   b44f4:	2003e500 	.word	0x2003e500
   b44f8:	2003e584 	.word	0x2003e584
   b44fc:	2003e504 	.word	0x2003e504

000b4500 <_GLOBAL__sub_I_led_matrix>:
LedMatrix led_matrix = LedMatrix(NUMBER_OF_DEVICES, CS_PIN);
   b4500:	4802      	ldr	r0, [pc, #8]	; (b450c <_GLOBAL__sub_I_led_matrix+0xc>)
   b4502:	220e      	movs	r2, #14
   b4504:	2104      	movs	r1, #4
   b4506:	f7ff bdf9 	b.w	b40fc <_ZN9LedMatrixC1Ehh>
   b450a:	bf00      	nop
   b450c:	2003e584 	.word	0x2003e584

000b4510 <_Z28event_management_module_initv>:

int num_eventspaces = 0;

static os_mutex_t event_management_mutx;

void event_management_module_init(void){
   b4510:	b508      	push	{r3, lr}
    os_queue_create(&global_eventspace, sizeof(event_data_t), 32, NULL);
   b4512:	2220      	movs	r2, #32
   b4514:	2300      	movs	r3, #0
   b4516:	2108      	movs	r1, #8
   b4518:	4809      	ldr	r0, [pc, #36]	; (b4540 <_Z28event_management_module_initv+0x30>)
   b451a:	f000 fc8d 	bl	b4e38 <os_queue_create>
    subscribed_eventspaces = (event_type_t**)malloc(sizeof(event_type_t*) * NUM_THREADS);
   b451e:	200c      	movs	r0, #12
   b4520:	f000 fe22 	bl	b5168 <malloc>
   b4524:	4b07      	ldr	r3, [pc, #28]	; (b4544 <_Z28event_management_module_initv+0x34>)
   b4526:	6018      	str	r0, [r3, #0]
    memset(num_subscribed_events, 0, sizeof(num_subscribed_events));
   b4528:	4b07      	ldr	r3, [pc, #28]	; (b4548 <_Z28event_management_module_initv+0x38>)
    os_mutex_create(&event_management_mutx);
   b452a:	4808      	ldr	r0, [pc, #32]	; (b454c <_Z28event_management_module_initv+0x3c>)
    memset(num_subscribed_events, 0, sizeof(num_subscribed_events));
   b452c:	2200      	movs	r2, #0
   b452e:	e9c3 2200 	strd	r2, r2, [r3]
   b4532:	609a      	str	r2, [r3, #8]
    os_mutex_create(&event_management_mutx);
   b4534:	f000 fc50 	bl	b4dd8 <os_mutex_create>
    event_management_init = true;
   b4538:	4b05      	ldr	r3, [pc, #20]	; (b4550 <_Z28event_management_module_initv+0x40>)
   b453a:	2201      	movs	r2, #1
   b453c:	701a      	strb	r2, [r3, #0]
}
   b453e:	bd08      	pop	{r3, pc}
   b4540:	2003e5c8 	.word	0x2003e5c8
   b4544:	2003e5ec 	.word	0x2003e5ec
   b4548:	2003e5e0 	.word	0x2003e5e0
   b454c:	2003e5dc 	.word	0x2003e5dc
   b4550:	2003e5d8 	.word	0x2003e5d8

000b4554 <_Z23event_management_threadPv>:

void event_management_thread(void *parameters){
   b4554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

        // Go through all the local event spaces, publish to whoever is subscribed to them
        os_mutex_lock(event_management_mutx);
        for(int n = 0; n < num_eventspaces; n++){
            for(int i = 0; i < num_subscribed_events[n]; i++){
                if(subscribed_eventspaces[n][i] == event.event){
   b4558:	4f1b      	ldr	r7, [pc, #108]	; (b45c8 <_Z23event_management_threadPv+0x74>)
        os_queue_take(global_eventspace, &event, (system_tick_t)-1, NULL);
   b455a:	481c      	ldr	r0, [pc, #112]	; (b45cc <_Z23event_management_threadPv+0x78>)
        os_mutex_lock(event_management_mutx);
   b455c:	4e1c      	ldr	r6, [pc, #112]	; (b45d0 <_Z23event_management_threadPv+0x7c>)
        os_queue_take(global_eventspace, &event, (system_tick_t)-1, NULL);
   b455e:	6800      	ldr	r0, [r0, #0]
        for(int n = 0; n < num_eventspaces; n++){
   b4560:	f8df 8070 	ldr.w	r8, [pc, #112]	; b45d4 <_Z23event_management_threadPv+0x80>
        os_queue_take(global_eventspace, &event, (system_tick_t)-1, NULL);
   b4564:	2300      	movs	r3, #0
   b4566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b456a:	4669      	mov	r1, sp
   b456c:	f000 fc74 	bl	b4e58 <os_queue_take>
        os_mutex_lock(event_management_mutx);
   b4570:	6830      	ldr	r0, [r6, #0]
   b4572:	f000 fc39 	bl	b4de8 <os_mutex_lock>
        for(int n = 0; n < num_eventspaces; n++){
   b4576:	2400      	movs	r4, #0
   b4578:	f8d8 3000 	ldr.w	r3, [r8]
   b457c:	42a3      	cmp	r3, r4
   b457e:	dd1e      	ble.n	b45be <_Z23event_management_threadPv+0x6a>
            for(int i = 0; i < num_subscribed_events[n]; i++){
   b4580:	f8df a054 	ldr.w	sl, [pc, #84]	; b45d8 <_Z23event_management_threadPv+0x84>
                    os_queue_put(local_eventspaces[n], (void*)&event, (system_tick_t)-1, NULL);
   b4584:	f8df b054 	ldr.w	fp, [pc, #84]	; b45dc <_Z23event_management_threadPv+0x88>
   b4588:	ea4f 0984 	mov.w	r9, r4, lsl #2
            for(int i = 0; i < num_subscribed_events[n]; i++){
   b458c:	2500      	movs	r5, #0
   b458e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   b4592:	42ab      	cmp	r3, r5
   b4594:	dd11      	ble.n	b45ba <_Z23event_management_threadPv+0x66>
                if(subscribed_eventspaces[n][i] == event.event){
   b4596:	683b      	ldr	r3, [r7, #0]
   b4598:	f853 3009 	ldr.w	r3, [r3, r9]
   b459c:	5d5a      	ldrb	r2, [r3, r5]
   b459e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b45a2:	429a      	cmp	r2, r3
   b45a4:	d107      	bne.n	b45b6 <_Z23event_management_threadPv+0x62>
                    os_queue_put(local_eventspaces[n], (void*)&event, (system_tick_t)-1, NULL);
   b45a6:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
   b45aa:	2300      	movs	r3, #0
   b45ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b45b0:	4669      	mov	r1, sp
   b45b2:	f000 fc49 	bl	b4e48 <os_queue_put>
            for(int i = 0; i < num_subscribed_events[n]; i++){
   b45b6:	3501      	adds	r5, #1
   b45b8:	e7e9      	b.n	b458e <_Z23event_management_threadPv+0x3a>
        for(int n = 0; n < num_eventspaces; n++){
   b45ba:	3401      	adds	r4, #1
   b45bc:	e7dc      	b.n	b4578 <_Z23event_management_threadPv+0x24>
                }
            }
        }
        os_mutex_unlock(event_management_mutx);
   b45be:	6830      	ldr	r0, [r6, #0]
   b45c0:	f000 fc1a 	bl	b4df8 <os_mutex_unlock>
    }
   b45c4:	e7c9      	b.n	b455a <_Z23event_management_threadPv+0x6>
   b45c6:	bf00      	nop
   b45c8:	2003e5ec 	.word	0x2003e5ec
   b45cc:	2003e5c8 	.word	0x2003e5c8
   b45d0:	2003e5dc 	.word	0x2003e5dc
   b45d4:	2003e5f0 	.word	0x2003e5f0
   b45d8:	2003e5e0 	.word	0x2003e5e0
   b45dc:	2003e5cc 	.word	0x2003e5cc

000b45e0 <_Z13publish_event12event_type_tPv>:
}

int publish_event(event_type_t event, void *ptr){
   b45e0:	b507      	push	{r0, r1, r2, lr}
    if(!event_management_init){
   b45e2:	4b0c      	ldr	r3, [pc, #48]	; (b4614 <_Z13publish_event12event_type_tPv+0x34>)
   b45e4:	781b      	ldrb	r3, [r3, #0]
   b45e6:	b18b      	cbz	r3, b460c <_Z13publish_event12event_type_tPv+0x2c>
        return ERR_INT;
    }
    event_data_t data;
    data.event = event;
   b45e8:	f88d 0004 	strb.w	r0, [sp, #4]
    data.ptr = ptr;

    if(os_queue_put(global_eventspace, (void*)&data, (system_tick_t)-1, NULL) == 0){
   b45ec:	480a      	ldr	r0, [pc, #40]	; (b4618 <_Z13publish_event12event_type_tPv+0x38>)
    data.ptr = ptr;
   b45ee:	9100      	str	r1, [sp, #0]
    if(os_queue_put(global_eventspace, (void*)&data, (system_tick_t)-1, NULL) == 0){
   b45f0:	6800      	ldr	r0, [r0, #0]
   b45f2:	2300      	movs	r3, #0
   b45f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b45f8:	4669      	mov	r1, sp
   b45fa:	f000 fc25 	bl	b4e48 <os_queue_put>
   b45fe:	3800      	subs	r0, #0
   b4600:	bf18      	it	ne
   b4602:	2001      	movne	r0, #1
   b4604:	4240      	negs	r0, r0
        return ERR_OK;
    }

    return ERR_INT;
}
   b4606:	b003      	add	sp, #12
   b4608:	f85d fb04 	ldr.w	pc, [sp], #4
        return ERR_INT;
   b460c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4610:	e7f9      	b.n	b4606 <_Z13publish_event12event_type_tPv+0x26>
   b4612:	bf00      	nop
   b4614:	2003e5d8 	.word	0x2003e5d8
   b4618:	2003e5c8 	.word	0x2003e5c8

000b461c <_Z19subscribe_eventlistP12event_type_tii>:

int subscribe_eventlist(event_type_t *event_list, int num_events, int event_length_max){
   b461c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if(!event_management_init){
   b4620:	4b1d      	ldr	r3, [pc, #116]	; (b4698 <_Z19subscribe_eventlistP12event_type_tii+0x7c>)
int subscribe_eventlist(event_type_t *event_list, int num_events, int event_length_max){
   b4622:	9201      	str	r2, [sp, #4]
    if(!event_management_init){
   b4624:	781b      	ldrb	r3, [r3, #0]
int subscribe_eventlist(event_type_t *event_list, int num_events, int event_length_max){
   b4626:	4607      	mov	r7, r0
   b4628:	460d      	mov	r5, r1
    if(!event_management_init){
   b462a:	b38b      	cbz	r3, b4690 <_Z19subscribe_eventlistP12event_type_tii+0x74>
        return ERR_INT;
    }

    os_mutex_lock(event_management_mutx);
   b462c:	f8df 807c 	ldr.w	r8, [pc, #124]	; b46ac <_Z19subscribe_eventlistP12event_type_tii+0x90>

    os_queue_create(&local_eventspaces[num_eventspaces], sizeof(event_data_t), event_length_max, NULL);
   b4630:	4e1a      	ldr	r6, [pc, #104]	; (b469c <_Z19subscribe_eventlistP12event_type_tii+0x80>)
    os_mutex_lock(event_management_mutx);
   b4632:	f8d8 0000 	ldr.w	r0, [r8]
    os_queue_create(&local_eventspaces[num_eventspaces], sizeof(event_data_t), event_length_max, NULL);
   b4636:	4c1a      	ldr	r4, [pc, #104]	; (b46a0 <_Z19subscribe_eventlistP12event_type_tii+0x84>)
    os_mutex_lock(event_management_mutx);
   b4638:	f000 fbd6 	bl	b4de8 <os_mutex_lock>
    os_queue_create(&local_eventspaces[num_eventspaces], sizeof(event_data_t), event_length_max, NULL);
   b463c:	6830      	ldr	r0, [r6, #0]
   b463e:	9a01      	ldr	r2, [sp, #4]
   b4640:	2300      	movs	r3, #0
   b4642:	2108      	movs	r1, #8
   b4644:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    subscribed_eventspaces[num_eventspaces] = (event_type_t*)malloc(sizeof(event_type_t) * num_events);
   b4648:	4c16      	ldr	r4, [pc, #88]	; (b46a4 <_Z19subscribe_eventlistP12event_type_tii+0x88>)
    os_queue_create(&local_eventspaces[num_eventspaces], sizeof(event_data_t), event_length_max, NULL);
   b464a:	f000 fbf5 	bl	b4e38 <os_queue_create>
    subscribed_eventspaces[num_eventspaces] = (event_type_t*)malloc(sizeof(event_type_t) * num_events);
   b464e:	4628      	mov	r0, r5
   b4650:	f8d6 a000 	ldr.w	sl, [r6]
   b4654:	f8d4 9000 	ldr.w	r9, [r4]
   b4658:	f000 fd86 	bl	b5168 <malloc>
   b465c:	f849 002a 	str.w	r0, [r9, sl, lsl #2]

    // Add to list of events
    for(int n = 0; n < num_events; n++){
        subscribed_eventspaces[num_eventspaces][n] = event_list[n];
   b4660:	6820      	ldr	r0, [r4, #0]
    for(int n = 0; n < num_events; n++){
   b4662:	2300      	movs	r3, #0
   b4664:	42ab      	cmp	r3, r5
        subscribed_eventspaces[num_eventspaces][n] = event_list[n];
   b4666:	6834      	ldr	r4, [r6, #0]
    for(int n = 0; n < num_events; n++){
   b4668:	da05      	bge.n	b4676 <_Z19subscribe_eventlistP12event_type_tii+0x5a>
        subscribed_eventspaces[num_eventspaces][n] = event_list[n];
   b466a:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   b466e:	5cf9      	ldrb	r1, [r7, r3]
   b4670:	54d1      	strb	r1, [r2, r3]
    for(int n = 0; n < num_events; n++){
   b4672:	3301      	adds	r3, #1
   b4674:	e7f6      	b.n	b4664 <_Z19subscribe_eventlistP12event_type_tii+0x48>
    }
    num_subscribed_events[num_eventspaces] = num_events;
   b4676:	4b0c      	ldr	r3, [pc, #48]	; (b46a8 <_Z19subscribe_eventlistP12event_type_tii+0x8c>)
    int ret = num_eventspaces;
    num_eventspaces++;
    os_mutex_unlock(event_management_mutx);
   b4678:	f8d8 0000 	ldr.w	r0, [r8]
    num_subscribed_events[num_eventspaces] = num_events;
   b467c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    num_eventspaces++;
   b4680:	1c63      	adds	r3, r4, #1
   b4682:	6033      	str	r3, [r6, #0]
    os_mutex_unlock(event_management_mutx);
   b4684:	f000 fbb8 	bl	b4df8 <os_mutex_unlock>
    return ret;
}
   b4688:	4620      	mov	r0, r4
   b468a:	b002      	add	sp, #8
   b468c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ERR_INT;
   b4690:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b4694:	e7f8      	b.n	b4688 <_Z19subscribe_eventlistP12event_type_tii+0x6c>
   b4696:	bf00      	nop
   b4698:	2003e5d8 	.word	0x2003e5d8
   b469c:	2003e5f0 	.word	0x2003e5f0
   b46a0:	2003e5cc 	.word	0x2003e5cc
   b46a4:	2003e5ec 	.word	0x2003e5ec
   b46a8:	2003e5e0 	.word	0x2003e5e0
   b46ac:	2003e5dc 	.word	0x2003e5dc

000b46b0 <_Z16available_eventsi>:

bool available_events(int eventspace){
   b46b0:	b513      	push	{r0, r1, r4, lr}
    if(!event_management_init){
   b46b2:	4b08      	ldr	r3, [pc, #32]	; (b46d4 <_Z16available_eventsi+0x24>)
bool available_events(int eventspace){
   b46b4:	4604      	mov	r4, r0
    if(!event_management_init){
   b46b6:	7818      	ldrb	r0, [r3, #0]
   b46b8:	b150      	cbz	r0, b46d0 <_Z16available_eventsi+0x20>
        return false;
    }

    event_data_t data;
    if(os_queue_peek(local_eventspaces[eventspace], &data, 100, NULL) == 0){
   b46ba:	4807      	ldr	r0, [pc, #28]	; (b46d8 <_Z16available_eventsi+0x28>)
   b46bc:	2300      	movs	r3, #0
   b46be:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   b46c2:	2264      	movs	r2, #100	; 0x64
   b46c4:	4669      	mov	r1, sp
   b46c6:	f000 fbdf 	bl	b4e88 <os_queue_peek>
   b46ca:	fab0 f080 	clz	r0, r0
   b46ce:	0940      	lsrs	r0, r0, #5
        return true;
    }

    return false;
}
   b46d0:	b002      	add	sp, #8
   b46d2:	bd10      	pop	{r4, pc}
   b46d4:	2003e5d8 	.word	0x2003e5d8
   b46d8:	2003e5cc 	.word	0x2003e5cc

000b46dc <_Z13consume_eventi>:

event_data_t consume_event(int eventspace){
   b46dc:	b538      	push	{r3, r4, r5, lr}
    event_data_t event;
    memset(&event, 0, sizeof(event_data_t));

    if(!event_management_init){
   b46de:	4a09      	ldr	r2, [pc, #36]	; (b4704 <_Z13consume_eventi+0x28>)
   b46e0:	7812      	ldrb	r2, [r2, #0]
event_data_t consume_event(int eventspace){
   b46e2:	4604      	mov	r4, r0
    memset(&event, 0, sizeof(event_data_t));
   b46e4:	2300      	movs	r3, #0
   b46e6:	e9c4 3300 	strd	r3, r3, [r4]
event_data_t consume_event(int eventspace){
   b46ea:	4608      	mov	r0, r1
    if(!event_management_init){
   b46ec:	b13a      	cbz	r2, b46fe <_Z13consume_eventi+0x22>
        return event;
    }

    os_queue_take(local_eventspaces[eventspace], &event, (system_tick_t)-1, NULL);
   b46ee:	4d06      	ldr	r5, [pc, #24]	; (b4708 <_Z13consume_eventi+0x2c>)
   b46f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b46f4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   b46f8:	4621      	mov	r1, r4
   b46fa:	f000 fbad 	bl	b4e58 <os_queue_take>

    return event;
   b46fe:	4620      	mov	r0, r4
   b4700:	bd38      	pop	{r3, r4, r5, pc}
   b4702:	bf00      	nop
   b4704:	2003e5d8 	.word	0x2003e5d8
   b4708:	2003e5cc 	.word	0x2003e5cc

000b470c <_ZL24update_battery_level_blev>:

// The battery_level characteristic shows the battery level of
BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
Timer battery_ble_update_timer(3000, update_battery_level_ble);

void update_battery_level_ble(void){
   b470c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    FuelGauge fuel;
   b470e:	2100      	movs	r1, #0
   b4710:	a802      	add	r0, sp, #8
   b4712:	f001 f88b 	bl	b582c <_ZN9FuelGaugeC1Eb>
    float battery_level = fuel.getVCell();
   b4716:	a802      	add	r0, sp, #8
   b4718:	f001 f8dc 	bl	b58d4 <_ZN9FuelGauge8getVCellEv>
    
    batteryLevelCharacteristic.setValue((const char*)&battery_level);
   b471c:	2200      	movs	r2, #0
   b471e:	a901      	add	r1, sp, #4
   b4720:	4805      	ldr	r0, [pc, #20]	; (b4738 <_ZL24update_battery_level_blev+0x2c>)
    float battery_level = fuel.getVCell();
   b4722:	ed8d 0a01 	vstr	s0, [sp, #4]
    batteryLevelCharacteristic.setValue((const char*)&battery_level);
   b4726:	f001 fc31 	bl	b5f8c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    FuelGauge fuel;
   b472a:	a802      	add	r0, sp, #8
   b472c:	f001 f88e 	bl	b584c <_ZN9FuelGaugeD1Ev>
}
   b4730:	b005      	add	sp, #20
   b4732:	f85d fb04 	ldr.w	pc, [sp], #4
   b4736:	bf00      	nop
   b4738:	2003e644 	.word	0x2003e644

000b473c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b473c:	b538      	push	{r3, r4, r5, lr}
   b473e:	4604      	mov	r4, r0
   b4740:	1845      	adds	r5, r0, r1
    // Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);

    for (size_t ii = 0; ii < len; ii++) {
   b4742:	42ac      	cmp	r4, r5
   b4744:	d007      	beq.n	b4756 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a>
        Serial.write(data[ii]);
   b4746:	f000 ff07 	bl	b5558 <_Z16_fetch_usbserialv>
   b474a:	6803      	ldr	r3, [r0, #0]
   b474c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4750:	689b      	ldr	r3, [r3, #8]
   b4752:	4798      	blx	r3
    for (size_t ii = 0; ii < len; ii++) {
   b4754:	e7f5      	b.n	b4742 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6>
    }
}
   b4756:	bd38      	pop	{r3, r4, r5, pc}

000b4758 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4758:	6943      	ldr	r3, [r0, #20]
   b475a:	b113      	cbz	r3, b4762 <_ZN5Timer7timeoutEv+0xa>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b475c:	6983      	ldr	r3, [r0, #24]
   b475e:	300c      	adds	r0, #12
   b4760:	4718      	bx	r3
            callback();
        }
    }
   b4762:	4770      	bx	lr

000b4764 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4764:	b513      	push	{r0, r1, r4, lr}
        os_thread_scheduling(false, NULL);
   b4766:	2100      	movs	r1, #0
   b4768:	4604      	mov	r4, r0
   b476a:	4608      	mov	r0, r1
   b476c:	f000 fb0c 	bl	b4d88 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4770:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4772:	4620      	mov	r0, r4
   b4774:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4776:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4778:	f000 fb1e 	bl	b4db8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b477c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b477e:	b10c      	cbz	r4, b4784 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4780:	2301      	movs	r3, #1
   b4782:	7123      	strb	r3, [r4, #4]
        os_thread_scheduling(true, NULL);
   b4784:	2100      	movs	r1, #0
   b4786:	2001      	movs	r0, #1
   b4788:	f000 fafe 	bl	b4d88 <os_thread_scheduling>
            }
        }
        if (t) {
   b478c:	b12c      	cbz	r4, b479a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b478e:	6823      	ldr	r3, [r4, #0]
   b4790:	4620      	mov	r0, r4
   b4792:	689b      	ldr	r3, [r3, #8]
   b4794:	4798      	blx	r3
            t->running = false;
   b4796:	2300      	movs	r3, #0
   b4798:	7123      	strb	r3, [r4, #4]
        }
    }
   b479a:	b002      	add	sp, #8
   b479c:	bd10      	pop	{r4, pc}

000b479e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b479e:	2a01      	cmp	r2, #1
   b47a0:	d102      	bne.n	b47a8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b47a2:	6001      	str	r1, [r0, #0]
      }
   b47a4:	2000      	movs	r0, #0
   b47a6:	4770      	bx	lr
	  switch (__op)
   b47a8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b47aa:	bf04      	itt	eq
   b47ac:	680b      	ldreq	r3, [r1, #0]
   b47ae:	6003      	streq	r3, [r0, #0]
	      break;
   b47b0:	e7f8      	b.n	b47a4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b47b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b47b2:	6803      	ldr	r3, [r0, #0]
   b47b4:	4718      	bx	r3

000b47b6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b.isra.0>:
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
   b47b6:	b084      	sub	sp, #16
   b47b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b47ba:	b089      	sub	sp, #36	; 0x24
   b47bc:	ac0f      	add	r4, sp, #60	; 0x3c
   b47be:	e884 000e 	stmia.w	r4, {r1, r2, r3}
   b47c2:	4606      	mov	r6, r0
        BleUuid tempUUID(uuid);
   b47c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b47c6:	ad03      	add	r5, sp, #12
   b47c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b47ca:	6823      	ldr	r3, [r4, #0]
    size_t appendServiceUUID(T uuid, bool force = false) {
   b47cc:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
        BleUuid tempUUID(uuid);
   b47d0:	602b      	str	r3, [r5, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b47d2:	a803      	add	r0, sp, #12
   b47d4:	f001 fa9e 	bl	b5d14 <_ZNK8particle7BleUuid4typeEv>
   b47d8:	b988      	cbnz	r0, b47fe <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b.isra.0+0x48>
            uint16_t uuid16 = tempUUID.shorted();
   b47da:	a803      	add	r0, sp, #12
   b47dc:	f001 fab6 	bl	b5d4c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b47e0:	9700      	str	r7, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b47e2:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b47e6:	2302      	movs	r3, #2
   b47e8:	f10d 020a 	add.w	r2, sp, #10
   b47ec:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b47ee:	4630      	mov	r0, r6
   b47f0:	f001 fe92 	bl	b6518 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
        }
    }
   b47f4:	b009      	add	sp, #36	; 0x24
   b47f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b47fa:	b004      	add	sp, #16
   b47fc:	4770      	bx	lr
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b47fe:	a803      	add	r0, sp, #12
   b4800:	f001 faa6 	bl	b5d50 <_ZNK8particle7BleUuid8rawBytesEv>
   b4804:	9700      	str	r7, [sp, #0]
   b4806:	4602      	mov	r2, r0
   b4808:	2310      	movs	r3, #16
   b480a:	2107      	movs	r1, #7
   b480c:	e7ef      	b.n	b47ee <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b.isra.0+0x38>

000b480e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b480e:	b510      	push	{r4, lr}
      if (_M_manager)
   b4810:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4812:	4604      	mov	r4, r0
      if (_M_manager)
   b4814:	b113      	cbz	r3, b481c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4816:	2203      	movs	r2, #3
   b4818:	4601      	mov	r1, r0
   b481a:	4798      	blx	r3
    }
   b481c:	4620      	mov	r0, r4
   b481e:	bd10      	pop	{r4, pc}

000b4820 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4820:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4822:	4b13      	ldr	r3, [pc, #76]	; (b4870 <_ZN5TimerD1Ev+0x50>)
   b4824:	6003      	str	r3, [r0, #0]
   b4826:	4604      	mov	r4, r0
        if (handle) {
   b4828:	6880      	ldr	r0, [r0, #8]
   b482a:	b1c8      	cbz	r0, b4860 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b482c:	2500      	movs	r5, #0
   b482e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4832:	e9cd 3500 	strd	r3, r5, [sp]
   b4836:	2102      	movs	r1, #2
   b4838:	462b      	mov	r3, r5
   b483a:	462a      	mov	r2, r5
   b483c:	f000 fac4 	bl	b4dc8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4840:	68a0      	ldr	r0, [r4, #8]
   b4842:	4629      	mov	r1, r5
   b4844:	f000 fb18 	bl	b4e78 <os_timer_set_id>
            while (running) {
   b4848:	7923      	ldrb	r3, [r4, #4]
   b484a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b484e:	b113      	cbz	r3, b4856 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4850:	f000 fa92 	bl	b4d78 <os_thread_yield>
            while (running) {
   b4854:	e7f8      	b.n	b4848 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4856:	68a0      	ldr	r0, [r4, #8]
   b4858:	4629      	mov	r1, r5
   b485a:	f000 faa5 	bl	b4da8 <os_timer_destroy>
            handle = nullptr;
   b485e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4860:	f104 000c 	add.w	r0, r4, #12
   b4864:	f7ff ffd3 	bl	b480e <_ZNSt14_Function_baseD1Ev>
    }
   b4868:	4620      	mov	r0, r4
   b486a:	b003      	add	sp, #12
   b486c:	bd30      	pop	{r4, r5, pc}
   b486e:	bf00      	nop
   b4870:	000b785c 	.word	0x000b785c

000b4874 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4874:	b510      	push	{r4, lr}
   b4876:	4604      	mov	r4, r0
    }
   b4878:	f7ff ffd2 	bl	b4820 <_ZN5TimerD1Ev>
   b487c:	4620      	mov	r0, r4
   b487e:	211c      	movs	r1, #28
   b4880:	f7ff fc0b 	bl	b409a <_ZdlPvj>
   b4884:	4620      	mov	r0, r4
   b4886:	bd10      	pop	{r4, pc}

000b4888 <_Z26bluetooth_interface_threadPv>:

void bluetooth_interface_thread(void *params){
   b4888:	b508      	push	{r3, lr}
    for(;;){
        
        delay(3000);
   b488a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b488e:	f000 ff13 	bl	b56b8 <delay>
    for(;;){
   b4892:	e7fa      	b.n	b488a <_Z26bluetooth_interface_threadPv+0x2>

000b4894 <_Z24bluetooth_interface_initv>:
    }
}

void bluetooth_interface_init(void){
   b4894:	b530      	push	{r4, r5, lr}
   b4896:	b089      	sub	sp, #36	; 0x24
    BLE.on();
   b4898:	f001 fc3a 	bl	b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b489c:	f001 fc82 	bl	b61a4 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b48a0:	f001 fc36 	bl	b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48a4:	4a29      	ldr	r2, [pc, #164]	; (b494c <_Z24bluetooth_interface_initv+0xb8>)
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b48a6:	4d2a      	ldr	r5, [pc, #168]	; (b4950 <_Z24bluetooth_interface_initv+0xbc>)
   b48a8:	4601      	mov	r1, r0
   b48aa:	a805      	add	r0, sp, #20
   b48ac:	f002 f93a 	bl	b6b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b48b0:	a805      	add	r0, sp, #20
   b48b2:	f001 fd16 	bl	b62e2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b48b6:	f001 fc2b 	bl	b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48ba:	4a26      	ldr	r2, [pc, #152]	; (b4954 <_Z24bluetooth_interface_initv+0xc0>)
   b48bc:	4601      	mov	r1, r0
   b48be:	a805      	add	r0, sp, #20
   b48c0:	f002 f930 	bl	b6b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b48c4:	a805      	add	r0, sp, #20
   b48c6:	f001 fd0c 	bl	b62e2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(batteryLevelCharacteristic);
   b48ca:	f001 fc21 	bl	b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48ce:	4a22      	ldr	r2, [pc, #136]	; (b4958 <_Z24bluetooth_interface_initv+0xc4>)
   b48d0:	4601      	mov	r1, r0
   b48d2:	a805      	add	r0, sp, #20
   b48d4:	f002 f926 	bl	b6b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b48d8:	a805      	add	r0, sp, #20
   b48da:	f001 fd02 	bl	b62e2 <_ZN8particle17BleCharacteristicD1Ev>

    BleAdvertisingData data;
   b48de:	a805      	add	r0, sp, #20
   b48e0:	f001 fe25 	bl	b652e <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);
   b48e4:	2400      	movs	r4, #0
   b48e6:	4b1d      	ldr	r3, [pc, #116]	; (b495c <_Z24bluetooth_interface_initv+0xc8>)
   b48e8:	9402      	str	r4, [sp, #8]
   b48ea:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   b48ee:	e88d 0003 	stmia.w	sp, {r0, r1}
   b48f2:	a805      	add	r0, sp, #20
   b48f4:	cb0e      	ldmia	r3, {r1, r2, r3}
   b48f6:	f7ff ff5e 	bl	b47b6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b.isra.0>
    data.appendServiceUUID(batteryLevelService);
   b48fa:	4b19      	ldr	r3, [pc, #100]	; (b4960 <_Z24bluetooth_interface_initv+0xcc>)
   b48fc:	9402      	str	r4, [sp, #8]
   b48fe:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   b4902:	e88d 0003 	stmia.w	sp, {r0, r1}
   b4906:	a805      	add	r0, sp, #20
   b4908:	cb0e      	ldmia	r3, {r1, r2, r3}
   b490a:	f7ff ff54 	bl	b47b6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b.isra.0>
    BLE.advertise(&data);
   b490e:	f001 fbff 	bl	b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4912:	4622      	mov	r2, r4
   b4914:	a905      	add	r1, sp, #20
   b4916:	f001 fc8f 	bl	b6238 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   b491a:	68a8      	ldr	r0, [r5, #8]
   b491c:	b130      	cbz	r0, b492c <_Z24bluetooth_interface_initv+0x98>
   b491e:	e9cd 4400 	strd	r4, r4, [sp]
   b4922:	4623      	mov	r3, r4
   b4924:	4622      	mov	r2, r4
   b4926:	2102      	movs	r1, #2
   b4928:	f000 fa4e 	bl	b4dc8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b492c:	68a8      	ldr	r0, [r5, #8]
   b492e:	b140      	cbz	r0, b4942 <_Z24bluetooth_interface_initv+0xae>
   b4930:	2300      	movs	r3, #0
   b4932:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4936:	e9cd 2300 	strd	r2, r3, [sp]
   b493a:	4619      	mov	r1, r3
   b493c:	461a      	mov	r2, r3
   b493e:	f000 fa43 	bl	b4dc8 <os_timer_change>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4942:	9805      	ldr	r0, [sp, #20]
   b4944:	f000 fc18 	bl	b5178 <free>

    battery_ble_update_timer.start();
   b4948:	b009      	add	sp, #36	; 0x24
   b494a:	bd30      	pop	{r4, r5, pc}
   b494c:	2003e670 	.word	0x2003e670
   b4950:	2003e64c 	.word	0x2003e64c
   b4954:	2003e668 	.word	0x2003e668
   b4958:	2003e644 	.word	0x2003e644
   b495c:	2003e5f4 	.word	0x2003e5f4
   b4960:	2003e608 	.word	0x2003e608

000b4964 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4964:	b082      	sub	sp, #8
   b4966:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4968:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b496a:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b496c:	9315      	str	r3, [sp, #84]	; 0x54
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b496e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4970:	e9c0 3300 	strd	r3, r3, [r0]
   b4974:	4606      	mov	r6, r0
   b4976:	4694      	mov	ip, r2
   b4978:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b497a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b497c:	ac04      	add	r4, sp, #16
   b497e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4980:	682b      	ldr	r3, [r5, #0]
   b4982:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4984:	ad1a      	add	r5, sp, #104	; 0x68
   b4986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4988:	ac09      	add	r4, sp, #36	; 0x24
   b498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b498c:	682b      	ldr	r3, [r5, #0]
   b498e:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4990:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4992:	9302      	str	r3, [sp, #8]
   b4994:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4996:	9301      	str	r3, [sp, #4]
   b4998:	ab09      	add	r3, sp, #36	; 0x24
   b499a:	9300      	str	r3, [sp, #0]
   b499c:	4630      	mov	r0, r6
   b499e:	ab04      	add	r3, sp, #16
   b49a0:	4662      	mov	r2, ip
   b49a2:	4639      	mov	r1, r7
   b49a4:	f001 ff94 	bl	b68d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b49a8:	4630      	mov	r0, r6
   b49aa:	b00f      	add	sp, #60	; 0x3c
   b49ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b49b0:	b002      	add	sp, #8
   b49b2:	4770      	bx	lr

000b49b4 <_GLOBAL__sub_I_txCharacteristic>:
   b49b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b49b8:	4d47      	ldr	r5, [pc, #284]	; (b4ad8 <_GLOBAL__sub_I_txCharacteristic+0x124>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b49ba:	f8df 8164 	ldr.w	r8, [pc, #356]	; b4b20 <_GLOBAL__sub_I_txCharacteristic+0x16c>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b49be:	f8df 9164 	ldr.w	r9, [pc, #356]	; b4b24 <_GLOBAL__sub_I_txCharacteristic+0x170>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b49c2:	4946      	ldr	r1, [pc, #280]	; (b4adc <_GLOBAL__sub_I_txCharacteristic+0x128>)
   b49c4:	b095      	sub	sp, #84	; 0x54
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b49c6:	4628      	mov	r0, r5
   b49c8:	f001 fa42 	bl	b5e50 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b49cc:	4944      	ldr	r1, [pc, #272]	; (b4ae0 <_GLOBAL__sub_I_txCharacteristic+0x12c>)
   b49ce:	4640      	mov	r0, r8
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b49d0:	2400      	movs	r4, #0
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b49d2:	f001 fa3d 	bl	b5e50 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b49d6:	4943      	ldr	r1, [pc, #268]	; (b4ae4 <_GLOBAL__sub_I_txCharacteristic+0x130>)
   b49d8:	4648      	mov	r0, r9
   b49da:	f001 fa39 	bl	b5e50 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b49de:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b49e2:	462e      	mov	r6, r5
   b49e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b49e6:	2710      	movs	r7, #16
   b49e8:	eb0d 0c07 	add.w	ip, sp, r7
   b49ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b49f0:	6833      	ldr	r3, [r6, #0]
   b49f2:	f8cc 3000 	str.w	r3, [ip]
   b49f6:	f109 0304 	add.w	r3, r9, #4
   b49fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b49fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4a00:	f8d9 3000 	ldr.w	r3, [r9]
   b4a04:	4938      	ldr	r1, [pc, #224]	; (b4ae8 <_GLOBAL__sub_I_txCharacteristic+0x134>)
   b4a06:	4839      	ldr	r0, [pc, #228]	; (b4aec <_GLOBAL__sub_I_txCharacteristic+0x138>)
   b4a08:	463a      	mov	r2, r7
   b4a0a:	f7ff ffab 	bl	b4964 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b4a0e:	4b38      	ldr	r3, [pc, #224]	; (b4af0 <_GLOBAL__sub_I_txCharacteristic+0x13c>)
   b4a10:	940a      	str	r4, [sp, #40]	; 0x28
   b4a12:	9309      	str	r3, [sp, #36]	; 0x24
   b4a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4a16:	eb0d 0c07 	add.w	ip, sp, r7
   b4a1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4a1e:	6833      	ldr	r3, [r6, #0]
   b4a20:	f8cc 3000 	str.w	r3, [ip]
   b4a24:	f108 0304 	add.w	r3, r8, #4
   b4a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4a2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
const BleUuid batteryLevelService(0x180f);
   b4a2e:	4d31      	ldr	r5, [pc, #196]	; (b4af4 <_GLOBAL__sub_I_txCharacteristic+0x140>)
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b4a30:	f8d8 3000 	ldr.w	r3, [r8]
   b4a34:	4930      	ldr	r1, [pc, #192]	; (b4af8 <_GLOBAL__sub_I_txCharacteristic+0x144>)
   b4a36:	4831      	ldr	r0, [pc, #196]	; (b4afc <_GLOBAL__sub_I_txCharacteristic+0x148>)
   b4a38:	f04f 0204 	mov.w	r2, #4
   b4a3c:	f7ff ff92 	bl	b4964 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
   b4a40:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
const BleUuid batteryLevelService(0x180f);
   b4a44:	f641 010f 	movw	r1, #6159	; 0x180f
   b4a48:	4628      	mov	r0, r5
   b4a4a:	f001 f940 	bl	b5cce <_ZN8particle7BleUuidC1Et>
BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
   b4a4e:	f642 2119 	movw	r1, #10777	; 0x2a19
   b4a52:	4640      	mov	r0, r8
   b4a54:	f001 f93b 	bl	b5cce <_ZN8particle7BleUuidC1Et>
   b4a58:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4a5e:	eb0d 0607 	add.w	r6, sp, r7
   b4a62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4a64:	682b      	ldr	r3, [r5, #0]
   b4a66:	6033      	str	r3, [r6, #0]
   b4a68:	ab14      	add	r3, sp, #80	; 0x50
   b4a6a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   b4a6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b4a74:	4922      	ldr	r1, [pc, #136]	; (b4b00 <_GLOBAL__sub_I_txCharacteristic+0x14c>)
   b4a76:	4823      	ldr	r0, [pc, #140]	; (b4b04 <_GLOBAL__sub_I_txCharacteristic+0x150>)
   b4a78:	463a      	mov	r2, r7
   b4a7a:	f7ff ff73 	bl	b4964 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4a7e:	4b22      	ldr	r3, [pc, #136]	; (b4b08 <_GLOBAL__sub_I_txCharacteristic+0x154>)
   b4a80:	930f      	str	r3, [sp, #60]	; 0x3c
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a82:	e898 0003 	ldmia.w	r8, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4a86:	4b21      	ldr	r3, [pc, #132]	; (b4b0c <_GLOBAL__sub_I_txCharacteristic+0x158>)
   b4a88:	4a21      	ldr	r2, [pc, #132]	; (b4b10 <_GLOBAL__sub_I_txCharacteristic+0x15c>)
   b4a8a:	601a      	str	r2, [r3, #0]
   b4a8c:	ad0d      	add	r5, sp, #52	; 0x34
      __a = _GLIBCXX_MOVE(__b);
   b4a8e:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a92:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4a96:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4a9a:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4a9e:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4aa2:	e882 0003 	stmia.w	r2, {r0, r1}
   b4aa6:	4a1b      	ldr	r2, [pc, #108]	; (b4b14 <_GLOBAL__sub_I_txCharacteristic+0x160>)
   b4aa8:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4aaa:	699a      	ldr	r2, [r3, #24]
   b4aac:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b4aae:	4a1a      	ldr	r2, [pc, #104]	; (b4b18 <_GLOBAL__sub_I_txCharacteristic+0x164>)
   b4ab0:	619a      	str	r2, [r3, #24]
   b4ab2:	711c      	strb	r4, [r3, #4]
   b4ab4:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4ab6:	4a19      	ldr	r2, [pc, #100]	; (b4b1c <_GLOBAL__sub_I_txCharacteristic+0x168>)
      __a = _GLIBCXX_MOVE(__b);
   b4ab8:	9411      	str	r4, [sp, #68]	; 0x44
   b4aba:	f640 31b8 	movw	r1, #3000	; 0xbb8
   b4abe:	f103 0008 	add.w	r0, r3, #8
   b4ac2:	e9cd 4400 	strd	r4, r4, [sp]
   b4ac6:	f000 f967 	bl	b4d98 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b4aca:	4640      	mov	r0, r8
   b4acc:	f7ff fe9f 	bl	b480e <_ZNSt14_Function_baseD1Ev>
   b4ad0:	b015      	add	sp, #84	; 0x54
   b4ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4ad6:	bf00      	nop
   b4ad8:	2003e5f4 	.word	0x2003e5f4
   b4adc:	000b77d8 	.word	0x000b77d8
   b4ae0:	000b77fd 	.word	0x000b77fd
   b4ae4:	000b7822 	.word	0x000b7822
   b4ae8:	000b7847 	.word	0x000b7847
   b4aec:	2003e670 	.word	0x2003e670
   b4af0:	000b473d 	.word	0x000b473d
   b4af4:	2003e608 	.word	0x2003e608
   b4af8:	000b784a 	.word	0x000b784a
   b4afc:	2003e668 	.word	0x2003e668
   b4b00:	000b784d 	.word	0x000b784d
   b4b04:	2003e644 	.word	0x2003e644
   b4b08:	000b470d 	.word	0x000b470d
   b4b0c:	2003e64c 	.word	0x2003e64c
   b4b10:	000b785c 	.word	0x000b785c
   b4b14:	000b479f 	.word	0x000b479f
   b4b18:	000b47b3 	.word	0x000b47b3
   b4b1c:	000b4765 	.word	0x000b4765
   b4b20:	2003e61c 	.word	0x2003e61c
   b4b24:	2003e630 	.word	0x2003e630

000b4b28 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <HAL_USB_USART_Init+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	681b      	ldr	r3, [r3, #0]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	0003024c 	.word	0x0003024c

000b4b38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <HAL_USB_USART_Available_Data+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	691b      	ldr	r3, [r3, #16]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	0003024c 	.word	0x0003024c

000b4b48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	695b      	ldr	r3, [r3, #20]
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	0003024c 	.word	0x0003024c

000b4b58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <HAL_USB_USART_Receive_Data+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	699b      	ldr	r3, [r3, #24]
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	0003024c 	.word	0x0003024c

000b4b68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <HAL_USB_USART_Send_Data+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	69db      	ldr	r3, [r3, #28]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	0003024c 	.word	0x0003024c

000b4b78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <HAL_USB_USART_Flush_Data+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	6a1b      	ldr	r3, [r3, #32]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	0003024c 	.word	0x0003024c

000b4b88 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <hal_i2c_begin_transmission+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	699b      	ldr	r3, [r3, #24]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	00030228 	.word	0x00030228

000b4b98 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <hal_i2c_end_transmission+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	69db      	ldr	r3, [r3, #28]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	00030228 	.word	0x00030228

000b4ba8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <hal_i2c_write+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6a1b      	ldr	r3, [r3, #32]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030228 	.word	0x00030228

000b4bb8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <hal_i2c_available+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030228 	.word	0x00030228

000b4bc8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <hal_i2c_read+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030228 	.word	0x00030228

000b4bd8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_i2c_peek+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030228 	.word	0x00030228

000b4be8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <hal_i2c_flush+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030228 	.word	0x00030228

000b4bf8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <hal_i2c_is_enabled+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030228 	.word	0x00030228

000b4c08 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <hal_i2c_init+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030228 	.word	0x00030228

000b4c18 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <hal_i2c_lock+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030228 	.word	0x00030228

000b4c28 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <hal_i2c_unlock+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030228 	.word	0x00030228

000b4c38 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <hal_i2c_request_ex+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030228 	.word	0x00030228

000b4c48 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <hal_spi_begin+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	681b      	ldr	r3, [r3, #0]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030230 	.word	0x00030230

000b4c58 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <hal_spi_set_data_mode+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	68db      	ldr	r3, [r3, #12]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030230 	.word	0x00030230

000b4c68 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <hal_spi_set_clock_divider+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	691b      	ldr	r3, [r3, #16]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030230 	.word	0x00030230

000b4c78 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <hal_spi_transfer+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	695b      	ldr	r3, [r3, #20]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030230 	.word	0x00030230

000b4c88 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <hal_spi_init+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	69db      	ldr	r3, [r3, #28]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030230 	.word	0x00030230

000b4c98 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <hal_spi_is_enabled+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6a1b      	ldr	r3, [r3, #32]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030230 	.word	0x00030230

000b4ca8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <hal_spi_info+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030230 	.word	0x00030230

000b4cb8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <hal_spi_acquire+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030230 	.word	0x00030230

000b4cc8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <hal_spi_release+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030230 	.word	0x00030230

000b4cd8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <hal_usart_write+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	68db      	ldr	r3, [r3, #12]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	0003023c 	.word	0x0003023c

000b4ce8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <hal_usart_available+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	691b      	ldr	r3, [r3, #16]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	0003023c 	.word	0x0003023c

000b4cf8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <hal_usart_read+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	695b      	ldr	r3, [r3, #20]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	0003023c 	.word	0x0003023c

000b4d08 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <hal_usart_peek+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	699b      	ldr	r3, [r3, #24]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	0003023c 	.word	0x0003023c

000b4d18 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <hal_usart_flush+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	69db      	ldr	r3, [r3, #28]
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003023c 	.word	0x0003023c

000b4d28 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <hal_usart_is_enabled+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	6a1b      	ldr	r3, [r3, #32]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003023c 	.word	0x0003023c

000b4d38 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <hal_usart_available_data_for_write+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	0003023c 	.word	0x0003023c

000b4d48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <hal_usart_init_ex+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	0003023c 	.word	0x0003023c

000b4d58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <inet_inet_ntop+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	695b      	ldr	r3, [r3, #20]
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	00030264 	.word	0x00030264

000b4d68 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <os_thread_create+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	685b      	ldr	r3, [r3, #4]
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	00030248 	.word	0x00030248

000b4d78 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <os_thread_yield+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	68db      	ldr	r3, [r3, #12]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	00030248 	.word	0x00030248

000b4d88 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <os_thread_scheduling+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	69db      	ldr	r3, [r3, #28]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030248 	.word	0x00030248

000b4d98 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <os_timer_create+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	6a1b      	ldr	r3, [r3, #32]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030248 	.word	0x00030248

000b4da8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <os_timer_destroy+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	00030248 	.word	0x00030248

000b4db8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <os_timer_get_id+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030248 	.word	0x00030248

000b4dc8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <os_timer_change+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	00030248 	.word	0x00030248

000b4dd8 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <os_mutex_create+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	00030248 	.word	0x00030248

000b4de8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <os_mutex_lock+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	00030248 	.word	0x00030248

000b4df8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <os_mutex_unlock+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030248 	.word	0x00030248

000b4e08 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <os_mutex_recursive_create+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030248 	.word	0x00030248

000b4e18 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <os_mutex_recursive_lock+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	00030248 	.word	0x00030248

000b4e28 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <os_mutex_recursive_unlock+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	00030248 	.word	0x00030248

000b4e38 <os_queue_create>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <os_queue_create+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	00030248 	.word	0x00030248

000b4e48 <os_queue_put>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <os_queue_put+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030248 	.word	0x00030248

000b4e58 <os_queue_take>:
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <os_queue_take+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	00030248 	.word	0x00030248

000b4e68 <os_thread_exit>:
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <os_thread_exit+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	00030248 	.word	0x00030248

000b4e78 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <os_timer_set_id+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	00030248 	.word	0x00030248

000b4e88 <os_queue_peek>:
DYNALIB_FN(30, hal_concurrent, os_semaphore_create, int(os_semaphore_t*, unsigned, unsigned))
DYNALIB_FN(31, hal_concurrent, os_semaphore_destroy, int(os_semaphore_t))
DYNALIB_FN(32, hal_concurrent, os_semaphore_take, int(os_semaphore_t, system_tick_t, bool))
DYNALIB_FN(33, hal_concurrent, os_semaphore_give, int(os_semaphore_t, bool))
DYNALIB_FN(34, hal_concurrent, os_scheduler_get_state, os_scheduler_state_t(void*))
DYNALIB_FN(35, hal_concurrent, os_queue_peek, int(os_queue_t, void* item, system_tick_t, void*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b03      	ldr	r3, [pc, #12]	; (b4e98 <os_queue_peek+0x10>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   b4e92:	9301      	str	r3, [sp, #4]
   b4e94:	bd08      	pop	{r3, pc}
   b4e96:	0000      	.short	0x0000
   b4e98:	00030248 	.word	0x00030248

000b4e9c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <hal_ble_stack_init+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	689b      	ldr	r3, [r3, #8]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030278 	.word	0x00030278

000b4eac <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <hal_ble_gap_set_advertising_data+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030278 	.word	0x00030278

000b4ebc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <hal_ble_gap_set_scan_response_data+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030278 	.word	0x00030278

000b4ecc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <hal_ble_gap_start_advertising+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030278 	.word	0x00030278

000b4edc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b03      	ldr	r3, [pc, #12]	; (b4eec <hal_ble_gap_disconnect+0x10>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4ee6:	9301      	str	r3, [sp, #4]
   b4ee8:	bd08      	pop	{r3, pc}
   b4eea:	0000      	.short	0x0000
   b4eec:	00030278 	.word	0x00030278

000b4ef0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b03      	ldr	r3, [pc, #12]	; (b4f00 <hal_ble_gatt_server_add_service+0x10>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4efa:	9301      	str	r3, [sp, #4]
   b4efc:	bd08      	pop	{r3, pc}
   b4efe:	0000      	.short	0x0000
   b4f00:	00030278 	.word	0x00030278

000b4f04 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b03      	ldr	r3, [pc, #12]	; (b4f14 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4f0e:	9301      	str	r3, [sp, #4]
   b4f10:	bd08      	pop	{r3, pc}
   b4f12:	0000      	.short	0x0000
   b4f14:	00030278 	.word	0x00030278

000b4f18 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b03      	ldr	r3, [pc, #12]	; (b4f28 <hal_ble_gatt_client_write_with_response+0x10>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b4f22:	9301      	str	r3, [sp, #4]
   b4f24:	bd08      	pop	{r3, pc}
   b4f26:	0000      	.short	0x0000
   b4f28:	00030278 	.word	0x00030278

000b4f2c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b03      	ldr	r3, [pc, #12]	; (b4f3c <hal_ble_gatt_client_write_without_response+0x10>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b4f36:	9301      	str	r3, [sp, #4]
   b4f38:	bd08      	pop	{r3, pc}
   b4f3a:	0000      	.short	0x0000
   b4f3c:	00030278 	.word	0x00030278

000b4f40 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b03      	ldr	r3, [pc, #12]	; (b4f50 <hal_ble_gatt_server_add_characteristic+0x10>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4f4a:	9301      	str	r3, [sp, #4]
   b4f4c:	bd08      	pop	{r3, pc}
   b4f4e:	0000      	.short	0x0000
   b4f50:	00030278 	.word	0x00030278

000b4f54 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b03      	ldr	r3, [pc, #12]	; (b4f64 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4f5e:	9301      	str	r3, [sp, #4]
   b4f60:	bd08      	pop	{r3, pc}
   b4f62:	0000      	.short	0x0000
   b4f64:	00030278 	.word	0x00030278

000b4f68 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b03      	ldr	r3, [pc, #12]	; (b4f78 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b4f72:	9301      	str	r3, [sp, #4]
   b4f74:	bd08      	pop	{r3, pc}
   b4f76:	0000      	.short	0x0000
   b4f78:	00030278 	.word	0x00030278

000b4f7c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b03      	ldr	r3, [pc, #12]	; (b4f8c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b4f86:	9301      	str	r3, [sp, #4]
   b4f88:	bd08      	pop	{r3, pc}
   b4f8a:	0000      	.short	0x0000
   b4f8c:	00030278 	.word	0x00030278

000b4f90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <HAL_RNG_GetRandomNumber+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	685b      	ldr	r3, [r3, #4]
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	00030218 	.word	0x00030218

000b4fa0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <HAL_Delay_Milliseconds+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	689b      	ldr	r3, [r3, #8]
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	00030218 	.word	0x00030218

000b4fb0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <HAL_Delay_Microseconds+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	68db      	ldr	r3, [r3, #12]
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	00030218 	.word	0x00030218

000b4fc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	695b      	ldr	r3, [r3, #20]
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	00030218 	.word	0x00030218

000b4fd0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <HAL_Pin_Mode+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	689b      	ldr	r3, [r3, #8]
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	0003022c 	.word	0x0003022c

000b4fe0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <HAL_Get_Pin_Mode+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	68db      	ldr	r3, [r3, #12]
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	0003022c 	.word	0x0003022c

000b4ff0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <HAL_GPIO_Write+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	691b      	ldr	r3, [r3, #16]
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	0003022c 	.word	0x0003022c

000b5000 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <netdb_freeaddrinfo+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	689b      	ldr	r3, [r3, #8]
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	00030268 	.word	0x00030268

000b5010 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <netdb_getaddrinfo+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	68db      	ldr	r3, [r3, #12]
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	00030268 	.word	0x00030268

000b5020 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <panic_+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	00030260 	.word	0x00030260

000b5030 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <log_message+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	00030260 	.word	0x00030260

000b5040 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	00030244 	.word	0x00030244

000b5050 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <network_connect+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	685b      	ldr	r3, [r3, #4]
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	00030240 	.word	0x00030240

000b5060 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <network_connecting+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	689b      	ldr	r3, [r3, #8]
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	00030240 	.word	0x00030240

000b5070 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <network_disconnect+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	68db      	ldr	r3, [r3, #12]
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	00030240 	.word	0x00030240

000b5080 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <network_ready+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	691b      	ldr	r3, [r3, #16]
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	00030240 	.word	0x00030240

000b5090 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <network_on+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	695b      	ldr	r3, [r3, #20]
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030240 	.word	0x00030240

000b50a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <network_off+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	699b      	ldr	r3, [r3, #24]
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	00030240 	.word	0x00030240

000b50b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <network_listen+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	69db      	ldr	r3, [r3, #28]
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	00030240 	.word	0x00030240

000b50c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <network_listening+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	6a1b      	ldr	r3, [r3, #32]
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	00030240 	.word	0x00030240

000b50d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <network_set_listen_timeout+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	00030240 	.word	0x00030240

000b50e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <network_get_listen_timeout+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	00030240 	.word	0x00030240

000b50f0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <network_is_on+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	00030240 	.word	0x00030240

000b5100 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <network_is_off+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	00030240 	.word	0x00030240

000b5110 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <set_system_mode+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	685b      	ldr	r3, [r3, #4]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	00030220 	.word	0x00030220

000b5120 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <system_delay_ms+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	695b      	ldr	r3, [r3, #20]
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	00030220 	.word	0x00030220

000b5130 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <system_thread_set_state+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	00030220 	.word	0x00030220

000b5140 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b03      	ldr	r3, [pc, #12]	; (b5150 <system_ctrl_set_app_request_handler+0x10>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b514a:	9301      	str	r3, [sp, #4]
   b514c:	bd08      	pop	{r3, pc}
   b514e:	0000      	.short	0x0000
   b5150:	00030220 	.word	0x00030220

000b5154 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b03      	ldr	r3, [pc, #12]	; (b5164 <system_ctrl_set_result+0x10>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b515e:	9301      	str	r3, [sp, #4]
   b5160:	bd08      	pop	{r3, pc}
   b5162:	0000      	.short	0x0000
   b5164:	00030220 	.word	0x00030220

000b5168 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <malloc+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	681b      	ldr	r3, [r3, #0]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	0003021c 	.word	0x0003021c

000b5178 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <free+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	685b      	ldr	r3, [r3, #4]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	0003021c 	.word	0x0003021c

000b5188 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <realloc+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	689b      	ldr	r3, [r3, #8]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	0003021c 	.word	0x0003021c

000b5198 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <abort+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	0003021c 	.word	0x0003021c

000b51a8 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <__assert_func+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	0003021c 	.word	0x0003021c

000b51b8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <newlib_impure_ptr_callback+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	0003021c 	.word	0x0003021c

000b51c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b51c8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b51ca:	6843      	ldr	r3, [r0, #4]
   b51cc:	3b01      	subs	r3, #1
    {
   b51ce:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b51d0:	6043      	str	r3, [r0, #4]
   b51d2:	b963      	cbnz	r3, b51ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b51d4:	6803      	ldr	r3, [r0, #0]
   b51d6:	689b      	ldr	r3, [r3, #8]
   b51d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b51da:	68a3      	ldr	r3, [r4, #8]
   b51dc:	3b01      	subs	r3, #1
   b51de:	60a3      	str	r3, [r4, #8]
   b51e0:	b92b      	cbnz	r3, b51ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b51e2:	6823      	ldr	r3, [r4, #0]
   b51e4:	4620      	mov	r0, r4
   b51e6:	68db      	ldr	r3, [r3, #12]
    }
   b51e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b51ec:	4718      	bx	r3
    }
   b51ee:	bd10      	pop	{r4, pc}

000b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b51f0:	b510      	push	{r4, lr}
   b51f2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b51f4:	6800      	ldr	r0, [r0, #0]
   b51f6:	b108      	cbz	r0, b51fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b51f8:	f7ff ffe6 	bl	b51c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b51fc:	4620      	mov	r0, r4
   b51fe:	bd10      	pop	{r4, pc}

000b5200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5200:	2300      	movs	r3, #0
   b5202:	6840      	ldr	r0, [r0, #4]
   b5204:	461a      	mov	r2, r3
   b5206:	f7ff bf23 	b.w	b5050 <network_connect>

000b520a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b520a:	6840      	ldr	r0, [r0, #4]
   b520c:	2200      	movs	r2, #0
   b520e:	2102      	movs	r1, #2
   b5210:	f7ff bf2e 	b.w	b5070 <network_disconnect>

000b5214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5214:	2200      	movs	r2, #0
   b5216:	6840      	ldr	r0, [r0, #4]
   b5218:	4611      	mov	r1, r2
   b521a:	f7ff bf21 	b.w	b5060 <network_connecting>

000b521e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b521e:	2200      	movs	r2, #0
   b5220:	6840      	ldr	r0, [r0, #4]
   b5222:	4611      	mov	r1, r2
   b5224:	f7ff bf2c 	b.w	b5080 <network_ready>

000b5228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5228:	2300      	movs	r3, #0
   b522a:	6840      	ldr	r0, [r0, #4]
   b522c:	461a      	mov	r2, r3
   b522e:	4619      	mov	r1, r3
   b5230:	f7ff bf2e 	b.w	b5090 <network_on>

000b5234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5234:	2300      	movs	r3, #0
   b5236:	6840      	ldr	r0, [r0, #4]
   b5238:	461a      	mov	r2, r3
   b523a:	4619      	mov	r1, r3
   b523c:	f7ff bf30 	b.w	b50a0 <network_off>

000b5240 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5240:	6840      	ldr	r0, [r0, #4]
   b5242:	2100      	movs	r1, #0
   b5244:	f7ff bf54 	b.w	b50f0 <network_is_on>

000b5248 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5248:	6840      	ldr	r0, [r0, #4]
   b524a:	2100      	movs	r1, #0
   b524c:	f7ff bf58 	b.w	b5100 <network_is_off>

000b5250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5250:	6840      	ldr	r0, [r0, #4]
   b5252:	2200      	movs	r2, #0
   b5254:	f081 0101 	eor.w	r1, r1, #1
   b5258:	f7ff bf2a 	b.w	b50b0 <network_listen>

000b525c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b525c:	6840      	ldr	r0, [r0, #4]
   b525e:	2200      	movs	r2, #0
   b5260:	f7ff bf36 	b.w	b50d0 <network_set_listen_timeout>

000b5264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5264:	2200      	movs	r2, #0
   b5266:	6840      	ldr	r0, [r0, #4]
   b5268:	4611      	mov	r1, r2
   b526a:	f7ff bf39 	b.w	b50e0 <network_get_listen_timeout>

000b526e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b526e:	2200      	movs	r2, #0
   b5270:	6840      	ldr	r0, [r0, #4]
   b5272:	4611      	mov	r1, r2
   b5274:	f7ff bf24 	b.w	b50c0 <network_listening>

000b5278 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b527c:	b095      	sub	sp, #84	; 0x54
   b527e:	4614      	mov	r4, r2
   b5280:	460d      	mov	r5, r1
   b5282:	4607      	mov	r7, r0
    IPAddress addr;
   b5284:	f000 f9c8 	bl	b5618 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5288:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b528a:	221c      	movs	r2, #28
   b528c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b528e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5290:	f002 f996 	bl	b75c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5294:	2340      	movs	r3, #64	; 0x40
   b5296:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5298:	4620      	mov	r0, r4
   b529a:	466b      	mov	r3, sp
   b529c:	aa0c      	add	r2, sp, #48	; 0x30
   b529e:	2100      	movs	r1, #0
   b52a0:	f7ff feb6 	bl	b5010 <netdb_getaddrinfo>
    if (!r) {
   b52a4:	4604      	mov	r4, r0
   b52a6:	2800      	cmp	r0, #0
   b52a8:	d14b      	bne.n	b5342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b52aa:	4602      	mov	r2, r0
   b52ac:	2101      	movs	r1, #1
   b52ae:	6868      	ldr	r0, [r5, #4]
   b52b0:	f7ff fee6 	bl	b5080 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b52b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52b8:	4622      	mov	r2, r4
   b52ba:	6868      	ldr	r0, [r5, #4]
   b52bc:	f7ff fee0 	bl	b5080 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52c2:	4681      	mov	r9, r0
        bool ok = false;
   b52c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52c6:	2e00      	cmp	r6, #0
   b52c8:	d03b      	beq.n	b5342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b52ca:	2900      	cmp	r1, #0
   b52cc:	d139      	bne.n	b5342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b52ce:	6873      	ldr	r3, [r6, #4]
   b52d0:	2b02      	cmp	r3, #2
   b52d2:	d003      	beq.n	b52dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b52d4:	2b0a      	cmp	r3, #10
   b52d6:	d011      	beq.n	b52fc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52d8:	69f6      	ldr	r6, [r6, #28]
   b52da:	e7f4      	b.n	b52c6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b52dc:	f1b8 0f00 	cmp.w	r8, #0
   b52e0:	d0fa      	beq.n	b52d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b52e2:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b52e4:	a806      	add	r0, sp, #24
   b52e6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b52e8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b52ea:	f000 f9c3 	bl	b5674 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52f0:	1d3c      	adds	r4, r7, #4
   b52f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52f4:	682b      	ldr	r3, [r5, #0]
   b52f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b52f8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b52fa:	e7ed      	b.n	b52d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b52fc:	f1b9 0f00 	cmp.w	r9, #0
   b5300:	d0ea      	beq.n	b52d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5302:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5304:	2210      	movs	r2, #16
   b5306:	a801      	add	r0, sp, #4
   b5308:	f002 f95a 	bl	b75c0 <memset>
                    a.v = 6;
   b530c:	2306      	movs	r3, #6
   b530e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5312:	ad01      	add	r5, sp, #4
   b5314:	f104 0308 	add.w	r3, r4, #8
   b5318:	3418      	adds	r4, #24
   b531a:	6818      	ldr	r0, [r3, #0]
   b531c:	6859      	ldr	r1, [r3, #4]
   b531e:	462a      	mov	r2, r5
   b5320:	c203      	stmia	r2!, {r0, r1}
   b5322:	3308      	adds	r3, #8
   b5324:	42a3      	cmp	r3, r4
   b5326:	4615      	mov	r5, r2
   b5328:	d1f7      	bne.n	b531a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b532a:	a901      	add	r1, sp, #4
   b532c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b532e:	ad07      	add	r5, sp, #28
   b5330:	f000 f980 	bl	b5634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5336:	1d3c      	adds	r4, r7, #4
   b5338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b533a:	682b      	ldr	r3, [r5, #0]
   b533c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b533e:	4649      	mov	r1, r9
   b5340:	e7ca      	b.n	b52d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5342:	9800      	ldr	r0, [sp, #0]
   b5344:	f7ff fe5c 	bl	b5000 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5348:	4638      	mov	r0, r7
   b534a:	b015      	add	sp, #84	; 0x54
   b534c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5350 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5350:	4b02      	ldr	r3, [pc, #8]	; (b535c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5352:	4a03      	ldr	r2, [pc, #12]	; (b5360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5354:	601a      	str	r2, [r3, #0]
   b5356:	2200      	movs	r2, #0
   b5358:	605a      	str	r2, [r3, #4]

} // spark
   b535a:	4770      	bx	lr
   b535c:	2003e678 	.word	0x2003e678
   b5360:	000b7870 	.word	0x000b7870

000b5364 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5364:	4770      	bx	lr

000b5366 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5368:	4606      	mov	r6, r0
   b536a:	4615      	mov	r5, r2
   b536c:	460c      	mov	r4, r1
   b536e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5370:	42bc      	cmp	r4, r7
   b5372:	d006      	beq.n	b5382 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5374:	6833      	ldr	r3, [r6, #0]
   b5376:	f814 1b01 	ldrb.w	r1, [r4], #1
   b537a:	689b      	ldr	r3, [r3, #8]
   b537c:	4630      	mov	r0, r6
   b537e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5380:	e7f6      	b.n	b5370 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5382:	4628      	mov	r0, r5
   b5384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5386 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5386:	7c00      	ldrb	r0, [r0, #16]
   b5388:	2200      	movs	r2, #0
   b538a:	f7ff bc0d 	b.w	b4ba8 <hal_i2c_write>

000b538e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b538e:	7c00      	ldrb	r0, [r0, #16]
   b5390:	2100      	movs	r1, #0
   b5392:	f7ff bc11 	b.w	b4bb8 <hal_i2c_available>

000b5396 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5396:	7c00      	ldrb	r0, [r0, #16]
   b5398:	2100      	movs	r1, #0
   b539a:	f7ff bc15 	b.w	b4bc8 <hal_i2c_read>

000b539e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b539e:	7c00      	ldrb	r0, [r0, #16]
   b53a0:	2100      	movs	r1, #0
   b53a2:	f7ff bc19 	b.w	b4bd8 <hal_i2c_peek>

000b53a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b53a6:	7c00      	ldrb	r0, [r0, #16]
   b53a8:	2100      	movs	r1, #0
   b53aa:	f7ff bc1d 	b.w	b4be8 <hal_i2c_flush>

000b53ae <_ZN7TwoWireD0Ev>:
   b53ae:	b510      	push	{r4, lr}
   b53b0:	2114      	movs	r1, #20
   b53b2:	4604      	mov	r4, r0
   b53b4:	f7fe fe71 	bl	b409a <_ZdlPvj>
   b53b8:	4620      	mov	r0, r4
   b53ba:	bd10      	pop	{r4, pc}

000b53bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53bc:	b538      	push	{r3, r4, r5, lr}
   b53be:	4604      	mov	r4, r0
   b53c0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b53c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53c6:	2200      	movs	r2, #0
   b53c8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53cc:	4b09      	ldr	r3, [pc, #36]	; (b53f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b53ce:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53d0:	4608      	mov	r0, r1
   b53d2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b53d4:	4629      	mov	r1, r5
   b53d6:	f7ff fc17 	bl	b4c08 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53da:	30bf      	adds	r0, #191	; 0xbf
   b53dc:	d108      	bne.n	b53f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b53de:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53e0:	07db      	lsls	r3, r3, #31
   b53e2:	d505      	bpl.n	b53f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b53e4:	6868      	ldr	r0, [r5, #4]
   b53e6:	f7ff fec7 	bl	b5178 <free>
    free(conf.tx_buffer);
   b53ea:	68e8      	ldr	r0, [r5, #12]
   b53ec:	f7ff fec4 	bl	b5178 <free>
}
   b53f0:	4620      	mov	r0, r4
   b53f2:	bd38      	pop	{r3, r4, r5, pc}
   b53f4:	000b78b4 	.word	0x000b78b4

000b53f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b53f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b53fa:	2200      	movs	r2, #0
   b53fc:	2314      	movs	r3, #20
   b53fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5402:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5406:	780b      	ldrb	r3, [r1, #0]
   b5408:	f88d 3008 	strb.w	r3, [sp, #8]
   b540c:	684b      	ldr	r3, [r1, #4]
   b540e:	9303      	str	r3, [sp, #12]
   b5410:	68cb      	ldr	r3, [r1, #12]
   b5412:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5414:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5416:	7a0b      	ldrb	r3, [r1, #8]
   b5418:	9305      	str	r3, [sp, #20]
   b541a:	a901      	add	r1, sp, #4
   b541c:	f7ff fc0c 	bl	b4c38 <hal_i2c_request_ex>
}
   b5420:	b007      	add	sp, #28
   b5422:	f85d fb04 	ldr.w	pc, [sp], #4

000b5426 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b5426:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5428:	2300      	movs	r3, #0
   b542a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b542e:	684a      	ldr	r2, [r1, #4]
   b5430:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b5432:	2314      	movs	r3, #20
    };
   b5434:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b5436:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b543a:	780b      	ldrb	r3, [r1, #0]
    };
   b543c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b543e:	7a0a      	ldrb	r2, [r1, #8]
   b5440:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b5442:	7c00      	ldrb	r0, [r0, #16]
    };
   b5444:	f88d 3008 	strb.w	r3, [sp, #8]
   b5448:	aa01      	add	r2, sp, #4
   b544a:	4619      	mov	r1, r3
   b544c:	f7ff fb9c 	bl	b4b88 <hal_i2c_begin_transmission>
}
   b5450:	b007      	add	sp, #28
   b5452:	f85d fb04 	ldr.w	pc, [sp], #4

000b5456 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5456:	7c00      	ldrb	r0, [r0, #16]
   b5458:	2200      	movs	r2, #0
   b545a:	f7ff bb9d 	b.w	b4b98 <hal_i2c_end_transmission>

000b545e <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b545e:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b5460:	2100      	movs	r1, #0
   b5462:	7c00      	ldrb	r0, [r0, #16]
   b5464:	f7ff fbd8 	bl	b4c18 <hal_i2c_lock>
}
   b5468:	fab0 f080 	clz	r0, r0
   b546c:	0940      	lsrs	r0, r0, #5
   b546e:	bd08      	pop	{r3, pc}

000b5470 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b5470:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b5472:	2100      	movs	r1, #0
   b5474:	7c00      	ldrb	r0, [r0, #16]
   b5476:	f7ff fbd7 	bl	b4c28 <hal_i2c_unlock>
}
   b547a:	fab0 f080 	clz	r0, r0
   b547e:	0940      	lsrs	r0, r0, #5
   b5480:	bd08      	pop	{r3, pc}

000b5482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b5482:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b5484:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5486:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5488:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b548a:	dd03      	ble.n	b5494 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b548c:	f7ff fe7c 	bl	b5188 <realloc>
            if (!d) {
   b5490:	b918      	cbnz	r0, b549a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5492:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5494:	f7ff fe70 	bl	b5178 <free>
        T* d = nullptr;
   b5498:	2000      	movs	r0, #0
        data_ = d;
   b549a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b549c:	60a5      	str	r5, [r4, #8]
        return true;
   b549e:	2001      	movs	r0, #1
   b54a0:	e7f7      	b.n	b5492 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b54a2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54a2:	7441      	strb	r1, [r0, #17]
}
   b54a4:	4770      	bx	lr

000b54a6 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54a6:	4770      	bx	lr

000b54a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b54a8:	4770      	bx	lr

000b54aa <_ZN9USBSerial4readEv>:
{
   b54aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b54ac:	2100      	movs	r1, #0
   b54ae:	7c00      	ldrb	r0, [r0, #16]
   b54b0:	f7ff fb52 	bl	b4b58 <HAL_USB_USART_Receive_Data>
}
   b54b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54b8:	bd08      	pop	{r3, pc}

000b54ba <_ZN9USBSerial4peekEv>:
{
   b54ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b54bc:	2101      	movs	r1, #1
   b54be:	7c00      	ldrb	r0, [r0, #16]
   b54c0:	f7ff fb4a 	bl	b4b58 <HAL_USB_USART_Receive_Data>
}
   b54c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54c8:	bd08      	pop	{r3, pc}

000b54ca <_ZN9USBSerial17availableForWriteEv>:
{
   b54ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b54cc:	7c00      	ldrb	r0, [r0, #16]
   b54ce:	f7ff fb3b 	bl	b4b48 <HAL_USB_USART_Available_Data_For_Write>
}
   b54d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54d6:	bd08      	pop	{r3, pc}

000b54d8 <_ZN9USBSerial9availableEv>:
{
   b54d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b54da:	7c00      	ldrb	r0, [r0, #16]
   b54dc:	f7ff fb2c 	bl	b4b38 <HAL_USB_USART_Available_Data>
}
   b54e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54e4:	bd08      	pop	{r3, pc}

000b54e6 <_ZN9USBSerial5writeEh>:
{
   b54e6:	b513      	push	{r0, r1, r4, lr}
   b54e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54ea:	7c00      	ldrb	r0, [r0, #16]
{
   b54ec:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54ee:	f7ff fb2b 	bl	b4b48 <HAL_USB_USART_Available_Data_For_Write>
   b54f2:	2800      	cmp	r0, #0
   b54f4:	9901      	ldr	r1, [sp, #4]
   b54f6:	dc01      	bgt.n	b54fc <_ZN9USBSerial5writeEh+0x16>
   b54f8:	7c60      	ldrb	r0, [r4, #17]
   b54fa:	b120      	cbz	r0, b5506 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b54fc:	7c20      	ldrb	r0, [r4, #16]
   b54fe:	f7ff fb33 	bl	b4b68 <HAL_USB_USART_Send_Data>
   b5502:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5506:	b002      	add	sp, #8
   b5508:	bd10      	pop	{r4, pc}

000b550a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b550a:	7c00      	ldrb	r0, [r0, #16]
   b550c:	f7ff bb34 	b.w	b4b78 <HAL_USB_USART_Flush_Data>

000b5510 <_ZN9USBSerialD0Ev>:
   b5510:	b510      	push	{r4, lr}
   b5512:	2114      	movs	r1, #20
   b5514:	4604      	mov	r4, r0
   b5516:	f7fe fdc0 	bl	b409a <_ZdlPvj>
   b551a:	4620      	mov	r0, r4
   b551c:	bd10      	pop	{r4, pc}
	...

000b5520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5520:	b510      	push	{r4, lr}
   b5522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5526:	4604      	mov	r4, r0
   b5528:	4608      	mov	r0, r1
   b552a:	2100      	movs	r1, #0
   b552c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5530:	4b04      	ldr	r3, [pc, #16]	; (b5544 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5532:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5534:	2301      	movs	r3, #1
  _serial = serial;
   b5536:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5538:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b553a:	4611      	mov	r1, r2
   b553c:	f7ff faf4 	bl	b4b28 <HAL_USB_USART_Init>
}
   b5540:	4620      	mov	r0, r4
   b5542:	bd10      	pop	{r4, pc}
   b5544:	000b78dc 	.word	0x000b78dc

000b5548 <_Z19acquireSerialBufferv>:
{
   b5548:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b554a:	2214      	movs	r2, #20
{
   b554c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b554e:	2100      	movs	r1, #0
   b5550:	f002 f836 	bl	b75c0 <memset>
}
   b5554:	4620      	mov	r0, r4
   b5556:	bd10      	pop	{r4, pc}

000b5558 <_Z16_fetch_usbserialv>:
{
   b5558:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b555a:	4c0f      	ldr	r4, [pc, #60]	; (b5598 <_Z16_fetch_usbserialv+0x40>)
{
   b555c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b555e:	a803      	add	r0, sp, #12
   b5560:	f7ff fff2 	bl	b5548 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5564:	7821      	ldrb	r1, [r4, #0]
   b5566:	f3bf 8f5b 	dmb	ish
   b556a:	f011 0101 	ands.w	r1, r1, #1
   b556e:	d10f      	bne.n	b5590 <_Z16_fetch_usbserialv+0x38>
   b5570:	4620      	mov	r0, r4
   b5572:	9101      	str	r1, [sp, #4]
   b5574:	f7fe fd93 	bl	b409e <__cxa_guard_acquire>
   b5578:	9901      	ldr	r1, [sp, #4]
   b557a:	b148      	cbz	r0, b5590 <_Z16_fetch_usbserialv+0x38>
   b557c:	aa03      	add	r2, sp, #12
   b557e:	4807      	ldr	r0, [pc, #28]	; (b559c <_Z16_fetch_usbserialv+0x44>)
   b5580:	f7ff ffce 	bl	b5520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5584:	4620      	mov	r0, r4
   b5586:	f7fe fd8f 	bl	b40a8 <__cxa_guard_release>
   b558a:	4805      	ldr	r0, [pc, #20]	; (b55a0 <_Z16_fetch_usbserialv+0x48>)
   b558c:	f001 ffda 	bl	b7544 <atexit>
	return _usbserial;
}
   b5590:	4802      	ldr	r0, [pc, #8]	; (b559c <_Z16_fetch_usbserialv+0x44>)
   b5592:	b008      	add	sp, #32
   b5594:	bd10      	pop	{r4, pc}
   b5596:	bf00      	nop
   b5598:	2003e680 	.word	0x2003e680
   b559c:	2003e684 	.word	0x2003e684
   b55a0:	000b54a7 	.word	0x000b54a7

000b55a4 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b55a4:	4770      	bx	lr

000b55a6 <_ZN9IPAddressD0Ev>:
   b55a6:	b510      	push	{r4, lr}
   b55a8:	2118      	movs	r1, #24
   b55aa:	4604      	mov	r4, r0
   b55ac:	f7fe fd75 	bl	b409a <_ZdlPvj>
   b55b0:	4620      	mov	r0, r4
   b55b2:	bd10      	pop	{r4, pc}

000b55b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b55b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b55b6:	7d03      	ldrb	r3, [r0, #20]
   b55b8:	2b06      	cmp	r3, #6
{
   b55ba:	b08d      	sub	sp, #52	; 0x34
   b55bc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55be:	f100 0704 	add.w	r7, r0, #4
   b55c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b55c6:	d012      	beq.n	b55ee <_ZNK9IPAddress7printToER5Print+0x3a>
   b55c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b55cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b55d0:	220a      	movs	r2, #10
   b55d2:	4630      	mov	r0, r6
   b55d4:	f000 fa29 	bl	b5a2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b55d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b55da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b55dc:	d019      	beq.n	b5612 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b55de:	2c00      	cmp	r4, #0
   b55e0:	d0f4      	beq.n	b55cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b55e2:	212e      	movs	r1, #46	; 0x2e
   b55e4:	4630      	mov	r0, r6
   b55e6:	f000 fa1d 	bl	b5a24 <_ZN5Print5printEc>
   b55ea:	4404      	add	r4, r0
   b55ec:	e7ee      	b.n	b55cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55ee:	232f      	movs	r3, #47	; 0x2f
   b55f0:	466a      	mov	r2, sp
   b55f2:	4639      	mov	r1, r7
   b55f4:	200a      	movs	r0, #10
		buf[0] = 0;
   b55f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55fa:	f7ff fbad 	bl	b4d58 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b55fe:	4668      	mov	r0, sp
   b5600:	f002 f81e 	bl	b7640 <strlen>
   b5604:	6833      	ldr	r3, [r6, #0]
   b5606:	4602      	mov	r2, r0
   b5608:	68db      	ldr	r3, [r3, #12]
   b560a:	4669      	mov	r1, sp
   b560c:	4630      	mov	r0, r6
   b560e:	4798      	blx	r3
   b5610:	4604      	mov	r4, r0
    }
    return n;
}
   b5612:	4620      	mov	r0, r4
   b5614:	b00d      	add	sp, #52	; 0x34
   b5616:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5618 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5618:	b510      	push	{r4, lr}
   b561a:	4b05      	ldr	r3, [pc, #20]	; (b5630 <_ZN9IPAddressC1Ev+0x18>)
   b561c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b561e:	2211      	movs	r2, #17
   b5620:	f840 3b04 	str.w	r3, [r0], #4
   b5624:	2100      	movs	r1, #0
   b5626:	f001 ffcb 	bl	b75c0 <memset>
}
   b562a:	4620      	mov	r0, r4
   b562c:	bd10      	pop	{r4, pc}
   b562e:	bf00      	nop
   b5630:	000b790c 	.word	0x000b790c

000b5634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5634:	4603      	mov	r3, r0
   b5636:	4a07      	ldr	r2, [pc, #28]	; (b5654 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5638:	b510      	push	{r4, lr}
   b563a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b563e:	f101 0210 	add.w	r2, r1, #16
   b5642:	f851 4b04 	ldr.w	r4, [r1], #4
   b5646:	f843 4b04 	str.w	r4, [r3], #4
   b564a:	4291      	cmp	r1, r2
   b564c:	d1f9      	bne.n	b5642 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b564e:	780a      	ldrb	r2, [r1, #0]
   b5650:	701a      	strb	r2, [r3, #0]
}
   b5652:	bd10      	pop	{r4, pc}
   b5654:	000b790c 	.word	0x000b790c

000b5658 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5658:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b565a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b565e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5662:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5666:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b566a:	2304      	movs	r3, #4
   b566c:	6041      	str	r1, [r0, #4]
   b566e:	7503      	strb	r3, [r0, #20]
}
   b5670:	bd10      	pop	{r4, pc}
	...

000b5674 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5674:	b507      	push	{r0, r1, r2, lr}
   b5676:	4b06      	ldr	r3, [pc, #24]	; (b5690 <_ZN9IPAddressC1EPKh+0x1c>)
   b5678:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b567a:	78cb      	ldrb	r3, [r1, #3]
   b567c:	9300      	str	r3, [sp, #0]
   b567e:	788b      	ldrb	r3, [r1, #2]
   b5680:	784a      	ldrb	r2, [r1, #1]
   b5682:	7809      	ldrb	r1, [r1, #0]
   b5684:	f7ff ffe8 	bl	b5658 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5688:	b003      	add	sp, #12
   b568a:	f85d fb04 	ldr.w	pc, [sp], #4
   b568e:	bf00      	nop
   b5690:	000b790c 	.word	0x000b790c

000b5694 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5694:	b513      	push	{r0, r1, r4, lr}
   b5696:	460b      	mov	r3, r1
   b5698:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b569a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b569e:	466c      	mov	r4, sp
   b56a0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b56a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b56a8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b56ac:	e894 0003 	ldmia.w	r4, {r0, r1}
   b56b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b56b4:	b002      	add	sp, #8
   b56b6:	bd10      	pop	{r4, pc}

000b56b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b56b8:	2100      	movs	r1, #0
   b56ba:	f7ff bd31 	b.w	b5120 <system_delay_ms>
	...

000b56c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b56c0:	4b01      	ldr	r3, [pc, #4]	; (b56c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b56c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b56c4:	4770      	bx	lr
   b56c6:	bf00      	nop
   b56c8:	2003e510 	.word	0x2003e510

000b56cc <serialEventRun>:
{
   b56cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b56ce:	4b0b      	ldr	r3, [pc, #44]	; (b56fc <serialEventRun+0x30>)
   b56d0:	b143      	cbz	r3, b56e4 <serialEventRun+0x18>
   b56d2:	f7ff ff41 	bl	b5558 <_Z16_fetch_usbserialv>
   b56d6:	6803      	ldr	r3, [r0, #0]
   b56d8:	691b      	ldr	r3, [r3, #16]
   b56da:	4798      	blx	r3
   b56dc:	2800      	cmp	r0, #0
   b56de:	dd01      	ble.n	b56e4 <serialEventRun+0x18>
        serialEvent();
   b56e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b56e4:	4b06      	ldr	r3, [pc, #24]	; (b5700 <serialEventRun+0x34>)
   b56e6:	b143      	cbz	r3, b56fa <serialEventRun+0x2e>
   b56e8:	f001 fd86 	bl	b71f8 <_Z22__fetch_global_Serial1v>
   b56ec:	6803      	ldr	r3, [r0, #0]
   b56ee:	691b      	ldr	r3, [r3, #16]
   b56f0:	4798      	blx	r3
   b56f2:	2800      	cmp	r0, #0
   b56f4:	dd01      	ble.n	b56fa <serialEventRun+0x2e>
        serialEvent1();
   b56f6:	f3af 8000 	nop.w
}
   b56fa:	bd08      	pop	{r3, pc}
	...

000b5704 <_post_loop>:
{
   b5704:	b508      	push	{r3, lr}
	serialEventRun();
   b5706:	f7ff ffe1 	bl	b56cc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b570a:	f7ff fc59 	bl	b4fc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b570e:	4b01      	ldr	r3, [pc, #4]	; (b5714 <_post_loop+0x10>)
   b5710:	6018      	str	r0, [r3, #0]
}
   b5712:	bd08      	pop	{r3, pc}
   b5714:	2003e740 	.word	0x2003e740

000b5718 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5718:	4805      	ldr	r0, [pc, #20]	; (b5730 <_Z33system_initialize_user_backup_ramv+0x18>)
   b571a:	4a06      	ldr	r2, [pc, #24]	; (b5734 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b571c:	4906      	ldr	r1, [pc, #24]	; (b5738 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b571e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5720:	1a12      	subs	r2, r2, r0
   b5722:	f001 ff25 	bl	b7570 <memcpy>
    __backup_sram_signature = signature;
   b5726:	4b05      	ldr	r3, [pc, #20]	; (b573c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5728:	4a05      	ldr	r2, [pc, #20]	; (b5740 <_Z33system_initialize_user_backup_ramv+0x28>)
   b572a:	601a      	str	r2, [r3, #0]
}
   b572c:	bd08      	pop	{r3, pc}
   b572e:	bf00      	nop
   b5730:	2003f400 	.word	0x2003f400
   b5734:	2003f404 	.word	0x2003f404
   b5738:	000b7da4 	.word	0x000b7da4
   b573c:	2003f400 	.word	0x2003f400
   b5740:	9a271c1e 	.word	0x9a271c1e

000b5744 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5744:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5746:	2300      	movs	r3, #0
   b5748:	9300      	str	r3, [sp, #0]
   b574a:	461a      	mov	r2, r3
   b574c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5750:	f7ff fd00 	bl	b5154 <system_ctrl_set_result>
}
   b5754:	b003      	add	sp, #12
   b5756:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b575c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b575c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b575e:	8843      	ldrh	r3, [r0, #2]
   b5760:	2b0a      	cmp	r3, #10
   b5762:	d008      	beq.n	b5776 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5764:	2b50      	cmp	r3, #80	; 0x50
   b5766:	d10b      	bne.n	b5780 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5768:	4b09      	ldr	r3, [pc, #36]	; (b5790 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b576a:	681b      	ldr	r3, [r3, #0]
   b576c:	b14b      	cbz	r3, b5782 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b576e:	b003      	add	sp, #12
   b5770:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5774:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5776:	f7ff ffe5 	bl	b5744 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b577a:	b003      	add	sp, #12
   b577c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5780:	2300      	movs	r3, #0
   b5782:	9300      	str	r3, [sp, #0]
   b5784:	461a      	mov	r2, r3
   b5786:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b578a:	f7ff fce3 	bl	b5154 <system_ctrl_set_result>
}
   b578e:	e7f4      	b.n	b577a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5790:	2003e69c 	.word	0x2003e69c

000b5794 <module_user_init_hook>:
{
   b5794:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5796:	4812      	ldr	r0, [pc, #72]	; (b57e0 <module_user_init_hook+0x4c>)
   b5798:	2100      	movs	r1, #0
   b579a:	f7ff fd0d 	bl	b51b8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b579e:	4b11      	ldr	r3, [pc, #68]	; (b57e4 <module_user_init_hook+0x50>)
   b57a0:	681a      	ldr	r2, [r3, #0]
   b57a2:	4b11      	ldr	r3, [pc, #68]	; (b57e8 <module_user_init_hook+0x54>)
   b57a4:	429a      	cmp	r2, r3
   b57a6:	4b11      	ldr	r3, [pc, #68]	; (b57ec <module_user_init_hook+0x58>)
   b57a8:	bf0c      	ite	eq
   b57aa:	2201      	moveq	r2, #1
   b57ac:	2200      	movne	r2, #0
   b57ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b57b0:	d001      	beq.n	b57b6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b57b2:	f7ff ffb1 	bl	b5718 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b57b6:	f7ff fbeb 	bl	b4f90 <HAL_RNG_GetRandomNumber>
   b57ba:	4604      	mov	r4, r0
    srand(seed);
   b57bc:	f001 ff08 	bl	b75d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b57c0:	4b0b      	ldr	r3, [pc, #44]	; (b57f0 <module_user_init_hook+0x5c>)
   b57c2:	b113      	cbz	r3, b57ca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b57c4:	4620      	mov	r0, r4
   b57c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b57ca:	2100      	movs	r1, #0
   b57cc:	4808      	ldr	r0, [pc, #32]	; (b57f0 <module_user_init_hook+0x5c>)
   b57ce:	f7ff fc37 	bl	b5040 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b57d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b57d6:	4807      	ldr	r0, [pc, #28]	; (b57f4 <module_user_init_hook+0x60>)
   b57d8:	2100      	movs	r1, #0
   b57da:	f7ff bcb1 	b.w	b5140 <system_ctrl_set_app_request_handler>
   b57de:	bf00      	nop
   b57e0:	000b56c1 	.word	0x000b56c1
   b57e4:	2003f400 	.word	0x2003f400
   b57e8:	9a271c1e 	.word	0x9a271c1e
   b57ec:	2003e698 	.word	0x2003e698
   b57f0:	00000000 	.word	0x00000000
   b57f4:	000b575d 	.word	0x000b575d

000b57f8 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b57f8:	0909      	lsrs	r1, r1, #4
   b57fa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b57fe:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b5802:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5810 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b5806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b580a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b580e:	4770      	bx	lr
   b5810:	44480000 	.word	0x44480000

000b5814 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b5814:	6800      	ldr	r0, [r0, #0]
   b5816:	f7ff be22 	b.w	b545e <_ZN7TwoWire4lockEv>

000b581a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b581a:	b510      	push	{r4, lr}
   b581c:	4604      	mov	r4, r0
      lock_(_lock) {
   b581e:	6001      	str	r1, [r0, #0]
   b5820:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b5822:	b10a      	cbz	r2, b5828 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b5824:	f7ff fff6 	bl	b5814 <_ZN9FuelGauge4lockEv>
}
   b5828:	4620      	mov	r0, r4
   b582a:	bd10      	pop	{r4, pc}

000b582c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b582c:	b513      	push	{r0, r1, r4, lr}
   b582e:	4604      	mov	r4, r0
   b5830:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b5832:	f001 fca1 	bl	b7178 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b5836:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b5838:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b583a:	4620      	mov	r0, r4
   b583c:	f7ff ffed 	bl	b581a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b5840:	4620      	mov	r0, r4
   b5842:	b002      	add	sp, #8
   b5844:	bd10      	pop	{r4, pc}

000b5846 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b5846:	6800      	ldr	r0, [r0, #0]
   b5848:	f7ff be12 	b.w	b5470 <_ZN7TwoWire6unlockEv>

000b584c <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   b584c:	b510      	push	{r4, lr}
    if (lock_) {
   b584e:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   b5850:	4604      	mov	r4, r0
    if (lock_) {
   b5852:	b10b      	cbz	r3, b5858 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   b5854:	f7ff fff7 	bl	b5846 <_ZN9FuelGauge6unlockEv>
}
   b5858:	4620      	mov	r0, r4
   b585a:	bd10      	pop	{r4, pc}

000b585c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b585c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5860:	4604      	mov	r4, r0
   b5862:	460d      	mov	r5, r1
   b5864:	4617      	mov	r7, r2
   b5866:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5868:	f7ff ffd4 	bl	b5814 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b586c:	2236      	movs	r2, #54	; 0x36
   b586e:	2300      	movs	r3, #0
   b5870:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b5874:	6820      	ldr	r0, [r4, #0]
    timeout_ = ms;
   b5876:	230a      	movs	r3, #10
   b5878:	f04f 0801 	mov.w	r8, #1
   b587c:	4669      	mov	r1, sp
   b587e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5882:	f7ff fdd0 	bl	b5426 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b5886:	6820      	ldr	r0, [r4, #0]
   b5888:	6803      	ldr	r3, [r0, #0]
   b588a:	4629      	mov	r1, r5
   b588c:	689b      	ldr	r3, [r3, #8]
   b588e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b5890:	6820      	ldr	r0, [r4, #0]
   b5892:	4641      	mov	r1, r8
   b5894:	f7ff fddf 	bl	b5456 <_ZN7TwoWire15endTransmissionEh>
   b5898:	4605      	mov	r5, r0
   b589a:	b140      	cbz	r0, b58ae <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b589c:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b58a0:	4620      	mov	r0, r4
   b58a2:	f7ff ffd0 	bl	b5846 <_ZN9FuelGauge6unlockEv>
}
   b58a6:	4628      	mov	r0, r5
   b58a8:	b004      	add	sp, #16
   b58aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b58ae:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b58b0:	6820      	ldr	r0, [r4, #0]
   b58b2:	9301      	str	r3, [sp, #4]
   b58b4:	4669      	mov	r1, sp
   b58b6:	f7ff fd9f 	bl	b53f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b58ba:	2802      	cmp	r0, #2
   b58bc:	d1ee      	bne.n	b589c <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b58be:	6820      	ldr	r0, [r4, #0]
   b58c0:	6803      	ldr	r3, [r0, #0]
   b58c2:	695b      	ldr	r3, [r3, #20]
   b58c4:	4798      	blx	r3
   b58c6:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b58c8:	6820      	ldr	r0, [r4, #0]
   b58ca:	6803      	ldr	r3, [r0, #0]
   b58cc:	695b      	ldr	r3, [r3, #20]
   b58ce:	4798      	blx	r3
   b58d0:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b58d2:	e7e5      	b.n	b58a0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b58d4 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b58d4:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b58d6:	2300      	movs	r3, #0
   b58d8:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b58dc:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b58e0:	f10d 0206 	add.w	r2, sp, #6
   b58e4:	f10d 0307 	add.w	r3, sp, #7
   b58e8:	2102      	movs	r1, #2
   b58ea:	f7ff ffb7 	bl	b585c <_ZN9FuelGauge12readRegisterEhRhS0_>
   b58ee:	b940      	cbnz	r0, b5902 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b58f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b58f4:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b58f8:	b003      	add	sp, #12
   b58fa:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b58fe:	f7ff bf7b 	b.w	b57f8 <_ZN8particle6detail9_getVCellEhh>
}
   b5902:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b5906:	b003      	add	sp, #12
   b5908:	f85d fb04 	ldr.w	pc, [sp], #4

000b590c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b590c:	2200      	movs	r2, #0
   b590e:	6840      	ldr	r0, [r0, #4]
   b5910:	4611      	mov	r1, r2
   b5912:	f7ff bbb5 	b.w	b5080 <network_ready>

000b5916 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5916:	2200      	movs	r2, #0
   b5918:	6840      	ldr	r0, [r0, #4]
   b591a:	4611      	mov	r1, r2
   b591c:	f7ff bbd0 	b.w	b50c0 <network_listening>

000b5920 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5920:	2200      	movs	r2, #0
   b5922:	6840      	ldr	r0, [r0, #4]
   b5924:	4611      	mov	r1, r2
   b5926:	f7ff bbdb 	b.w	b50e0 <network_get_listen_timeout>

000b592a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b592a:	6840      	ldr	r0, [r0, #4]
   b592c:	2200      	movs	r2, #0
   b592e:	f7ff bbcf 	b.w	b50d0 <network_set_listen_timeout>

000b5932 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5932:	6840      	ldr	r0, [r0, #4]
   b5934:	2200      	movs	r2, #0
   b5936:	f081 0101 	eor.w	r1, r1, #1
   b593a:	f7ff bbb9 	b.w	b50b0 <network_listen>

000b593e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b593e:	2300      	movs	r3, #0
   b5940:	6840      	ldr	r0, [r0, #4]
   b5942:	461a      	mov	r2, r3
   b5944:	4619      	mov	r1, r3
   b5946:	f7ff bbab 	b.w	b50a0 <network_off>

000b594a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b594a:	2300      	movs	r3, #0
   b594c:	6840      	ldr	r0, [r0, #4]
   b594e:	461a      	mov	r2, r3
   b5950:	4619      	mov	r1, r3
   b5952:	f7ff bb9d 	b.w	b5090 <network_on>

000b5956 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5956:	2200      	movs	r2, #0
   b5958:	6840      	ldr	r0, [r0, #4]
   b595a:	4611      	mov	r1, r2
   b595c:	f7ff bb80 	b.w	b5060 <network_connecting>

000b5960 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5960:	6840      	ldr	r0, [r0, #4]
   b5962:	2200      	movs	r2, #0
   b5964:	2102      	movs	r1, #2
   b5966:	f7ff bb83 	b.w	b5070 <network_disconnect>

000b596a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b596a:	2300      	movs	r3, #0
   b596c:	6840      	ldr	r0, [r0, #4]
   b596e:	461a      	mov	r2, r3
   b5970:	f7ff bb6e 	b.w	b5050 <network_connect>

000b5974 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5974:	4b08      	ldr	r3, [pc, #32]	; (b5998 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5976:	b510      	push	{r4, lr}
   b5978:	2428      	movs	r4, #40	; 0x28
   b597a:	4622      	mov	r2, r4
   b597c:	4618      	mov	r0, r3
   b597e:	2100      	movs	r1, #0
   b5980:	f001 fe1e 	bl	b75c0 <memset>
   b5984:	4b05      	ldr	r3, [pc, #20]	; (b599c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5986:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b598c:	6042      	str	r2, [r0, #4]
   b598e:	2204      	movs	r2, #4
   b5990:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5992:	4a03      	ldr	r2, [pc, #12]	; (b59a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5994:	601a      	str	r2, [r3, #0]
   b5996:	bd10      	pop	{r4, pc}
   b5998:	2003e6a8 	.word	0x2003e6a8
   b599c:	2003e6a0 	.word	0x2003e6a0
   b59a0:	000b7920 	.word	0x000b7920

000b59a4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b59a4:	4b01      	ldr	r3, [pc, #4]	; (b59ac <_GLOBAL__sub_I_RGB+0x8>)
   b59a6:	2200      	movs	r2, #0
   b59a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b59aa:	4770      	bx	lr
   b59ac:	2003e6d0 	.word	0x2003e6d0

000b59b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b59b0:	4b02      	ldr	r3, [pc, #8]	; (b59bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b59b2:	681a      	ldr	r2, [r3, #0]
   b59b4:	4b02      	ldr	r3, [pc, #8]	; (b59c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b59b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b59b8:	4770      	bx	lr
   b59ba:	bf00      	nop
   b59bc:	2003e50c 	.word	0x2003e50c
   b59c0:	2003e6e0 	.word	0x2003e6e0

000b59c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b59c4:	4b01      	ldr	r3, [pc, #4]	; (b59cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b59c6:	4a02      	ldr	r2, [pc, #8]	; (b59d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b59c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b59ca:	4770      	bx	lr
   b59cc:	2003e6e4 	.word	0x2003e6e4
   b59d0:	000b7970 	.word	0x000b7970

000b59d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b59d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59d6:	4606      	mov	r6, r0
   b59d8:	460d      	mov	r5, r1
  size_t n = 0;
   b59da:	188f      	adds	r7, r1, r2
   b59dc:	2400      	movs	r4, #0
  while (size--) {
   b59de:	42bd      	cmp	r5, r7
   b59e0:	d00c      	beq.n	b59fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b59e2:	6833      	ldr	r3, [r6, #0]
   b59e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b59e8:	689b      	ldr	r3, [r3, #8]
   b59ea:	4630      	mov	r0, r6
   b59ec:	4798      	blx	r3
     if (chunk>=0)
   b59ee:	1e03      	subs	r3, r0, #0
   b59f0:	db01      	blt.n	b59f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b59f2:	441c      	add	r4, r3
  while (size--) {
   b59f4:	e7f3      	b.n	b59de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b59f6:	2c00      	cmp	r4, #0
   b59f8:	bf08      	it	eq
   b59fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b59fc:	4620      	mov	r0, r4
   b59fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a00 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5a00:	b513      	push	{r0, r1, r4, lr}
   b5a02:	4604      	mov	r4, r0
    }
   b5a04:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5a06:	b159      	cbz	r1, b5a20 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5a08:	9101      	str	r1, [sp, #4]
   b5a0a:	f001 fe19 	bl	b7640 <strlen>
   b5a0e:	6823      	ldr	r3, [r4, #0]
   b5a10:	9901      	ldr	r1, [sp, #4]
   b5a12:	68db      	ldr	r3, [r3, #12]
   b5a14:	4602      	mov	r2, r0
   b5a16:	4620      	mov	r0, r4
    }
   b5a18:	b002      	add	sp, #8
   b5a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5a1e:	4718      	bx	r3
    }
   b5a20:	b002      	add	sp, #8
   b5a22:	bd10      	pop	{r4, pc}

000b5a24 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5a24:	6803      	ldr	r3, [r0, #0]
   b5a26:	689b      	ldr	r3, [r3, #8]
   b5a28:	4718      	bx	r3

000b5a2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5a2a:	b530      	push	{r4, r5, lr}
   b5a2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5a2e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5a30:	2a01      	cmp	r2, #1
  *str = '\0';
   b5a32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5a36:	bf98      	it	ls
   b5a38:	220a      	movls	r2, #10
   b5a3a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5a3c:	460d      	mov	r5, r1
   b5a3e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5a42:	fb01 5312 	mls	r3, r1, r2, r5
   b5a46:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a4a:	2b09      	cmp	r3, #9
   b5a4c:	bf94      	ite	ls
   b5a4e:	3330      	addls	r3, #48	; 0x30
   b5a50:	3337      	addhi	r3, #55	; 0x37
   b5a52:	b2db      	uxtb	r3, r3
  } while(n);
   b5a54:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a56:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5a5a:	d9ef      	bls.n	b5a3c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5a5c:	4621      	mov	r1, r4
   b5a5e:	f7ff ffcf 	bl	b5a00 <_ZN5Print5writeEPKc>
}
   b5a62:	b00b      	add	sp, #44	; 0x2c
   b5a64:	bd30      	pop	{r4, r5, pc}

000b5a66 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a66:	4770      	bx	lr

000b5a68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5a68:	4770      	bx	lr

000b5a6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5a6a:	4770      	bx	lr

000b5a6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a6c:	4770      	bx	lr
	...

000b5a70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5a70:	4b06      	ldr	r3, [pc, #24]	; (b5a8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5a72:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5a74:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5a76:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5a7a:	d005      	beq.n	b5a88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5a7c:	4608      	mov	r0, r1
   b5a7e:	f001 fc4f 	bl	b7320 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5a82:	2800      	cmp	r0, #0
   b5a84:	bf08      	it	eq
   b5a86:	2400      	moveq	r4, #0
      }
   b5a88:	4620      	mov	r0, r4
   b5a8a:	bd10      	pop	{r4, pc}
   b5a8c:	000b78a4 	.word	0x000b78a4

000b5a90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5a90:	4b06      	ldr	r3, [pc, #24]	; (b5aac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5a92:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5a94:	b510      	push	{r4, lr}
   b5a96:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5a9a:	d005      	beq.n	b5aa8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5a9c:	4608      	mov	r0, r1
   b5a9e:	f001 fc3f 	bl	b7320 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5aa2:	2800      	cmp	r0, #0
   b5aa4:	bf08      	it	eq
   b5aa6:	2400      	moveq	r4, #0
      }
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	bd10      	pop	{r4, pc}
   b5aac:	000b78a4 	.word	0x000b78a4

000b5ab0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5ab0:	4b06      	ldr	r3, [pc, #24]	; (b5acc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5ab2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5ab4:	b510      	push	{r4, lr}
   b5ab6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5aba:	d005      	beq.n	b5ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5abc:	4608      	mov	r0, r1
   b5abe:	f001 fc2f 	bl	b7320 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5ac2:	2800      	cmp	r0, #0
   b5ac4:	bf08      	it	eq
   b5ac6:	2400      	moveq	r4, #0
      }
   b5ac8:	4620      	mov	r0, r4
   b5aca:	bd10      	pop	{r4, pc}
   b5acc:	000b78a4 	.word	0x000b78a4

000b5ad0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5ad0:	b510      	push	{r4, lr}
   b5ad2:	2168      	movs	r1, #104	; 0x68
   b5ad4:	4604      	mov	r4, r0
   b5ad6:	f7fe fae0 	bl	b409a <_ZdlPvj>
   b5ada:	4620      	mov	r0, r4
   b5adc:	bd10      	pop	{r4, pc}

000b5ade <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5ade:	b510      	push	{r4, lr}
   b5ae0:	2128      	movs	r1, #40	; 0x28
   b5ae2:	4604      	mov	r4, r0
   b5ae4:	f7fe fad9 	bl	b409a <_ZdlPvj>
   b5ae8:	4620      	mov	r0, r4
   b5aea:	bd10      	pop	{r4, pc}

000b5aec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5aec:	b510      	push	{r4, lr}
   b5aee:	2130      	movs	r1, #48	; 0x30
   b5af0:	4604      	mov	r4, r0
   b5af2:	f7fe fad2 	bl	b409a <_ZdlPvj>
   b5af6:	4620      	mov	r0, r4
   b5af8:	bd10      	pop	{r4, pc}

000b5afa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5afa:	2168      	movs	r1, #104	; 0x68
   b5afc:	f7fe bacd 	b.w	b409a <_ZdlPvj>

000b5b00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5b00:	2128      	movs	r1, #40	; 0x28
   b5b02:	f7fe baca 	b.w	b409a <_ZdlPvj>

000b5b06 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5b06:	2130      	movs	r1, #48	; 0x30
   b5b08:	f7fe bac7 	b.w	b409a <_ZdlPvj>

000b5b0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5b0e:	2500      	movs	r5, #0
   b5b10:	1cec      	adds	r4, r5, #3
   b5b12:	428c      	cmp	r4, r1
   b5b14:	d80d      	bhi.n	b5b32 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5b16:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5b18:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5b1a:	5d87      	ldrb	r7, [r0, r6]
   b5b1c:	4297      	cmp	r7, r2
   b5b1e:	d105      	bne.n	b5b2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5b20:	4426      	add	r6, r4
   b5b22:	42b1      	cmp	r1, r6
   b5b24:	d305      	bcc.n	b5b32 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5b26:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5b28:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5b2c:	3401      	adds	r4, #1
   b5b2e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5b30:	e7ee      	b.n	b5b10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5b32:	2000      	movs	r0, #0
   b5b34:	e7f9      	b.n	b5b2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5b38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5b38:	4a02      	ldr	r2, [pc, #8]	; (b5b44 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5b3a:	4903      	ldr	r1, [pc, #12]	; (b5b48 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b5b3c:	200a      	movs	r0, #10
   b5b3e:	f7ff ba6f 	b.w	b5020 <panic_>
   b5b42:	bf00      	nop
   b5b44:	000b4fb1 	.word	0x000b4fb1
   b5b48:	000b7974 	.word	0x000b7974

000b5b4c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5b4c:	b430      	push	{r4, r5}
   b5b4e:	460d      	mov	r5, r1
   b5b50:	4611      	mov	r1, r2
   b5b52:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5b54:	6803      	ldr	r3, [r0, #0]
   b5b56:	6809      	ldr	r1, [r1, #0]
   b5b58:	6828      	ldr	r0, [r5, #0]
   b5b5a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5b5e:	46a4      	mov	ip, r4
      }
   b5b60:	bc30      	pop	{r4, r5}
   b5b62:	4760      	bx	ip

000b5b64 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5b64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5b66:	b538      	push	{r3, r4, r5, lr}
   b5b68:	4604      	mov	r4, r0
	switch (__op)
   b5b6a:	d102      	bne.n	b5b72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5b6c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5b6e:	6023      	str	r3, [r4, #0]
	}
   b5b70:	e003      	b.n	b5b7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b5b72:	2a02      	cmp	r2, #2
   b5b74:	d003      	beq.n	b5b7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b5b76:	2a03      	cmp	r2, #3
   b5b78:	d00d      	beq.n	b5b96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5b7a:	2000      	movs	r0, #0
   b5b7c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b7e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5b80:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b82:	f7fe fa86 	bl	b4092 <_Znwj>
   b5b86:	4603      	mov	r3, r0
   b5b88:	2800      	cmp	r0, #0
   b5b8a:	d0f0      	beq.n	b5b6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5b8c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5b90:	e883 0003 	stmia.w	r3, {r0, r1}
   b5b94:	e7eb      	b.n	b5b6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5b96:	6800      	ldr	r0, [r0, #0]
   b5b98:	2800      	cmp	r0, #0
   b5b9a:	d0ee      	beq.n	b5b7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5b9c:	2108      	movs	r1, #8
   b5b9e:	f7fe fa7c 	bl	b409a <_ZdlPvj>
   b5ba2:	e7ea      	b.n	b5b7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5ba4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5ba4:	b510      	push	{r4, lr}
   b5ba6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b5ba8:	3058      	adds	r0, #88	; 0x58
   b5baa:	f7fe fe30 	bl	b480e <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5bae:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5bb6:	f001 ba13 	b.w	b6fe0 <_ZN6StringD1Ev>

000b5bba <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5bba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5bbe:	b2da      	uxtb	r2, r3
   b5bc0:	2a09      	cmp	r2, #9
   b5bc2:	d801      	bhi.n	b5bc8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5bc4:	4618      	mov	r0, r3
   b5bc6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5bc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5bcc:	2b05      	cmp	r3, #5
   b5bce:	d801      	bhi.n	b5bd4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5bd0:	3857      	subs	r0, #87	; 0x57
   b5bd2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5bd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5bd8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5bda:	bf94      	ite	ls
   b5bdc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5bde:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b5be2:	4770      	bx	lr

000b5be4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5be4:	b510      	push	{r4, lr}
            locked_(false) {
   b5be6:	2300      	movs	r3, #0
   b5be8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5bea:	4b04      	ldr	r3, [pc, #16]	; (b5bfc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5bec:	4604      	mov	r4, r0
   b5bee:	6818      	ldr	r0, [r3, #0]
   b5bf0:	f7ff f912 	bl	b4e18 <os_mutex_recursive_lock>
        locked_ = true;
   b5bf4:	2301      	movs	r3, #1
   b5bf6:	7023      	strb	r3, [r4, #0]
    }
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	bd10      	pop	{r4, pc}
   b5bfc:	2003e6f0 	.word	0x2003e6f0

000b5c00 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5c00:	b510      	push	{r4, lr}
        if (locked_) {
   b5c02:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5c04:	4604      	mov	r4, r0
        if (locked_) {
   b5c06:	b11b      	cbz	r3, b5c10 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5c08:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5c0a:	6818      	ldr	r0, [r3, #0]
   b5c0c:	f7ff f90c 	bl	b4e28 <os_mutex_recursive_unlock>
    }
   b5c10:	4620      	mov	r0, r4
   b5c12:	bd10      	pop	{r4, pc}
   b5c14:	2003e6f0 	.word	0x2003e6f0

000b5c18 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5c18:	b082      	sub	sp, #8
   b5c1a:	4603      	mov	r3, r0
    address_ = addr;
   b5c1c:	6808      	ldr	r0, [r1, #0]
   b5c1e:	6849      	ldr	r1, [r1, #4]
   b5c20:	466a      	mov	r2, sp
   b5c22:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5c24:	466a      	mov	r2, sp
   b5c26:	ca03      	ldmia	r2!, {r0, r1}
   b5c28:	6018      	str	r0, [r3, #0]
}
   b5c2a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5c2c:	6059      	str	r1, [r3, #4]
}
   b5c2e:	b002      	add	sp, #8
   b5c30:	4770      	bx	lr

000b5c32 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5c32:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5c34:	7982      	ldrb	r2, [r0, #6]
   b5c36:	798b      	ldrb	r3, [r1, #6]
   b5c38:	429a      	cmp	r2, r3
   b5c3a:	d106      	bne.n	b5c4a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5c3c:	2206      	movs	r2, #6
   b5c3e:	f001 fc87 	bl	b7550 <memcmp>
   b5c42:	fab0 f080 	clz	r0, r0
   b5c46:	0940      	lsrs	r0, r0, #5
}
   b5c48:	bd08      	pop	{r3, pc}
    return false;
   b5c4a:	2000      	movs	r0, #0
   b5c4c:	e7fc      	b.n	b5c48 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5c4e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c52:	6003      	str	r3, [r0, #0]
   b5c54:	8083      	strh	r3, [r0, #4]
}
   b5c56:	2000      	movs	r0, #0
   b5c58:	4770      	bx	lr

000b5c5a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5c5a:	b508      	push	{r3, lr}
   b5c5c:	4602      	mov	r2, r0
        : address_{} {
   b5c5e:	2100      	movs	r1, #0
   b5c60:	6001      	str	r1, [r0, #0]
   b5c62:	6041      	str	r1, [r0, #4]
    clear();
   b5c64:	f7ff fff3 	bl	b5c4e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5c68:	7191      	strb	r1, [r2, #6]
}
   b5c6a:	4610      	mov	r0, r2
   b5c6c:	bd08      	pop	{r3, pc}
	...

000b5c70 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5c70:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5c72:	2301      	movs	r3, #1
   b5c74:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5c76:	4b05      	ldr	r3, [pc, #20]	; (b5c8c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5c78:	4602      	mov	r2, r0
   b5c7a:	f103 0110 	add.w	r1, r3, #16
   b5c7e:	f853 4b04 	ldr.w	r4, [r3], #4
   b5c82:	f842 4b04 	str.w	r4, [r2], #4
   b5c86:	428b      	cmp	r3, r1
   b5c88:	d1f9      	bne.n	b5c7e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b5c8a:	bd10      	pop	{r4, pc}
   b5c8c:	000b7b1a 	.word	0x000b7b1a

000b5c90 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5c90:	b510      	push	{r4, lr}
    if (uuid128) {
   b5c92:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5c94:	4604      	mov	r4, r0
    if (uuid128) {
   b5c96:	b1b1      	cbz	r1, b5cc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5c98:	2a01      	cmp	r2, #1
   b5c9a:	f101 0210 	add.w	r2, r1, #16
   b5c9e:	d10a      	bne.n	b5cb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5ca0:	4601      	mov	r1, r0
   b5ca2:	f853 0b04 	ldr.w	r0, [r3], #4
   b5ca6:	f841 0b04 	str.w	r0, [r1], #4
   b5caa:	4293      	cmp	r3, r2
   b5cac:	d1f9      	bne.n	b5ca2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5cae:	2301      	movs	r3, #1
   b5cb0:	6123      	str	r3, [r4, #16]
}
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	bd10      	pop	{r4, pc}
   b5cb6:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5cb8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5cbc:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5cc0:	429a      	cmp	r2, r3
   b5cc2:	d1f9      	bne.n	b5cb8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5cc4:	e7f3      	b.n	b5cae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b5cc6:	2210      	movs	r2, #16
   b5cc8:	f001 fc7a 	bl	b75c0 <memset>
   b5ccc:	e7f1      	b.n	b5cb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b5cce <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b5cce:	b538      	push	{r3, r4, r5, lr}
   b5cd0:	4604      	mov	r4, r0
   b5cd2:	460d      	mov	r5, r1
        : BleUuid() {
   b5cd4:	f7ff ffcc 	bl	b5c70 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b5cd8:	2300      	movs	r3, #0
   b5cda:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5cdc:	81a5      	strh	r5, [r4, #12]
}
   b5cde:	4620      	mov	r0, r4
   b5ce0:	bd38      	pop	{r3, r4, r5, pc}

000b5ce2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b5ce2:	b538      	push	{r3, r4, r5, lr}
   b5ce4:	4604      	mov	r4, r0
   b5ce6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b5ce8:	461a      	mov	r2, r3
   b5cea:	f7ff ffd1 	bl	b5c90 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5cee:	81a5      	strh	r5, [r4, #12]
}
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	bd38      	pop	{r3, r4, r5, pc}

000b5cf4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5cf4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b5cf6:	6902      	ldr	r2, [r0, #16]
   b5cf8:	b922      	cbnz	r2, b5d04 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b5cfa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5cfc:	3800      	subs	r0, #0
   b5cfe:	bf18      	it	ne
   b5d00:	2001      	movne	r0, #1
}
   b5d02:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5d04:	4902      	ldr	r1, [pc, #8]	; (b5d10 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5d06:	2210      	movs	r2, #16
   b5d08:	f001 fc22 	bl	b7550 <memcmp>
   b5d0c:	e7f6      	b.n	b5cfc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b5d0e:	bf00      	nop
   b5d10:	000b7b3a 	.word	0x000b7b3a

000b5d14 <_ZNK8particle7BleUuid4typeEv>:
}
   b5d14:	6900      	ldr	r0, [r0, #16]
   b5d16:	4770      	bx	lr

000b5d18 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5d18:	b538      	push	{r3, r4, r5, lr}
   b5d1a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5d1c:	2214      	movs	r2, #20
   b5d1e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b5d20:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b5d22:	f001 fc4d 	bl	b75c0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b5d26:	6923      	ldr	r3, [r4, #16]
   b5d28:	b91b      	cbnz	r3, b5d32 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5d2a:	89a3      	ldrh	r3, [r4, #12]
   b5d2c:	802b      	strh	r3, [r5, #0]
}
   b5d2e:	4628      	mov	r0, r5
   b5d30:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b5d32:	2301      	movs	r3, #1
   b5d34:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5d36:	4621      	mov	r1, r4
   b5d38:	462b      	mov	r3, r5
   b5d3a:	f104 0210 	add.w	r2, r4, #16
   b5d3e:	f851 0b04 	ldr.w	r0, [r1], #4
   b5d42:	f843 0b04 	str.w	r0, [r3], #4
   b5d46:	4291      	cmp	r1, r2
   b5d48:	d1f9      	bne.n	b5d3e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5d4a:	e7f0      	b.n	b5d2e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5d4c <_ZNK8particle7BleUuid7shortedEv>:
}
   b5d4c:	8980      	ldrh	r0, [r0, #12]
   b5d4e:	4770      	bx	lr

000b5d50 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b5d50:	4770      	bx	lr

000b5d52 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b5d52:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5d54:	6902      	ldr	r2, [r0, #16]
   b5d56:	690b      	ldr	r3, [r1, #16]
   b5d58:	429a      	cmp	r2, r3
   b5d5a:	d106      	bne.n	b5d6a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5d5c:	2210      	movs	r2, #16
   b5d5e:	f001 fbf7 	bl	b7550 <memcmp>
   b5d62:	fab0 f080 	clz	r0, r0
   b5d66:	0940      	lsrs	r0, r0, #5
}
   b5d68:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5d6a:	2000      	movs	r0, #0
   b5d6c:	e7fc      	b.n	b5d68 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b5d70 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b5d70:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b5d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5d76:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5d78:	4b34      	ldr	r3, [pc, #208]	; (b5e4c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5d7a:	460c      	mov	r4, r1
   b5d7c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5d7e:	4602      	mov	r2, r0
   b5d80:	f103 0110 	add.w	r1, r3, #16
   b5d84:	f853 0b04 	ldr.w	r0, [r3], #4
   b5d88:	f842 0b04 	str.w	r0, [r2], #4
   b5d8c:	428b      	cmp	r3, r1
   b5d8e:	d1f9      	bne.n	b5d84 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b5d90:	b344      	cbz	r4, b5de4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b5d92:	2124      	movs	r1, #36	; 0x24
   b5d94:	4620      	mov	r0, r4
   b5d96:	f001 fc5b 	bl	b7650 <strnlen>
   b5d9a:	2804      	cmp	r0, #4
   b5d9c:	f04f 0500 	mov.w	r5, #0
   b5da0:	d123      	bne.n	b5dea <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b5da2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5da6:	af01      	add	r7, sp, #4
   b5da8:	1ca5      	adds	r5, r4, #2
   b5daa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5dac:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b5db0:	f7ff ff03 	bl	b5bba <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5db4:	f1b0 0800 	subs.w	r8, r0, #0
   b5db8:	db12      	blt.n	b5de0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5dba:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b5dbe:	f7ff fefc 	bl	b5bba <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	db0c      	blt.n	b5de0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5dc6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5dc8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5dcc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5dce:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b5dd2:	d1eb      	bne.n	b5dac <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b5dd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5dd8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b5dda:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5dde:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5de0:	2300      	movs	r3, #0
   b5de2:	6133      	str	r3, [r6, #16]
}
   b5de4:	b002      	add	sp, #8
   b5de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b5dea:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5dee:	2124      	movs	r1, #36	; 0x24
   b5df0:	4620      	mov	r0, r4
   b5df2:	f001 fc2d 	bl	b7650 <strnlen>
   b5df6:	42a8      	cmp	r0, r5
   b5df8:	d807      	bhi.n	b5e0a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5dfa:	4642      	mov	r2, r8
   b5dfc:	2100      	movs	r1, #0
   b5dfe:	4630      	mov	r0, r6
}
   b5e00:	b002      	add	sp, #8
   b5e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5e06:	f001 bbdb 	b.w	b75c0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5e0a:	f1b8 0f00 	cmp.w	r8, #0
   b5e0e:	d0e9      	beq.n	b5de4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5e10:	5d60      	ldrb	r0, [r4, r5]
   b5e12:	f7ff fed2 	bl	b5bba <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5e16:	0603      	lsls	r3, r0, #24
   b5e18:	d415      	bmi.n	b5e46 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5e1a:	0100      	lsls	r0, r0, #4
   b5e1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5e20:	b2c7      	uxtb	r7, r0
   b5e22:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b5e26:	2124      	movs	r1, #36	; 0x24
   b5e28:	4620      	mov	r0, r4
   b5e2a:	f001 fc11 	bl	b7650 <strnlen>
   b5e2e:	3501      	adds	r5, #1
   b5e30:	42a8      	cmp	r0, r5
   b5e32:	d908      	bls.n	b5e46 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5e34:	5d60      	ldrb	r0, [r4, r5]
   b5e36:	f7ff fec0 	bl	b5bba <_ZN8particle11hexToNibbleEc>
   b5e3a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5e3c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b5e3e:	bfa4      	itt	ge
   b5e40:	4338      	orrge	r0, r7
   b5e42:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5e46:	3501      	adds	r5, #1
   b5e48:	e7d1      	b.n	b5dee <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5e4a:	bf00      	nop
   b5e4c:	000b7b1a 	.word	0x000b7b1a

000b5e50 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b5e50:	b513      	push	{r0, r1, r4, lr}
   b5e52:	4604      	mov	r4, r0
   b5e54:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5e56:	f7ff ff0b 	bl	b5c70 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	9901      	ldr	r1, [sp, #4]
   b5e5e:	f7ff ff87 	bl	b5d70 <_ZN8particle7BleUuid9constructEPKc>
}
   b5e62:	4620      	mov	r0, r4
   b5e64:	b002      	add	sp, #8
   b5e66:	bd10      	pop	{r4, pc}

000b5e68 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5e68:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5e6e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5e70:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b5e72:	8043      	strh	r3, [r0, #2]
   b5e74:	220e      	movs	r2, #14
   b5e76:	4629      	mov	r1, r5
   b5e78:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5e7a:	7105      	strb	r5, [r0, #4]
   b5e7c:	3006      	adds	r0, #6
   b5e7e:	f001 fb9f 	bl	b75c0 <memset>
   b5e82:	f104 0014 	add.w	r0, r4, #20
   b5e86:	f7ff fef3 	bl	b5c70 <_ZN8particle7BleUuidC1Ev>
   b5e8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5e8e:	f7ff feef 	bl	b5c70 <_ZN8particle7BleUuidC1Ev>
   b5e92:	4904      	ldr	r1, [pc, #16]	; (b5ea4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5e94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5e98:	f001 f8ed 	bl	b7076 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5e9c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b5e9e:	4620      	mov	r0, r4
   b5ea0:	bd38      	pop	{r3, r4, r5, pc}
   b5ea2:	bf00      	nop
   b5ea4:	000b7a0b 	.word	0x000b7a0b

000b5ea8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5ea8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b5eaa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b5eae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5eb2:	4293      	cmp	r3, r2
   b5eb4:	4618      	mov	r0, r3
   b5eb6:	d006      	beq.n	b5ec6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5eb8:	6804      	ldr	r4, [r0, #0]
   b5eba:	8824      	ldrh	r4, [r4, #0]
   b5ebc:	428c      	cmp	r4, r1
   b5ebe:	f103 0308 	add.w	r3, r3, #8
   b5ec2:	d1f6      	bne.n	b5eb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5ec4:	bd10      	pop	{r4, pc}
        return nullptr;
   b5ec6:	2000      	movs	r0, #0
   b5ec8:	e7fc      	b.n	b5ec4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5ecc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b5ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ece:	4606      	mov	r6, r0
   b5ed0:	b085      	sub	sp, #20
   b5ed2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b5ed4:	460d      	mov	r5, r1
   b5ed6:	2900      	cmp	r1, #0
   b5ed8:	d050      	beq.n	b5f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b5eda:	2a00      	cmp	r2, #0
   b5edc:	d04e      	beq.n	b5f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5ede:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b5ee0:	7823      	ldrb	r3, [r4, #0]
   b5ee2:	2af4      	cmp	r2, #244	; 0xf4
   b5ee4:	bf28      	it	cs
   b5ee6:	22f4      	movcs	r2, #244	; 0xf4
   b5ee8:	b343      	cbz	r3, b5f3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b5eea:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b5eec:	0798      	lsls	r0, r3, #30
   b5eee:	d509      	bpl.n	b5f04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b5ef0:	89a0      	ldrh	r0, [r4, #12]
   b5ef2:	9203      	str	r2, [sp, #12]
   b5ef4:	2300      	movs	r3, #0
   b5ef6:	f7ff f805 	bl	b4f04 <hal_ble_gatt_server_set_characteristic_value>
   b5efa:	2800      	cmp	r0, #0
   b5efc:	9a03      	ldr	r2, [sp, #12]
   b5efe:	da03      	bge.n	b5f08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b5f00:	b005      	add	sp, #20
   b5f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b5f04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5f08:	6834      	ldr	r4, [r6, #0]
   b5f0a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b5f0c:	06d9      	lsls	r1, r3, #27
   b5f0e:	d509      	bpl.n	b5f24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b5f10:	2f01      	cmp	r7, #1
   b5f12:	d007      	beq.n	b5f24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5f14:	89a0      	ldrh	r0, [r4, #12]
   b5f16:	2300      	movs	r3, #0
   b5f18:	4629      	mov	r1, r5
}
   b5f1a:	b005      	add	sp, #20
   b5f1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5f20:	f7ff b822 	b.w	b4f68 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b5f24:	069b      	lsls	r3, r3, #26
   b5f26:	d5eb      	bpl.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b5f28:	2f02      	cmp	r7, #2
   b5f2a:	d0e9      	beq.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5f2c:	89a0      	ldrh	r0, [r4, #12]
   b5f2e:	2300      	movs	r3, #0
   b5f30:	4629      	mov	r1, r5
}
   b5f32:	b005      	add	sp, #20
   b5f34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5f38:	f7ff b820 	b.w	b4f7c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b5f3c:	8860      	ldrh	r0, [r4, #2]
   b5f3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5f42:	4288      	cmp	r0, r1
   b5f44:	d01c      	beq.n	b5f80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b5f46:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b5f48:	074e      	lsls	r6, r1, #29
   b5f4a:	d501      	bpl.n	b5f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b5f4c:	2f01      	cmp	r7, #1
   b5f4e:	d104      	bne.n	b5f5a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5f50:	070b      	lsls	r3, r1, #28
   b5f52:	d409      	bmi.n	b5f68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b5f54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5f58:	e7d2      	b.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5f5a:	89a1      	ldrh	r1, [r4, #12]
   b5f5c:	9300      	str	r3, [sp, #0]
   b5f5e:	4613      	mov	r3, r2
   b5f60:	462a      	mov	r2, r5
   b5f62:	f7fe ffe3 	bl	b4f2c <hal_ble_gatt_client_write_without_response>
   b5f66:	e7cb      	b.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5f68:	2f02      	cmp	r7, #2
   b5f6a:	d0f3      	beq.n	b5f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5f6c:	2300      	movs	r3, #0
   b5f6e:	89a1      	ldrh	r1, [r4, #12]
   b5f70:	9300      	str	r3, [sp, #0]
   b5f72:	4613      	mov	r3, r2
   b5f74:	462a      	mov	r2, r5
   b5f76:	f7fe ffcf 	bl	b4f18 <hal_ble_gatt_client_write_with_response>
   b5f7a:	e7c1      	b.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5f7c:	4802      	ldr	r0, [pc, #8]	; (b5f88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b5f7e:	e7bf      	b.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b5f80:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5f84:	e7bc      	b.n	b5f00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b5f86:	bf00      	nop
   b5f88:	fffffef2 	.word	0xfffffef2

000b5f8c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b5f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f8e:	460c      	mov	r4, r1
   b5f90:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b5f92:	21f4      	movs	r1, #244	; 0xf4
   b5f94:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b5f96:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b5f98:	f001 fb5a 	bl	b7650 <strnlen>
   b5f9c:	9b01      	ldr	r3, [sp, #4]
   b5f9e:	4602      	mov	r2, r0
   b5fa0:	4621      	mov	r1, r4
   b5fa2:	4628      	mov	r0, r5
}
   b5fa4:	b003      	add	sp, #12
   b5fa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b5faa:	f7ff bf8f 	b.w	b5ecc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b5fb0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5fb4:	2600      	movs	r6, #0
   b5fb6:	6006      	str	r6, [r0, #0]
   b5fb8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5fba:	2028      	movs	r0, #40	; 0x28
   b5fbc:	460c      	mov	r4, r1
   b5fbe:	f7fe f868 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5fc2:	1e05      	subs	r5, r0, #0
   b5fc4:	f105 080c 	add.w	r8, r5, #12
   b5fc8:	d00f      	beq.n	b5fea <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b5fca:	2301      	movs	r3, #1
   b5fcc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5fd0:	4b08      	ldr	r3, [pc, #32]	; (b5ff4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5fd2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5fd4:	4640      	mov	r0, r8
   b5fd6:	f7ff fe4b 	bl	b5c70 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5fdc:	622e      	str	r6, [r5, #32]
   b5fde:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5fe2:	4646      	mov	r6, r8
   b5fe4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5fe6:	6823      	ldr	r3, [r4, #0]
   b5fe8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5fea:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5fee:	4638      	mov	r0, r7
   b5ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5ff4:	000b7ae4 	.word	0x000b7ae4

000b5ff8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5ff8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5ffa:	2500      	movs	r5, #0
   b5ffc:	6005      	str	r5, [r0, #0]
   b5ffe:	4606      	mov	r6, r0
   b6000:	2030      	movs	r0, #48	; 0x30
   b6002:	f7fe f846 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6006:	4604      	mov	r4, r0
   b6008:	b188      	cbz	r0, b602e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b600a:	2301      	movs	r3, #1
   b600c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6010:	4b09      	ldr	r3, [pc, #36]	; (b6038 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6012:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6014:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6018:	8183      	strh	r3, [r0, #12]
   b601a:	300e      	adds	r0, #14
   b601c:	f7ff fe1d 	bl	b5c5a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6020:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6024:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6028:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b602c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b602e:	6074      	str	r4, [r6, #4]
   b6030:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6032:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6034:	4630      	mov	r0, r6
   b6036:	bd70      	pop	{r4, r5, r6, pc}
   b6038:	000b7b00 	.word	0x000b7b00

000b603c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b603c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b603e:	460d      	mov	r5, r1
   b6040:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6042:	a801      	add	r0, sp, #4
   b6044:	f7ff fdce 	bl	b5be4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6048:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b604a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b604e:	6023      	str	r3, [r4, #0]
   b6050:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6054:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6056:	a801      	add	r0, sp, #4
   b6058:	f7ff fdd2 	bl	b5c00 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b605c:	4620      	mov	r0, r4
   b605e:	b003      	add	sp, #12
   b6060:	bd30      	pop	{r4, r5, pc}

000b6062 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6062:	b530      	push	{r4, r5, lr}
   b6064:	4605      	mov	r5, r0
   b6066:	b087      	sub	sp, #28
   b6068:	460c      	mov	r4, r1
    WiringBleLock lk;
   b606a:	a801      	add	r0, sp, #4
   b606c:	f7ff fdba 	bl	b5be4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6070:	682a      	ldr	r2, [r5, #0]
   b6072:	6823      	ldr	r3, [r4, #0]
   b6074:	8812      	ldrh	r2, [r2, #0]
   b6076:	881b      	ldrh	r3, [r3, #0]
   b6078:	429a      	cmp	r2, r3
   b607a:	d10d      	bne.n	b6098 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b607c:	4629      	mov	r1, r5
   b607e:	a802      	add	r0, sp, #8
   b6080:	f7ff ffdc 	bl	b603c <_ZNK8particle13BlePeerDevice7addressEv>
   b6084:	4621      	mov	r1, r4
   b6086:	a804      	add	r0, sp, #16
   b6088:	f7ff ffd8 	bl	b603c <_ZNK8particle13BlePeerDevice7addressEv>
   b608c:	a904      	add	r1, sp, #16
   b608e:	a802      	add	r0, sp, #8
   b6090:	f7ff fdcf 	bl	b5c32 <_ZNK8particle10BleAddresseqERKS0_>
   b6094:	4604      	mov	r4, r0
   b6096:	b900      	cbnz	r0, b609a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6098:	2400      	movs	r4, #0
    WiringBleLock lk;
   b609a:	a801      	add	r0, sp, #4
   b609c:	f7ff fdb0 	bl	b5c00 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b60a0:	4620      	mov	r0, r4
   b60a2:	b007      	add	sp, #28
   b60a4:	bd30      	pop	{r4, r5, pc}
	...

000b60a8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b60a8:	b510      	push	{r4, lr}
   b60aa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b60ac:	2064      	movs	r0, #100	; 0x64
   b60ae:	f7fd fff0 	bl	b4092 <_Znwj>
   b60b2:	b168      	cbz	r0, b60d0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b60b4:	2300      	movs	r3, #0
   b60b6:	e9c0 3300 	strd	r3, r3, [r0]
   b60ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b60be:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b60c2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b60c6:	6203      	str	r3, [r0, #32]
   b60c8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b60ca:	63c3      	str	r3, [r0, #60]	; 0x3c
   b60cc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b60ce:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b60d0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b60d2:	b920      	cbnz	r0, b60de <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b60d4:	4a0a      	ldr	r2, [pc, #40]	; (b6100 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b60d6:	490b      	ldr	r1, [pc, #44]	; (b6104 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b60d8:	200a      	movs	r0, #10
   b60da:	f7fe ffa1 	bl	b5020 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b60de:	2000      	movs	r0, #0
   b60e0:	f7fe fedc 	bl	b4e9c <hal_ble_stack_init>
   b60e4:	b120      	cbz	r0, b60f0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b60e6:	4a06      	ldr	r2, [pc, #24]	; (b6100 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b60e8:	4907      	ldr	r1, [pc, #28]	; (b6108 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b60ea:	200a      	movs	r0, #10
   b60ec:	f7fe ff98 	bl	b5020 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b60f0:	6821      	ldr	r1, [r4, #0]
   b60f2:	4806      	ldr	r0, [pc, #24]	; (b610c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b60f4:	2200      	movs	r2, #0
   b60f6:	f7fe ff2d 	bl	b4f54 <hal_ble_set_callback_on_periph_link_events>
}
   b60fa:	4620      	mov	r0, r4
   b60fc:	bd10      	pop	{r4, pc}
   b60fe:	bf00      	nop
   b6100:	000b4fb1 	.word	0x000b4fb1
   b6104:	000b7974 	.word	0x000b7974
   b6108:	000b79b2 	.word	0x000b79b2
   b610c:	000b6661 	.word	0x000b6661

000b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6110:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6112:	4c0a      	ldr	r4, [pc, #40]	; (b613c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6114:	7823      	ldrb	r3, [r4, #0]
   b6116:	f3bf 8f5b 	dmb	ish
   b611a:	07db      	lsls	r3, r3, #31
   b611c:	d40c      	bmi.n	b6138 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b611e:	4620      	mov	r0, r4
   b6120:	f7fd ffbd 	bl	b409e <__cxa_guard_acquire>
   b6124:	b140      	cbz	r0, b6138 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6126:	4806      	ldr	r0, [pc, #24]	; (b6140 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6128:	f7ff ffbe 	bl	b60a8 <_ZN8particle14BleLocalDeviceC1Ev>
   b612c:	4620      	mov	r0, r4
   b612e:	f7fd ffbb 	bl	b40a8 <__cxa_guard_release>
   b6132:	4804      	ldr	r0, [pc, #16]	; (b6144 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6134:	f001 fa06 	bl	b7544 <atexit>
    return instance;
}
   b6138:	4801      	ldr	r0, [pc, #4]	; (b6140 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b613a:	bd10      	pop	{r4, pc}
   b613c:	2003e6e8 	.word	0x2003e6e8
   b6140:	2003e6f4 	.word	0x2003e6f4
   b6144:	000b634d 	.word	0x000b634d

000b6148 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6148:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b614a:	6803      	ldr	r3, [r0, #0]
   b614c:	3b09      	subs	r3, #9
   b614e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6150:	b08d      	sub	sp, #52	; 0x34
   b6152:	4604      	mov	r4, r0
   b6154:	460d      	mov	r5, r1
    switch (event->type) {
   b6156:	d811      	bhi.n	b617c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6158:	f7ff ffda 	bl	b6110 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b615c:	88a1      	ldrh	r1, [r4, #4]
   b615e:	6800      	ldr	r0, [r0, #0]
   b6160:	f7ff fea2 	bl	b5ea8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6164:	4603      	mov	r3, r0
   b6166:	b958      	cbnz	r0, b6180 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6168:	2220      	movs	r2, #32
   b616a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b616e:	4a0b      	ldr	r2, [pc, #44]	; (b619c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6170:	9200      	str	r2, [sp, #0]
   b6172:	490b      	ldr	r1, [pc, #44]	; (b61a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6174:	aa04      	add	r2, sp, #16
   b6176:	2032      	movs	r0, #50	; 0x32
   b6178:	f7fe ff5a 	bl	b5030 <log_message>
}
   b617c:	b00d      	add	sp, #52	; 0x34
   b617e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6180:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6182:	2a00      	cmp	r2, #0
   b6184:	d0fa      	beq.n	b617c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6186:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b618a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b618e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6192:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6194:	aa04      	add	r2, sp, #16
   b6196:	a903      	add	r1, sp, #12
   b6198:	47a0      	blx	r4
}
   b619a:	e7ef      	b.n	b617c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b619c:	000b79f4 	.word	0x000b79f4
   b61a0:	000b798b 	.word	0x000b798b

000b61a4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b61a4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b61a6:	2000      	movs	r0, #0
   b61a8:	f7fe fe78 	bl	b4e9c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b61ac:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b61b0:	bd08      	pop	{r3, pc}

000b61b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b61b2:	b919      	cbnz	r1, b61bc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b61b4:	460a      	mov	r2, r1
   b61b6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b61b8:	f7fe be78 	b.w	b4eac <hal_ble_gap_set_advertising_data>
   b61bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b61c0:	2200      	movs	r2, #0
   b61c2:	e7f9      	b.n	b61b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b61c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b61c4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b61c6:	1e14      	subs	r4, r2, #0
   b61c8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b61ca:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b61cc:	db02      	blt.n	b61d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b61ce:	1862      	adds	r2, r4, r1
   b61d0:	429a      	cmp	r2, r3
   b61d2:	dd00      	ble.n	b61d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b61d4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b61d6:	682a      	ldr	r2, [r5, #0]
   b61d8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b61da:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b61dc:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b61de:	1a52      	subs	r2, r2, r1
   b61e0:	f001 f9d4 	bl	b758c <memmove>
    size_ -= n;
   b61e4:	686a      	ldr	r2, [r5, #4]
   b61e6:	1b12      	subs	r2, r2, r4
   b61e8:	606a      	str	r2, [r5, #4]
}
   b61ea:	bd38      	pop	{r3, r4, r5, pc}

000b61ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b61ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b61ee:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b61f0:	4604      	mov	r4, r0
   b61f2:	460d      	mov	r5, r1
   b61f4:	ab01      	add	r3, sp, #4
   b61f6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b61fa:	f7ff fc87 	bl	b5b0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b61fe:	4602      	mov	r2, r0
   b6200:	b138      	cbz	r0, b6212 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6202:	9901      	ldr	r1, [sp, #4]
   b6204:	4620      	mov	r0, r4
   b6206:	f7ff ffdd 	bl	b61c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b620a:	4629      	mov	r1, r5
   b620c:	4620      	mov	r0, r4
   b620e:	f7ff ffed 	bl	b61ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6212:	b003      	add	sp, #12
   b6214:	bd30      	pop	{r4, r5, pc}

000b6216 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6216:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6218:	460c      	mov	r4, r1
   b621a:	b929      	cbnz	r1, b6228 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b621c:	460a      	mov	r2, r1
   b621e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6224:	f7fe be4a 	b.w	b4ebc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6228:	2101      	movs	r1, #1
   b622a:	4620      	mov	r0, r4
   b622c:	f7ff ffde 	bl	b61ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6230:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6234:	2200      	movs	r2, #0
   b6236:	e7f3      	b.n	b6220 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6238 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6238:	b538      	push	{r3, r4, r5, lr}
   b623a:	4604      	mov	r4, r0
   b623c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b623e:	f7ff ffb8 	bl	b61b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6242:	2800      	cmp	r0, #0
   b6244:	db0a      	blt.n	b625c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6246:	4629      	mov	r1, r5
   b6248:	4620      	mov	r0, r4
   b624a:	f7ff ffe4 	bl	b6216 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b624e:	2800      	cmp	r0, #0
   b6250:	db04      	blt.n	b625c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6256:	2000      	movs	r0, #0
   b6258:	f7fe be38 	b.w	b4ecc <hal_ble_gap_start_advertising>
}
   b625c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6260 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6260:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6262:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6264:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6266:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6268:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b626a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b626c:	f7fd ff11 	bl	b4092 <_Znwj>
   b6270:	b118      	cbz	r0, b627a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6272:	682b      	ldr	r3, [r5, #0]
   b6274:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6276:	686b      	ldr	r3, [r5, #4]
   b6278:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b627a:	4b03      	ldr	r3, [pc, #12]	; (b6288 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b627c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b627e:	4b03      	ldr	r3, [pc, #12]	; (b628c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6280:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6282:	60a3      	str	r3, [r4, #8]
      }
   b6284:	4620      	mov	r0, r4
   b6286:	bd38      	pop	{r3, r4, r5, pc}
   b6288:	000b5b4d 	.word	0x000b5b4d
   b628c:	000b5b65 	.word	0x000b5b65

000b6290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6290:	680b      	ldr	r3, [r1, #0]
   b6292:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6294:	b113      	cbz	r3, b629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6296:	685a      	ldr	r2, [r3, #4]
   b6298:	3201      	adds	r2, #1
   b629a:	605a      	str	r2, [r3, #4]
      }
   b629c:	4770      	bx	lr

000b629e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b629e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b62a0:	f851 3b04 	ldr.w	r3, [r1], #4
   b62a4:	4604      	mov	r4, r0
   b62a6:	f840 3b04 	str.w	r3, [r0], #4
   b62aa:	f7ff fff1 	bl	b6290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b62ae:	6823      	ldr	r3, [r4, #0]
   b62b0:	b90b      	cbnz	r3, b62b6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b62b2:	f7ff fc41 	bl	b5b38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b62b6:	4620      	mov	r0, r4
   b62b8:	bd10      	pop	{r4, pc}

000b62ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b62ba:	b510      	push	{r4, lr}
   b62bc:	f851 3b04 	ldr.w	r3, [r1], #4
   b62c0:	4604      	mov	r4, r0
   b62c2:	f840 3b04 	str.w	r3, [r0], #4
   b62c6:	f7ff ffe3 	bl	b6290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b62ca:	4620      	mov	r0, r4
   b62cc:	bd10      	pop	{r4, pc}

000b62ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b62ce:	b510      	push	{r4, lr}
   b62d0:	f851 3b04 	ldr.w	r3, [r1], #4
   b62d4:	4604      	mov	r4, r0
   b62d6:	f840 3b04 	str.w	r3, [r0], #4
   b62da:	f7ff ffd9 	bl	b6290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b62de:	4620      	mov	r0, r4
   b62e0:	bd10      	pop	{r4, pc}

000b62e2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b62e2:	b510      	push	{r4, lr}
   b62e4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b62e6:	3004      	adds	r0, #4
   b62e8:	f7fe ff82 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b62ec:	4620      	mov	r0, r4
   b62ee:	bd10      	pop	{r4, pc}

000b62f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b62f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b62f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b62fc:	42ae      	cmp	r6, r5
   b62fe:	d004      	beq.n	b630a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6300:	1d28      	adds	r0, r5, #4
   b6302:	f7fe ff75 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6306:	3508      	adds	r5, #8
   b6308:	e7f8      	b.n	b62fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b630a:	6820      	ldr	r0, [r4, #0]
   b630c:	f7fe ff34 	bl	b5178 <free>
}
   b6310:	4620      	mov	r0, r4
   b6312:	bd70      	pop	{r4, r5, r6, pc}

000b6314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6314:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6316:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b631a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b631c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6320:	42ae      	cmp	r6, r5
   b6322:	d004      	beq.n	b632e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6324:	1d28      	adds	r0, r5, #4
   b6326:	f7fe ff63 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b632a:	3508      	adds	r5, #8
   b632c:	e7f8      	b.n	b6320 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b632e:	6820      	ldr	r0, [r4, #0]
   b6330:	f7fe ff22 	bl	b5178 <free>
}
   b6334:	4620      	mov	r0, r4
   b6336:	bd70      	pop	{r4, r5, r6, pc}

000b6338 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6338:	b510      	push	{r4, lr}
   b633a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b633c:	3024      	adds	r0, #36	; 0x24
   b633e:	f7ff ffe9 	bl	b6314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6342:	f104 0018 	add.w	r0, r4, #24
   b6346:	f7ff ffd3 	bl	b62f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b634a:	bd10      	pop	{r4, pc}

000b634c <__tcf_0>:
    static BleLocalDevice instance;
   b634c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b634e:	4b17      	ldr	r3, [pc, #92]	; (b63ac <__tcf_0+0x60>)
   b6350:	681c      	ldr	r4, [r3, #0]
   b6352:	b354      	cbz	r4, b63aa <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6354:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6358:	f7fe fa59 	bl	b480e <_ZNSt14_Function_baseD1Ev>
   b635c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6360:	f7fe fa55 	bl	b480e <_ZNSt14_Function_baseD1Ev>
   b6364:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6368:	f7fe fa51 	bl	b480e <_ZNSt14_Function_baseD1Ev>
   b636c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6370:	f7fe fa4d 	bl	b480e <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6374:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6378:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b637c:	42ae      	cmp	r6, r5
   b637e:	d004      	beq.n	b638a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6380:	1d28      	adds	r0, r5, #4
   b6382:	f7fe ff35 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6386:	3508      	adds	r5, #8
   b6388:	e7f8      	b.n	b637c <__tcf_0+0x30>
    ::free(ptr);
   b638a:	69a0      	ldr	r0, [r4, #24]
   b638c:	f7fe fef4 	bl	b5178 <free>
    ~BleLocalDeviceImpl() = default;
   b6390:	f104 000c 	add.w	r0, r4, #12
   b6394:	f7ff ffbe 	bl	b6314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6398:	4620      	mov	r0, r4
   b639a:	f7ff ffa9 	bl	b62f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b639e:	4620      	mov	r0, r4
   b63a0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b63a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b63a6:	f7fd be78 	b.w	b409a <_ZdlPvj>
   b63aa:	bd70      	pop	{r4, r5, r6, pc}
   b63ac:	2003e6f4 	.word	0x2003e6f4

000b63b0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b63b0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b63b2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b63b4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b63b8:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b63bc:	6803      	ldr	r3, [r0, #0]
   b63be:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b63c0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b63c2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b63c4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b63c6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b63c8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b63ca:	f7fe ff11 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b63ce:	b002      	add	sp, #8
   b63d0:	bd10      	pop	{r4, pc}

000b63d2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b63d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b63d4:	b510      	push	{r4, lr}
      if (_M_empty())
   b63d6:	b90a      	cbnz	r2, b63dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b63d8:	f000 ff9e 	bl	b7318 <_ZSt25__throw_bad_function_callv>
    }
   b63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b63e0:	68c3      	ldr	r3, [r0, #12]
   b63e2:	4718      	bx	r3

000b63e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b63e4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b63e6:	6883      	ldr	r3, [r0, #8]
   b63e8:	428b      	cmp	r3, r1
   b63ea:	da02      	bge.n	b63f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b63ec:	f7ff f849 	bl	b5482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b63f0:	bd08      	pop	{r3, pc}
    return true;
   b63f2:	2001      	movs	r0, #1
   b63f4:	e7fc      	b.n	b63f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b63f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b63f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63fa:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b63fc:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b63fe:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6400:	4419      	add	r1, r3
   b6402:	6883      	ldr	r3, [r0, #8]
   b6404:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6406:	4604      	mov	r4, r0
   b6408:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b640a:	dc12      	bgt.n	b6432 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b640c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b640e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6410:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6412:	1bd2      	subs	r2, r2, r7
   b6414:	4631      	mov	r1, r6
   b6416:	1970      	adds	r0, r6, r5
   b6418:	f001 f8b8 	bl	b758c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b641c:	462a      	mov	r2, r5
   b641e:	4641      	mov	r1, r8
   b6420:	4630      	mov	r0, r6
   b6422:	f001 f8a5 	bl	b7570 <memcpy>
    size_ += n;
   b6426:	6863      	ldr	r3, [r4, #4]
   b6428:	442b      	add	r3, r5
   b642a:	6063      	str	r3, [r4, #4]
    return true;
   b642c:	2001      	movs	r0, #1
}
   b642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6432:	f7ff f826 	bl	b5482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6436:	2800      	cmp	r0, #0
   b6438:	d1e8      	bne.n	b640c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b643a:	e7f8      	b.n	b642e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b643c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b643e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6440:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6444:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6446:	4604      	mov	r4, r0
   b6448:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b644a:	da0b      	bge.n	b6464 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b644c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b644e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6450:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6452:	1b52      	subs	r2, r2, r5
   b6454:	1c48      	adds	r0, r1, #1
   b6456:	f001 f899 	bl	b758c <memmove>
    new(p) T(std::move(value));
   b645a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b645c:	6863      	ldr	r3, [r4, #4]
   b645e:	3301      	adds	r3, #1
   b6460:	6063      	str	r3, [r4, #4]
}
   b6462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6464:	3101      	adds	r1, #1
   b6466:	f7ff f80c 	bl	b5482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b646a:	2800      	cmp	r0, #0
   b646c:	d1ee      	bne.n	b644c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b646e:	e7f8      	b.n	b6462 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6470:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6472:	6841      	ldr	r1, [r0, #4]
   b6474:	f7ff bfe2 	b.w	b643c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6478 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b647c:	4604      	mov	r4, r0
   b647e:	461d      	mov	r5, r3
   b6480:	460f      	mov	r7, r1
   b6482:	ab01      	add	r3, sp, #4
   b6484:	4690      	mov	r8, r2
   b6486:	460a      	mov	r2, r1
   b6488:	e9d0 0100 	ldrd	r0, r1, [r0]
   b648c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6490:	f7ff fb3c 	bl	b5b0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6494:	1cae      	adds	r6, r5, #2
   b6496:	6863      	ldr	r3, [r4, #4]
   b6498:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b649a:	f1b9 0f00 	cmp.w	r9, #0
   b649e:	d126      	bne.n	b64ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b64a0:	b328      	cbz	r0, b64ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b64a2:	4433      	add	r3, r6
   b64a4:	1a1b      	subs	r3, r3, r0
   b64a6:	2bff      	cmp	r3, #255	; 0xff
   b64a8:	d809      	bhi.n	b64be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b64aa:	9901      	ldr	r1, [sp, #4]
   b64ac:	4620      	mov	r0, r4
   b64ae:	f7ff fe89 	bl	b61c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b64b2:	6861      	ldr	r1, [r4, #4]
   b64b4:	4620      	mov	r0, r4
   b64b6:	4431      	add	r1, r6
   b64b8:	f7ff ff94 	bl	b63e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b64bc:	b918      	cbnz	r0, b64c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b64be:	6860      	ldr	r0, [r4, #4]
}
   b64c0:	b003      	add	sp, #12
   b64c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b64c6:	1c6a      	adds	r2, r5, #1
   b64c8:	9901      	ldr	r1, [sp, #4]
   b64ca:	b2d2      	uxtb	r2, r2
   b64cc:	4620      	mov	r0, r4
   b64ce:	f7ff ffb5 	bl	b643c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b64d2:	9901      	ldr	r1, [sp, #4]
   b64d4:	463a      	mov	r2, r7
   b64d6:	3101      	adds	r1, #1
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff ffaf 	bl	b643c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b64de:	9901      	ldr	r1, [sp, #4]
   b64e0:	462b      	mov	r3, r5
   b64e2:	4642      	mov	r2, r8
   b64e4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b64e6:	4620      	mov	r0, r4
   b64e8:	f7ff ff85 	bl	b63f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b64ec:	e7e7      	b.n	b64be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b64ee:	18f1      	adds	r1, r6, r3
   b64f0:	29ff      	cmp	r1, #255	; 0xff
   b64f2:	d8e4      	bhi.n	b64be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b64f4:	4620      	mov	r0, r4
   b64f6:	f7ff ff75 	bl	b63e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b64fa:	2800      	cmp	r0, #0
   b64fc:	d0df      	beq.n	b64be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b64fe:	1c69      	adds	r1, r5, #1
   b6500:	b2c9      	uxtb	r1, r1
   b6502:	4620      	mov	r0, r4
   b6504:	f7ff ffb4 	bl	b6470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6508:	4639      	mov	r1, r7
   b650a:	4620      	mov	r0, r4
   b650c:	f7ff ffb0 	bl	b6470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6510:	6861      	ldr	r1, [r4, #4]
   b6512:	462b      	mov	r3, r5
   b6514:	4642      	mov	r2, r8
   b6516:	e7e6      	b.n	b64e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6518 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6518:	b430      	push	{r4, r5}
   b651a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b651e:	b11a      	cbz	r2, b6528 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6520:	9502      	str	r5, [sp, #8]
}
   b6522:	bc30      	pop	{r4, r5}
   b6524:	f7ff bfa8 	b.w	b6478 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6528:	6840      	ldr	r0, [r0, #4]
}
   b652a:	bc30      	pop	{r4, r5}
   b652c:	4770      	bx	lr

000b652e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b652e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6530:	2300      	movs	r3, #0
   b6532:	e9c0 3300 	strd	r3, r3, [r0]
   b6536:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6538:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b653a:	9300      	str	r3, [sp, #0]
   b653c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b653e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6542:	4619      	mov	r1, r3
   b6544:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6548:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b654a:	f7ff ffe5 	bl	b6518 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b654e:	4620      	mov	r0, r4
   b6550:	b004      	add	sp, #16
   b6552:	bd10      	pop	{r4, pc}

000b6554 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6554:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6558:	4604      	mov	r4, r0
   b655a:	460d      	mov	r5, r1
   b655c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b655e:	d914      	bls.n	b658a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6560:	4290      	cmp	r0, r2
   b6562:	d213      	bcs.n	b658c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6564:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6568:	1a75      	subs	r5, r6, r1
   b656a:	f1a1 0708 	sub.w	r7, r1, #8
   b656e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6570:	42b7      	cmp	r7, r6
   b6572:	d018      	beq.n	b65a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6574:	b11c      	cbz	r4, b657e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6576:	4631      	mov	r1, r6
   b6578:	4620      	mov	r0, r4
   b657a:	f7ff fea8 	bl	b62ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b657e:	1d30      	adds	r0, r6, #4
   b6580:	f7fe fe36 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6584:	3e08      	subs	r6, #8
   b6586:	3c08      	subs	r4, #8
   b6588:	e7f2      	b.n	b6570 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b658a:	d00c      	beq.n	b65a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b658c:	42b5      	cmp	r5, r6
   b658e:	d00a      	beq.n	b65a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6590:	b11c      	cbz	r4, b659a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6592:	4629      	mov	r1, r5
   b6594:	4620      	mov	r0, r4
   b6596:	f7ff fe9a 	bl	b62ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b659a:	1d28      	adds	r0, r5, #4
   b659c:	f7fe fe28 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b65a0:	3508      	adds	r5, #8
   b65a2:	3408      	adds	r4, #8
   b65a4:	e7f2      	b.n	b658c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b65a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b65a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b65aa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b65ac:	6846      	ldr	r6, [r0, #4]
   b65ae:	4668      	mov	r0, sp
   b65b0:	f7ff fe8d 	bl	b62ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b65b4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b65b8:	429f      	cmp	r7, r3
   b65ba:	db12      	blt.n	b65e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b65bc:	3701      	adds	r7, #1
        if (n > 0) {
   b65be:	2f00      	cmp	r7, #0
   b65c0:	dd29      	ble.n	b6616 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b65c2:	00f8      	lsls	r0, r7, #3
   b65c4:	f7fe fdd0 	bl	b5168 <malloc>
            if (!d) {
   b65c8:	4605      	mov	r5, r0
   b65ca:	b1f0      	cbz	r0, b660a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b65cc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b65d0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b65d4:	f7ff ffbe 	bl	b6554 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b65d8:	6820      	ldr	r0, [r4, #0]
   b65da:	f7fe fdcd 	bl	b5178 <free>
        data_ = d;
   b65de:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b65e0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b65e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b65e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b65e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b65ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b65ee:	4631      	mov	r1, r6
   b65f0:	f106 0008 	add.w	r0, r6, #8
   b65f4:	f7ff ffae 	bl	b6554 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b65f8:	b11e      	cbz	r6, b6602 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b65fa:	4669      	mov	r1, sp
   b65fc:	4630      	mov	r0, r6
   b65fe:	f7ff fe66 	bl	b62ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6602:	6863      	ldr	r3, [r4, #4]
   b6604:	3301      	adds	r3, #1
   b6606:	6063      	str	r3, [r4, #4]
    return true;
   b6608:	2501      	movs	r5, #1
   b660a:	a801      	add	r0, sp, #4
   b660c:	f7fe fdf0 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6610:	4628      	mov	r0, r5
   b6612:	b003      	add	sp, #12
   b6614:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6616:	2500      	movs	r5, #0
   b6618:	e7de      	b.n	b65d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b661a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b661a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b661c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6620:	4605      	mov	r5, r0
   b6622:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6624:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6628:	42a6      	cmp	r6, r4
   b662a:	d005      	beq.n	b6638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b662c:	4639      	mov	r1, r7
   b662e:	4620      	mov	r0, r4
   b6630:	f7ff fd17 	bl	b6062 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6634:	b108      	cbz	r0, b663a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6636:	b914      	cbnz	r4, b663e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b663a:	3408      	adds	r4, #8
   b663c:	e7f4      	b.n	b6628 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b663e:	1d20      	adds	r0, r4, #4
   b6640:	f7fe fdd6 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6644:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6648:	f104 0108 	add.w	r1, r4, #8
   b664c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6650:	4620      	mov	r0, r4
   b6652:	f7ff ff7f 	bl	b6554 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6656:	686b      	ldr	r3, [r5, #4]
   b6658:	3b01      	subs	r3, #1
   b665a:	606b      	str	r3, [r5, #4]
    return true;
   b665c:	e7ec      	b.n	b6638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6660 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6664:	4605      	mov	r5, r0
   b6666:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6668:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b666a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b666c:	f7ff faba 	bl	b5be4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6670:	682e      	ldr	r6, [r5, #0]
   b6672:	1ef3      	subs	r3, r6, #3
   b6674:	2b0d      	cmp	r3, #13
   b6676:	d83c      	bhi.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6678:	e8df f013 	tbh	[pc, r3, lsl #1]
   b667c:	0053000e 	.word	0x0053000e
   b6680:	00d1003b 	.word	0x00d1003b
   b6684:	003b003b 	.word	0x003b003b
   b6688:	003b003b 	.word	0x003b003b
   b668c:	009b003b 	.word	0x009b003b
   b6690:	009b009b 	.word	0x009b009b
   b6694:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b6698:	a804      	add	r0, sp, #16
   b669a:	f7ff fcad 	bl	b5ff8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b669e:	9b04      	ldr	r3, [sp, #16]
   b66a0:	89aa      	ldrh	r2, [r5, #12]
   b66a2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b66a4:	6869      	ldr	r1, [r5, #4]
   b66a6:	9804      	ldr	r0, [sp, #16]
   b66a8:	3108      	adds	r1, #8
   b66aa:	3002      	adds	r0, #2
   b66ac:	f7ff fab4 	bl	b5c18 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b66b0:	a904      	add	r1, sp, #16
   b66b2:	a806      	add	r0, sp, #24
   b66b4:	f7ff fe0b 	bl	b62ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b66b8:	a906      	add	r1, sp, #24
   b66ba:	f104 0018 	add.w	r0, r4, #24
   b66be:	f7ff ff73 	bl	b65a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b66c2:	4605      	mov	r5, r0
   b66c4:	a807      	add	r0, sp, #28
   b66c6:	f7fe fd93 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66ca:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b66cc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b66ce:	b9b5      	cbnz	r5, b66fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b66d0:	4b5d      	ldr	r3, [pc, #372]	; (b6848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b66d2:	495e      	ldr	r1, [pc, #376]	; (b684c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b66d4:	9300      	str	r3, [sp, #0]
   b66d6:	2032      	movs	r0, #50	; 0x32
   b66d8:	462b      	mov	r3, r5
   b66da:	aa06      	add	r2, sp, #24
   b66dc:	9507      	str	r5, [sp, #28]
   b66de:	f7fe fca7 	bl	b5030 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b66e2:	9b04      	ldr	r3, [sp, #16]
   b66e4:	4629      	mov	r1, r5
   b66e6:	8818      	ldrh	r0, [r3, #0]
   b66e8:	f7fe fbf8 	bl	b4edc <hal_ble_gap_disconnect>
   b66ec:	a805      	add	r0, sp, #20
   b66ee:	f7fe fd7f 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b66f2:	a803      	add	r0, sp, #12
   b66f4:	f7ff fa84 	bl	b5c00 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b66f8:	b00e      	add	sp, #56	; 0x38
   b66fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b66fe:	4a54      	ldr	r2, [pc, #336]	; (b6850 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6700:	9200      	str	r2, [sp, #0]
   b6702:	2300      	movs	r3, #0
   b6704:	4951      	ldr	r1, [pc, #324]	; (b684c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6706:	9307      	str	r3, [sp, #28]
   b6708:	aa06      	add	r2, sp, #24
   b670a:	2001      	movs	r0, #1
   b670c:	f7fe fc90 	bl	b5030 <log_message>
                if (impl->connectedCallback_) {
   b6710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6712:	2b00      	cmp	r3, #0
   b6714:	d0ea      	beq.n	b66ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b6716:	a904      	add	r1, sp, #16
   b6718:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b671c:	f7ff fe59 	bl	b63d2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6720:	e7e4      	b.n	b66ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6722:	89a9      	ldrh	r1, [r5, #12]
   b6724:	4620      	mov	r0, r4
   b6726:	f7ff fbbf 	bl	b5ea8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b672a:	4606      	mov	r6, r0
   b672c:	2800      	cmp	r0, #0
   b672e:	d0e0      	beq.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b6730:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6732:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6736:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b673a:	8029      	strh	r1, [r5, #0]
   b673c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6740:	429a      	cmp	r2, r3
   b6742:	d003      	beq.n	b674c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b6744:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6748:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b674a:	e7f9      	b.n	b6740 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b674c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6750:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6754:	45b8      	cmp	r8, r7
   b6756:	d004      	beq.n	b6762 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b6758:	1d38      	adds	r0, r7, #4
   b675a:	f7fe fd49 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b675e:	3708      	adds	r7, #8
   b6760:	e7f8      	b.n	b6754 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b6762:	2300      	movs	r3, #0
   b6764:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6766:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b676a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b676e:	45b8      	cmp	r8, r7
   b6770:	d004      	beq.n	b677c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b6772:	1d38      	adds	r0, r7, #4
   b6774:	f7fe fd3c 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6778:	3708      	adds	r7, #8
   b677a:	e7f8      	b.n	b676e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b677c:	2300      	movs	r3, #0
   b677e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6780:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b6782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6784:	b123      	cbz	r3, b6790 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b6786:	4631      	mov	r1, r6
   b6788:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b678c:	f7ff fe21 	bl	b63d2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6790:	2300      	movs	r3, #0
   b6792:	2220      	movs	r2, #32
   b6794:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6798:	4a2e      	ldr	r2, [pc, #184]	; (b6854 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b679a:	9200      	str	r2, [sp, #0]
   b679c:	492b      	ldr	r1, [pc, #172]	; (b684c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b679e:	aa06      	add	r2, sp, #24
   b67a0:	2001      	movs	r0, #1
   b67a2:	f7fe fc45 	bl	b5030 <log_message>
                    impl->peers_.removeOne(*peer);
   b67a6:	4631      	mov	r1, r6
   b67a8:	f104 0018 	add.w	r0, r4, #24
   b67ac:	f7ff ff35 	bl	b661a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b67b0:	e79f      	b.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b67b2:	89a9      	ldrh	r1, [r5, #12]
   b67b4:	4620      	mov	r0, r4
   b67b6:	f7ff fb77 	bl	b5ea8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b67ba:	2800      	cmp	r0, #0
   b67bc:	d099      	beq.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b67be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b67c0:	2b00      	cmp	r3, #0
   b67c2:	d096      	beq.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b67c4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b67c6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b67c8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b67cc:	d001      	beq.n	b67d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b67ce:	2e10      	cmp	r6, #16
   b67d0:	d117      	bne.n	b6802 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b67d2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b67d4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b67d6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b67d8:	2506      	movs	r5, #6
                        };
   b67da:	f88d 3015 	strb.w	r3, [sp, #21]
   b67de:	9104      	str	r1, [sp, #16]
   b67e0:	f88d 2014 	strb.w	r2, [sp, #20]
   b67e4:	9006      	str	r0, [sp, #24]
   b67e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b67ea:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b67ec:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b67f0:	9508      	str	r5, [sp, #32]
   b67f2:	e883 0003 	stmia.w	r3, {r0, r1}
   b67f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b67f8:	a906      	add	r1, sp, #24
   b67fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b67fe:	4798      	blx	r3
   b6800:	e777      	b.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b6802:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6804:	bf01      	itttt	eq
   b6806:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6808:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b680a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b680e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b6810:	bf0f      	iteee	eq
   b6812:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b6816:	461a      	movne	r2, r3
   b6818:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b681a:	461d      	movne	r5, r3
   b681c:	e7dd      	b.n	b67da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b681e:	89a9      	ldrh	r1, [r5, #12]
   b6820:	4620      	mov	r0, r4
   b6822:	f7ff fb41 	bl	b5ea8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b6826:	4601      	mov	r1, r0
   b6828:	2800      	cmp	r0, #0
   b682a:	f43f af62 	beq.w	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b682e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b6830:	2b00      	cmp	r3, #0
   b6832:	f43f af5e 	beq.w	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b6836:	686b      	ldr	r3, [r5, #4]
   b6838:	9306      	str	r3, [sp, #24]
   b683a:	aa06      	add	r2, sp, #24
   b683c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b683e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6842:	4798      	blx	r3
   b6844:	e755      	b.n	b66f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6846:	bf00      	nop
   b6848:	000b7a0c 	.word	0x000b7a0c
   b684c:	000b798b 	.word	0x000b798b
   b6850:	000b7a32 	.word	0x000b7a32
   b6854:	000b7a4f 	.word	0x000b7a4f

000b6858 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6858:	b538      	push	{r3, r4, r5, lr}
   b685a:	4605      	mov	r5, r0
   b685c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b685e:	f7fe ff19 	bl	b5694 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6862:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6864:	68a2      	ldr	r2, [r4, #8]
   b6866:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6868:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b686a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b686c:	68e2      	ldr	r2, [r4, #12]
   b686e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6870:	60e3      	str	r3, [r4, #12]
      }
   b6872:	bd38      	pop	{r3, r4, r5, pc}

000b6874 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6874:	b570      	push	{r4, r5, r6, lr}
   b6876:	4604      	mov	r4, r0
   b6878:	b08c      	sub	sp, #48	; 0x30
   b687a:	460e      	mov	r6, r1
   b687c:	9201      	str	r2, [sp, #4]
   b687e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6880:	f7ff faf2 	bl	b5e68 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6884:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b6886:	9901      	ldr	r1, [sp, #4]
   b6888:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b688c:	f000 fc07 	bl	b709e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6890:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6894:	b1cd      	cbz	r5, b68ca <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6896:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6898:	9502      	str	r5, [sp, #8]
   b689a:	a902      	add	r1, sp, #8
   b689c:	a804      	add	r0, sp, #16
   b689e:	9303      	str	r3, [sp, #12]
   b68a0:	f7ff fcde 	bl	b6260 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b68a4:	2300      	movs	r3, #0
	__x.swap(*this);
   b68a6:	a908      	add	r1, sp, #32
   b68a8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b68aa:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b68ac:	f7ff ffd4 	bl	b6858 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b68b0:	4631      	mov	r1, r6
   b68b2:	a808      	add	r0, sp, #32
   b68b4:	f7ff ffd0 	bl	b6858 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b68b8:	a808      	add	r0, sp, #32
   b68ba:	f7fd ffa8 	bl	b480e <_ZNSt14_Function_baseD1Ev>
   b68be:	a804      	add	r0, sp, #16
   b68c0:	f7fd ffa5 	bl	b480e <_ZNSt14_Function_baseD1Ev>
    }
   b68c4:	4620      	mov	r0, r4
   b68c6:	b00c      	add	sp, #48	; 0x30
   b68c8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b68ca:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b68cc:	e7ea      	b.n	b68a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b68d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b68d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68d4:	b087      	sub	sp, #28
   b68d6:	461d      	mov	r5, r3
   b68d8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b68dc:	4680      	mov	r8, r0
   b68de:	468b      	mov	fp, r1
   b68e0:	4692      	mov	sl, r2
   b68e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   b68e4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b68e6:	2200      	movs	r2, #0
   b68e8:	2068      	movs	r0, #104	; 0x68
   b68ea:	9102      	str	r1, [sp, #8]
   b68ec:	9204      	str	r2, [sp, #16]
   b68ee:	f7fd fbd0 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b68f2:	1e06      	subs	r6, r0, #0
   b68f4:	f106 090c 	add.w	r9, r6, #12
   b68f8:	d018      	beq.n	b692c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b68fa:	2201      	movs	r2, #1
	: _M_impl(__a)
   b68fc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b68fe:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b6902:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b6904:	4a15      	ldr	r2, [pc, #84]	; (b695c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b6906:	f847 2b20 	str.w	r2, [r7], #32
   b690a:	9b03      	ldr	r3, [sp, #12]
   b690c:	9100      	str	r1, [sp, #0]
   b690e:	465a      	mov	r2, fp
   b6910:	4651      	mov	r1, sl
   b6912:	4648      	mov	r0, r9
   b6914:	f7ff ffae 	bl	b6874 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b6918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b691a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b691c:	682b      	ldr	r3, [r5, #0]
   b691e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6922:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b6926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6928:	6823      	ldr	r3, [r4, #0]
   b692a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b692c:	a904      	add	r1, sp, #16
   b692e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6930:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6934:	f7ff fd3c 	bl	b63b0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b6938:	a805      	add	r0, sp, #20
   b693a:	f7fe fc59 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b693e:	f8d8 3000 	ldr.w	r3, [r8]
   b6942:	b93b      	cbnz	r3, b6954 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b6944:	4a06      	ldr	r2, [pc, #24]	; (b6960 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b6946:	4907      	ldr	r1, [pc, #28]	; (b6964 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b6948:	200a      	movs	r0, #10
}
   b694a:	b007      	add	sp, #28
   b694c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6950:	f7fe bb66 	b.w	b5020 <panic_>
}
   b6954:	b007      	add	sp, #28
   b6956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b695a:	bf00      	nop
   b695c:	000b7ac8 	.word	0x000b7ac8
   b6960:	000b4fb1 	.word	0x000b4fb1
   b6964:	000b7974 	.word	0x000b7974

000b6968 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6968:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b696c:	4604      	mov	r4, r0
   b696e:	460d      	mov	r5, r1
   b6970:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6972:	d914      	bls.n	b699e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6974:	4290      	cmp	r0, r2
   b6976:	d213      	bcs.n	b69a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6978:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b697c:	1a75      	subs	r5, r6, r1
   b697e:	f1a1 0708 	sub.w	r7, r1, #8
   b6982:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6984:	42b7      	cmp	r7, r6
   b6986:	d018      	beq.n	b69ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6988:	b11c      	cbz	r4, b6992 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b698a:	4631      	mov	r1, r6
   b698c:	4620      	mov	r0, r4
   b698e:	f7ff fc94 	bl	b62ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6992:	1d30      	adds	r0, r6, #4
   b6994:	f7fe fc2c 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6998:	3e08      	subs	r6, #8
   b699a:	3c08      	subs	r4, #8
   b699c:	e7f2      	b.n	b6984 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b699e:	d00c      	beq.n	b69ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b69a0:	42b5      	cmp	r5, r6
   b69a2:	d00a      	beq.n	b69ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b69a4:	b11c      	cbz	r4, b69ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b69a6:	4629      	mov	r1, r5
   b69a8:	4620      	mov	r0, r4
   b69aa:	f7ff fc86 	bl	b62ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b69ae:	1d28      	adds	r0, r5, #4
   b69b0:	f7fe fc1e 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b69b4:	3508      	adds	r5, #8
   b69b6:	3408      	adds	r4, #8
   b69b8:	e7f2      	b.n	b69a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b69ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b69bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b69bc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b69be:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b69c0:	4605      	mov	r5, r0
        if (n > 0) {
   b69c2:	dd11      	ble.n	b69e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b69c4:	00f0      	lsls	r0, r6, #3
   b69c6:	f7fe fbcf 	bl	b5168 <malloc>
            if (!d) {
   b69ca:	4604      	mov	r4, r0
   b69cc:	b158      	cbz	r0, b69e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b69ce:	e9d5 1200 	ldrd	r1, r2, [r5]
   b69d2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b69d6:	f7ff ffc7 	bl	b6968 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b69da:	6828      	ldr	r0, [r5, #0]
   b69dc:	f7fe fbcc 	bl	b5178 <free>
        data_ = d;
   b69e0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b69e2:	60ae      	str	r6, [r5, #8]
        return true;
   b69e4:	2001      	movs	r0, #1
    }
   b69e6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b69e8:	2400      	movs	r4, #0
   b69ea:	e7f6      	b.n	b69da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b69ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b69ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b69ee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b69f0:	6845      	ldr	r5, [r0, #4]
   b69f2:	4668      	mov	r0, sp
   b69f4:	f7ff fc61 	bl	b62ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b69f8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b69fc:	4299      	cmp	r1, r3
   b69fe:	da10      	bge.n	b6a22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6a00:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6a02:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6a04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6a08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6a0c:	4629      	mov	r1, r5
   b6a0e:	f105 0008 	add.w	r0, r5, #8
   b6a12:	f7ff ffa9 	bl	b6968 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6a16:	b98d      	cbnz	r5, b6a3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6a18:	6863      	ldr	r3, [r4, #4]
   b6a1a:	3301      	adds	r3, #1
   b6a1c:	6063      	str	r3, [r4, #4]
    return true;
   b6a1e:	2601      	movs	r6, #1
   b6a20:	e006      	b.n	b6a30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6a22:	3101      	adds	r1, #1
   b6a24:	4620      	mov	r0, r4
   b6a26:	f7ff ffc9 	bl	b69bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6a2a:	4606      	mov	r6, r0
   b6a2c:	2800      	cmp	r0, #0
   b6a2e:	d1e7      	bne.n	b6a00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6a30:	a801      	add	r0, sp, #4
   b6a32:	f7fe fbdd 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6a36:	4630      	mov	r0, r6
   b6a38:	b002      	add	sp, #8
   b6a3a:	bd70      	pop	{r4, r5, r6, pc}
   b6a3c:	4669      	mov	r1, sp
   b6a3e:	4628      	mov	r0, r5
   b6a40:	f7ff fc3b 	bl	b62ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6a44:	e7e8      	b.n	b6a18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6a46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6a46:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a4a:	4604      	mov	r4, r0
   b6a4c:	460d      	mov	r5, r1
   b6a4e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6a50:	d914      	bls.n	b6a7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6a52:	4290      	cmp	r0, r2
   b6a54:	d213      	bcs.n	b6a7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6a56:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6a5a:	1a75      	subs	r5, r6, r1
   b6a5c:	f1a1 0708 	sub.w	r7, r1, #8
   b6a60:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6a62:	42b7      	cmp	r7, r6
   b6a64:	d018      	beq.n	b6a98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6a66:	b11c      	cbz	r4, b6a70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6a68:	4631      	mov	r1, r6
   b6a6a:	4620      	mov	r0, r4
   b6a6c:	f7ff fc17 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6a70:	1d30      	adds	r0, r6, #4
   b6a72:	f7fe fbbd 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6a76:	3e08      	subs	r6, #8
   b6a78:	3c08      	subs	r4, #8
   b6a7a:	e7f2      	b.n	b6a62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6a7c:	d00c      	beq.n	b6a98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6a7e:	42b5      	cmp	r5, r6
   b6a80:	d00a      	beq.n	b6a98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6a82:	b11c      	cbz	r4, b6a8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6a84:	4629      	mov	r1, r5
   b6a86:	4620      	mov	r0, r4
   b6a88:	f7ff fc09 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6a8c:	1d28      	adds	r0, r5, #4
   b6a8e:	f7fe fbaf 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6a92:	3508      	adds	r5, #8
   b6a94:	3408      	adds	r4, #8
   b6a96:	e7f2      	b.n	b6a7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6a9a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6a9c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6a9e:	4605      	mov	r5, r0
        if (n > 0) {
   b6aa0:	dd11      	ble.n	b6ac6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6aa2:	00f0      	lsls	r0, r6, #3
   b6aa4:	f7fe fb60 	bl	b5168 <malloc>
            if (!d) {
   b6aa8:	4604      	mov	r4, r0
   b6aaa:	b158      	cbz	r0, b6ac4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6aac:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6ab0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6ab4:	f7ff ffc7 	bl	b6a46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6ab8:	6828      	ldr	r0, [r5, #0]
   b6aba:	f7fe fb5d 	bl	b5178 <free>
        data_ = d;
   b6abe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6ac0:	60ae      	str	r6, [r5, #8]
        return true;
   b6ac2:	2001      	movs	r0, #1
    }
   b6ac4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6ac6:	2400      	movs	r4, #0
   b6ac8:	e7f6      	b.n	b6ab8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6aca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6acc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6ace:	6845      	ldr	r5, [r0, #4]
   b6ad0:	4668      	mov	r0, sp
   b6ad2:	f7ff fbe4 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6ad6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6ada:	4299      	cmp	r1, r3
   b6adc:	da10      	bge.n	b6b00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6ade:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6ae0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6ae2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6ae6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6aea:	4629      	mov	r1, r5
   b6aec:	f105 0008 	add.w	r0, r5, #8
   b6af0:	f7ff ffa9 	bl	b6a46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6af4:	b98d      	cbnz	r5, b6b1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6af6:	6863      	ldr	r3, [r4, #4]
   b6af8:	3301      	adds	r3, #1
   b6afa:	6063      	str	r3, [r4, #4]
    return true;
   b6afc:	2601      	movs	r6, #1
   b6afe:	e006      	b.n	b6b0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b00:	3101      	adds	r1, #1
   b6b02:	4620      	mov	r0, r4
   b6b04:	f7ff ffc9 	bl	b6a9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6b08:	4606      	mov	r6, r0
   b6b0a:	2800      	cmp	r0, #0
   b6b0c:	d1e7      	bne.n	b6ade <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6b0e:	a801      	add	r0, sp, #4
   b6b10:	f7fe fb6e 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6b14:	4630      	mov	r0, r6
   b6b16:	b002      	add	sp, #8
   b6b18:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6b1a:	4669      	mov	r1, sp
   b6b1c:	4628      	mov	r0, r5
   b6b1e:	f7ff fbbe 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6b22:	e7e8      	b.n	b6af6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b28:	4617      	mov	r7, r2
   b6b2a:	b0a1      	sub	sp, #132	; 0x84
   b6b2c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b6b2e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6b30:	460e      	mov	r6, r1
    WiringBleLock lk;
   b6b32:	f7ff f857 	bl	b5be4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6b36:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b6b38:	7923      	ldrb	r3, [r4, #4]
   b6b3a:	b953      	cbnz	r3, b6b52 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b6b3c:	4639      	mov	r1, r7
   b6b3e:	4640      	mov	r0, r8
   b6b40:	f7ff fbad 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b6b44:	a80a      	add	r0, sp, #40	; 0x28
   b6b46:	f7ff f85b 	bl	b5c00 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b6b4a:	4640      	mov	r0, r8
   b6b4c:	b021      	add	sp, #132	; 0x84
   b6b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6b52:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6b54:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6b58:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b6b5c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b6b5e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b6b62:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b6b66:	9b03      	ldr	r3, [sp, #12]
   b6b68:	429d      	cmp	r5, r3
   b6b6a:	d021      	beq.n	b6bb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b6b6c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6b70:	4658      	mov	r0, fp
   b6b72:	f109 0114 	add.w	r1, r9, #20
   b6b76:	f7ff f8ec 	bl	b5d52 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b6b7a:	b1b8      	cbz	r0, b6bac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b6b7c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6b80:	4650      	mov	r0, sl
   b6b82:	f7ff f8e6 	bl	b5d52 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6b86:	b188      	cbz	r0, b6bac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6b88:	6823      	ldr	r3, [r4, #0]
   b6b8a:	f8d9 2000 	ldr.w	r2, [r9]
   b6b8e:	4053      	eors	r3, r2
   b6b90:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6b94:	d10a      	bne.n	b6bac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6b96:	2220      	movs	r2, #32
   b6b98:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b6b9c:	4a5e      	ldr	r2, [pc, #376]	; (b6d18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b6b9e:	9200      	str	r2, [sp, #0]
   b6ba0:	aa15      	add	r2, sp, #84	; 0x54
   b6ba2:	495e      	ldr	r1, [pc, #376]	; (b6d1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b6ba4:	2032      	movs	r0, #50	; 0x32
   b6ba6:	f7fe fa43 	bl	b5030 <log_message>
   b6baa:	e7c7      	b.n	b6b3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b6bac:	3508      	adds	r5, #8
   b6bae:	e7da      	b.n	b6b66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6bb0:	4650      	mov	r0, sl
   b6bb2:	f7ff f89f 	bl	b5cf4 <_ZNK8particle7BleUuid7isValidEv>
   b6bb6:	b960      	cbnz	r0, b6bd2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b6bb8:	4959      	ldr	r1, [pc, #356]	; (b6d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b6bba:	2201      	movs	r2, #1
   b6bbc:	a815      	add	r0, sp, #84	; 0x54
   b6bbe:	ad15      	add	r5, sp, #84	; 0x54
   b6bc0:	f7ff f866 	bl	b5c90 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b6bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bc6:	46d4      	mov	ip, sl
   b6bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6bcc:	682b      	ldr	r3, [r5, #0]
   b6bce:	f8cc 3000 	str.w	r3, [ip]
   b6bd2:	6833      	ldr	r3, [r6, #0]
   b6bd4:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6bd8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b6bdc:	455d      	cmp	r5, fp
   b6bde:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b6be0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b6be2:	d06e      	beq.n	b6cc2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b6be4:	f855 0b08 	ldr.w	r0, [r5], #8
   b6be8:	f7ff f8b3 	bl	b5d52 <_ZNK8particle7BleUuideqERKS0_>
   b6bec:	2800      	cmp	r0, #0
   b6bee:	d0f5      	beq.n	b6bdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6bf0:	f104 0a14 	add.w	sl, r4, #20
   b6bf4:	4650      	mov	r0, sl
   b6bf6:	f7ff f87d 	bl	b5cf4 <_ZNK8particle7BleUuid7isValidEv>
   b6bfa:	b988      	cbnz	r0, b6c20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b6bfc:	4b49      	ldr	r3, [pc, #292]	; (b6d24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6bfe:	4948      	ldr	r1, [pc, #288]	; (b6d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6c00:	881a      	ldrh	r2, [r3, #0]
   b6c02:	3201      	adds	r2, #1
   b6c04:	b292      	uxth	r2, r2
   b6c06:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6c08:	a815      	add	r0, sp, #84	; 0x54
   b6c0a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b6c0c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6c0e:	f7ff f868 	bl	b5ce2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b6c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c14:	46d4      	mov	ip, sl
   b6c16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6c1a:	682b      	ldr	r3, [r5, #0]
   b6c1c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b6c20:	4b41      	ldr	r3, [pc, #260]	; (b6d28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b6c22:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b6c24:	2228      	movs	r2, #40	; 0x28
   b6c26:	2100      	movs	r1, #0
   b6c28:	a816      	add	r0, sp, #88	; 0x58
   b6c2a:	f000 fcc9 	bl	b75c0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b6c2e:	4651      	mov	r1, sl
   b6c30:	a804      	add	r0, sp, #16
   b6c32:	f7ff f871 	bl	b5d18 <_ZN8particle7BleUuid7halUUIDEv>
   b6c36:	ab04      	add	r3, sp, #16
   b6c38:	aa18      	add	r2, sp, #96	; 0x60
   b6c3a:	f10d 0c20 	add.w	ip, sp, #32
   b6c3e:	6818      	ldr	r0, [r3, #0]
   b6c40:	6859      	ldr	r1, [r3, #4]
   b6c42:	4615      	mov	r5, r2
   b6c44:	c503      	stmia	r5!, {r0, r1}
   b6c46:	3308      	adds	r3, #8
   b6c48:	4563      	cmp	r3, ip
   b6c4a:	462a      	mov	r2, r5
   b6c4c:	d1f7      	bne.n	b6c3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b6c4e:	6818      	ldr	r0, [r3, #0]
   b6c50:	6028      	str	r0, [r5, #0]
    return value_;
   b6c52:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b6c54:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6c58:	f8d9 3000 	ldr.w	r3, [r9]
   b6c5c:	8a9b      	ldrh	r3, [r3, #20]
   b6c5e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b6c62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6c64:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b6c66:	4b31      	ldr	r3, [pc, #196]	; (b6d2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6c68:	2200      	movs	r2, #0
   b6c6a:	1da1      	adds	r1, r4, #6
   b6c6c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b6c6e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6c72:	f7fe f965 	bl	b4f40 <hal_ble_gatt_server_add_characteristic>
   b6c76:	2800      	cmp	r0, #0
   b6c78:	f47f af60 	bne.w	b6b3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b6c7c:	2301      	movs	r3, #1
   b6c7e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6c80:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b6c82:	4639      	mov	r1, r7
        return characteristics_;
   b6c84:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b6c86:	a80d      	add	r0, sp, #52	; 0x34
   b6c88:	f7ff fb09 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	a90d      	add	r1, sp, #52	; 0x34
   b6c90:	f7ff ff1b 	bl	b6aca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6c94:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6c96:	a80e      	add	r0, sp, #56	; 0x38
   b6c98:	f7fe faaa 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c9c:	2c00      	cmp	r4, #0
   b6c9e:	f47f af4d 	bne.w	b6b3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b6ca2:	2320      	movs	r3, #32
   b6ca4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6ca8:	4b21      	ldr	r3, [pc, #132]	; (b6d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b6caa:	9300      	str	r3, [sp, #0]
   b6cac:	aa0d      	add	r2, sp, #52	; 0x34
   b6cae:	4623      	mov	r3, r4
   b6cb0:	e777      	b.n	b6ba2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b6cb2:	4639      	mov	r1, r7
   b6cb4:	4640      	mov	r0, r8
   b6cb6:	f7ff faf2 	bl	b629e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6cba:	a80c      	add	r0, sp, #48	; 0x30
   b6cbc:	f7fe fa98 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cc0:	e740      	b.n	b6b44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b6cc2:	a80b      	add	r0, sp, #44	; 0x2c
   b6cc4:	f7ff f974 	bl	b5fb0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b6cc8:	4651      	mov	r1, sl
   b6cca:	a815      	add	r0, sp, #84	; 0x54
   b6ccc:	f7ff f824 	bl	b5d18 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b6cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6cd2:	2300      	movs	r3, #0
   b6cd4:	3214      	adds	r2, #20
   b6cd6:	a915      	add	r1, sp, #84	; 0x54
   b6cd8:	2001      	movs	r0, #1
   b6cda:	f7fe f909 	bl	b4ef0 <hal_ble_gatt_server_add_service>
   b6cde:	2800      	cmp	r0, #0
   b6ce0:	d1e7      	bne.n	b6cb2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b6ce2:	6835      	ldr	r5, [r6, #0]
   b6ce4:	a90b      	add	r1, sp, #44	; 0x2c
   b6ce6:	a80d      	add	r0, sp, #52	; 0x34
   b6ce8:	f7ff fae7 	bl	b62ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6cec:	4628      	mov	r0, r5
   b6cee:	a90d      	add	r1, sp, #52	; 0x34
   b6cf0:	f7ff fe7c 	bl	b69ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b6cf4:	4605      	mov	r5, r0
   b6cf6:	a80e      	add	r0, sp, #56	; 0x38
   b6cf8:	f7fe fa7a 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cfc:	2d00      	cmp	r5, #0
   b6cfe:	d0d8      	beq.n	b6cb2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6d00:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b6d02:	6853      	ldr	r3, [r2, #4]
   b6d04:	6812      	ldr	r2, [r2, #0]
   b6d06:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b6d0a:	3b01      	subs	r3, #1
   b6d0c:	a80c      	add	r0, sp, #48	; 0x30
   b6d0e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b6d12:	f7fe fa6d 	bl	b51f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d16:	e76b      	b.n	b6bf0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6d18:	000b7a6e 	.word	0x000b7a6e
   b6d1c:	000b798b 	.word	0x000b798b
   b6d20:	000b7b2a 	.word	0x000b7b2a
   b6d24:	2003e6ec 	.word	0x2003e6ec
   b6d28:	002c0003 	.word	0x002c0003
   b6d2c:	000b6149 	.word	0x000b6149
   b6d30:	000b7a99 	.word	0x000b7a99

000b6d34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6d34:	4802      	ldr	r0, [pc, #8]	; (b6d40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6d36:	2300      	movs	r3, #0
   b6d38:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6d3a:	f7fe b865 	b.w	b4e08 <os_mutex_recursive_create>
   b6d3e:	bf00      	nop
   b6d40:	2003e6f0 	.word	0x2003e6f0

000b6d44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d44:	4770      	bx	lr

000b6d46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d46:	7441      	strb	r1, [r0, #17]
}
   b6d48:	4770      	bx	lr

000b6d4a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d4c:	7c00      	ldrb	r0, [r0, #16]
   b6d4e:	f7fd fff3 	bl	b4d38 <hal_usart_available_data_for_write>
}
   b6d52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d56:	bd08      	pop	{r3, pc}

000b6d58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6d58:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6d5a:	7c00      	ldrb	r0, [r0, #16]
   b6d5c:	f7fd ffc4 	bl	b4ce8 <hal_usart_available>
}
   b6d60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d64:	bd08      	pop	{r3, pc}

000b6d66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6d66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6d68:	7c00      	ldrb	r0, [r0, #16]
   b6d6a:	f7fd ffcd 	bl	b4d08 <hal_usart_peek>
}
   b6d6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d72:	bd08      	pop	{r3, pc}

000b6d74 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6d74:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6d76:	7c00      	ldrb	r0, [r0, #16]
   b6d78:	f7fd ffbe 	bl	b4cf8 <hal_usart_read>
}
   b6d7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d80:	bd08      	pop	{r3, pc}

000b6d82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6d82:	7c00      	ldrb	r0, [r0, #16]
   b6d84:	f7fd bfc8 	b.w	b4d18 <hal_usart_flush>

000b6d88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d8a:	7c45      	ldrb	r5, [r0, #17]
{
   b6d8c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d8e:	b12d      	cbz	r5, b6d9c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6d90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6d92:	b003      	add	sp, #12
   b6d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6d98:	f7fd bf9e 	b.w	b4cd8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d9c:	7c00      	ldrb	r0, [r0, #16]
   b6d9e:	9101      	str	r1, [sp, #4]
   b6da0:	f7fd ffca 	bl	b4d38 <hal_usart_available_data_for_write>
   b6da4:	2800      	cmp	r0, #0
   b6da6:	9901      	ldr	r1, [sp, #4]
   b6da8:	dcf2      	bgt.n	b6d90 <_ZN11USARTSerial5writeEh+0x8>
}
   b6daa:	4628      	mov	r0, r5
   b6dac:	b003      	add	sp, #12
   b6dae:	bd30      	pop	{r4, r5, pc}

000b6db0 <_ZN11USARTSerialD0Ev>:
   b6db0:	b510      	push	{r4, lr}
   b6db2:	2114      	movs	r1, #20
   b6db4:	4604      	mov	r4, r0
   b6db6:	f7fd f970 	bl	b409a <_ZdlPvj>
   b6dba:	4620      	mov	r0, r4
   b6dbc:	bd10      	pop	{r4, pc}
	...

000b6dc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6dc0:	b510      	push	{r4, lr}
   b6dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6dc6:	4604      	mov	r4, r0
   b6dc8:	4608      	mov	r0, r1
   b6dca:	4611      	mov	r1, r2
   b6dcc:	2200      	movs	r2, #0
   b6dce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6dd2:	4b04      	ldr	r3, [pc, #16]	; (b6de4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6dd4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6dd6:	2301      	movs	r3, #1
  _serial = serial;
   b6dd8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6dda:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6ddc:	f7fd ffb4 	bl	b4d48 <hal_usart_init_ex>
}
   b6de0:	4620      	mov	r0, r4
   b6de2:	bd10      	pop	{r4, pc}
   b6de4:	000b7b54 	.word	0x000b7b54

000b6de8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6de8:	4b05      	ldr	r3, [pc, #20]	; (b6e00 <_GLOBAL__sub_I_System+0x18>)
   b6dea:	2202      	movs	r2, #2
   b6dec:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6dee:	4b05      	ldr	r3, [pc, #20]	; (b6e04 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6df0:	4a05      	ldr	r2, [pc, #20]	; (b6e08 <_GLOBAL__sub_I_System+0x20>)
   b6df2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6df4:	2000      	movs	r0, #0
   b6df6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6dfa:	f7fe b989 	b.w	b5110 <set_system_mode>
   b6dfe:	bf00      	nop
   b6e00:	2003e704 	.word	0x2003e704
   b6e04:	2003e6f8 	.word	0x2003e6f8
   b6e08:	ffff0000 	.word	0xffff0000

000b6e0c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6e0c:	2100      	movs	r1, #0
   b6e0e:	f7fd bf5b 	b.w	b4cc8 <hal_spi_release>

000b6e12 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6e12:	2100      	movs	r1, #0
   b6e14:	f7fd bf50 	b.w	b4cb8 <hal_spi_acquire>

000b6e18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6e18:	b510      	push	{r4, lr}
   b6e1a:	4604      	mov	r4, r0
   b6e1c:	4608      	mov	r0, r1
{
    _spi = spi;
   b6e1e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6e20:	f7fd ff32 	bl	b4c88 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6e24:	2300      	movs	r3, #0
   b6e26:	6063      	str	r3, [r4, #4]
}
   b6e28:	4620      	mov	r0, r4
   b6e2a:	bd10      	pop	{r4, pc}

000b6e2c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6e2c:	b513      	push	{r0, r1, r4, lr}
   b6e2e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6e30:	7800      	ldrb	r0, [r0, #0]
   b6e32:	f7ff ffee 	bl	b6e12 <_ZN8SPIClass4lockEv.isra.0>
   b6e36:	b958      	cbnz	r0, b6e50 <_ZN8SPIClass5beginEv+0x24>
   b6e38:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6e3a:	9001      	str	r0, [sp, #4]
   b6e3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6e40:	f7fd ff02 	bl	b4c48 <hal_spi_begin>
        unlock();
   b6e44:	9801      	ldr	r0, [sp, #4]
    }
}
   b6e46:	b002      	add	sp, #8
   b6e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6e4c:	f7ff bfde 	b.w	b6e0c <_ZN8SPIClass6unlockEv.isra.0>
   b6e50:	b002      	add	sp, #8
   b6e52:	bd10      	pop	{r4, pc}

000b6e54 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   b6e54:	b513      	push	{r0, r1, r4, lr}
   b6e56:	4604      	mov	r4, r0
    if (!lock())
   b6e58:	7800      	ldrb	r0, [r0, #0]
{
   b6e5a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6e5c:	f7ff ffd9 	bl	b6e12 <_ZN8SPIClass4lockEv.isra.0>
   b6e60:	9901      	ldr	r1, [sp, #4]
   b6e62:	b948      	cbnz	r0, b6e78 <_ZN8SPIClass11setDataModeEh+0x24>
   b6e64:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6e66:	9001      	str	r0, [sp, #4]
   b6e68:	f7fd fef6 	bl	b4c58 <hal_spi_set_data_mode>
        unlock();
   b6e6c:	9801      	ldr	r0, [sp, #4]
    }
}
   b6e6e:	b002      	add	sp, #8
   b6e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6e74:	f7ff bfca 	b.w	b6e0c <_ZN8SPIClass6unlockEv.isra.0>
   b6e78:	b002      	add	sp, #8
   b6e7a:	bd10      	pop	{r4, pc}

000b6e7c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6e7c:	0840      	lsrs	r0, r0, #1
{
   b6e7e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6e80:	6018      	str	r0, [r3, #0]
   b6e82:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6e84:	6818      	ldr	r0, [r3, #0]
   b6e86:	4288      	cmp	r0, r1
   b6e88:	b2e5      	uxtb	r5, r4
   b6e8a:	d906      	bls.n	b6e9a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6e8c:	3401      	adds	r4, #1
   b6e8e:	2c08      	cmp	r4, #8
   b6e90:	d002      	beq.n	b6e98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6e92:	0840      	lsrs	r0, r0, #1
   b6e94:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6e96:	e7f5      	b.n	b6e84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6e98:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6e9c:	5d5b      	ldrb	r3, [r3, r5]
   b6e9e:	7013      	strb	r3, [r2, #0]
}
   b6ea0:	bd30      	pop	{r4, r5, pc}
   b6ea2:	bf00      	nop
   b6ea4:	000b7b7c 	.word	0x000b7b7c

000b6ea8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6eac:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6eae:	2300      	movs	r3, #0
{
   b6eb0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6eb2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6eb4:	9302      	str	r3, [sp, #8]
{
   b6eb6:	460e      	mov	r6, r1
   b6eb8:	4617      	mov	r7, r2
    if (!lock())
   b6eba:	f7ff ffaa 	bl	b6e12 <_ZN8SPIClass4lockEv.isra.0>
   b6ebe:	4605      	mov	r5, r0
   b6ec0:	bb00      	cbnz	r0, b6f04 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6ec2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6ec6:	4601      	mov	r1, r0
   b6ec8:	2214      	movs	r2, #20
   b6eca:	a803      	add	r0, sp, #12
   b6ecc:	f000 fb78 	bl	b75c0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ed0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6ed2:	462a      	mov	r2, r5
   b6ed4:	a903      	add	r1, sp, #12
   b6ed6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ed8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6edc:	f7fd fee4 	bl	b4ca8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6ee0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6ee2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6ee6:	ab02      	add	r3, sp, #8
   b6ee8:	f10d 0207 	add.w	r2, sp, #7
   b6eec:	fb07 f106 	mul.w	r1, r7, r6
   b6ef0:	f7ff ffc4 	bl	b6e7c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6ef4:	7820      	ldrb	r0, [r4, #0]
   b6ef6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6efa:	f7fd feb5 	bl	b4c68 <hal_spi_set_clock_divider>
        unlock();
   b6efe:	7820      	ldrb	r0, [r4, #0]
   b6f00:	f7ff ff84 	bl	b6e0c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6f04:	9802      	ldr	r0, [sp, #8]
   b6f06:	b008      	add	sp, #32
   b6f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6f0c <_ZN8SPIClass15setClockDividerEh>:
{
   b6f0c:	b538      	push	{r3, r4, r5, lr}
   b6f0e:	4604      	mov	r4, r0
    if (!lock())
   b6f10:	7800      	ldrb	r0, [r0, #0]
{
   b6f12:	460d      	mov	r5, r1
    if (!lock())
   b6f14:	f7ff ff7d 	bl	b6e12 <_ZN8SPIClass4lockEv.isra.0>
   b6f18:	4603      	mov	r3, r0
   b6f1a:	b9d0      	cbnz	r0, b6f52 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6f1c:	6861      	ldr	r1, [r4, #4]
   b6f1e:	b199      	cbz	r1, b6f48 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6f20:	4a0c      	ldr	r2, [pc, #48]	; (b6f54 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6f22:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6f26:	4285      	cmp	r5, r0
   b6f28:	d002      	beq.n	b6f30 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6f2a:	3301      	adds	r3, #1
   b6f2c:	2b08      	cmp	r3, #8
   b6f2e:	d1f8      	bne.n	b6f22 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6f30:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6f32:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6f34:	2201      	movs	r2, #1
   b6f36:	40d9      	lsrs	r1, r3
   b6f38:	4620      	mov	r0, r4
   b6f3a:	f7ff ffb5 	bl	b6ea8 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6f3e:	7820      	ldrb	r0, [r4, #0]
}
   b6f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6f44:	f7ff bf62 	b.w	b6e0c <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6f48:	7820      	ldrb	r0, [r4, #0]
   b6f4a:	4629      	mov	r1, r5
   b6f4c:	f7fd fe8c 	bl	b4c68 <hal_spi_set_clock_divider>
   b6f50:	e7f5      	b.n	b6f3e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6f52:	bd38      	pop	{r3, r4, r5, pc}
   b6f54:	000b7b7c 	.word	0x000b7b7c

000b6f58 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6f58:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6f5a:	7800      	ldrb	r0, [r0, #0]
   b6f5c:	f7fd fe8c 	bl	b4c78 <hal_spi_transfer>
}
   b6f60:	b2c0      	uxtb	r0, r0
   b6f62:	bd08      	pop	{r3, pc}

000b6f64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f64:	2200      	movs	r2, #0
   b6f66:	6840      	ldr	r0, [r0, #4]
   b6f68:	4611      	mov	r1, r2
   b6f6a:	f7fe b8a9 	b.w	b50c0 <network_listening>

000b6f6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f6e:	2200      	movs	r2, #0
   b6f70:	6840      	ldr	r0, [r0, #4]
   b6f72:	4611      	mov	r1, r2
   b6f74:	f7fe b8b4 	b.w	b50e0 <network_get_listen_timeout>

000b6f78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f78:	6840      	ldr	r0, [r0, #4]
   b6f7a:	2200      	movs	r2, #0
   b6f7c:	f7fe b8a8 	b.w	b50d0 <network_set_listen_timeout>

000b6f80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f80:	6840      	ldr	r0, [r0, #4]
   b6f82:	2200      	movs	r2, #0
   b6f84:	f081 0101 	eor.w	r1, r1, #1
   b6f88:	f7fe b892 	b.w	b50b0 <network_listen>

000b6f8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f8c:	2300      	movs	r3, #0
   b6f8e:	6840      	ldr	r0, [r0, #4]
   b6f90:	461a      	mov	r2, r3
   b6f92:	4619      	mov	r1, r3
   b6f94:	f7fe b884 	b.w	b50a0 <network_off>

000b6f98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f98:	2300      	movs	r3, #0
   b6f9a:	6840      	ldr	r0, [r0, #4]
   b6f9c:	461a      	mov	r2, r3
   b6f9e:	4619      	mov	r1, r3
   b6fa0:	f7fe b876 	b.w	b5090 <network_on>

000b6fa4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6fa4:	2200      	movs	r2, #0
   b6fa6:	6840      	ldr	r0, [r0, #4]
   b6fa8:	4611      	mov	r1, r2
   b6faa:	f7fe b869 	b.w	b5080 <network_ready>

000b6fae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6fae:	2200      	movs	r2, #0
   b6fb0:	6840      	ldr	r0, [r0, #4]
   b6fb2:	4611      	mov	r1, r2
   b6fb4:	f7fe b854 	b.w	b5060 <network_connecting>

000b6fb8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6fb8:	6840      	ldr	r0, [r0, #4]
   b6fba:	2200      	movs	r2, #0
   b6fbc:	2102      	movs	r1, #2
   b6fbe:	f7fe b857 	b.w	b5070 <network_disconnect>

000b6fc2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6fc2:	2300      	movs	r3, #0
   b6fc4:	6840      	ldr	r0, [r0, #4]
   b6fc6:	461a      	mov	r2, r3
   b6fc8:	f7fe b842 	b.w	b5050 <network_connect>

000b6fcc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6fcc:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6fce:	2203      	movs	r2, #3
   b6fd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6fd2:	4a02      	ldr	r2, [pc, #8]	; (b6fdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6fd4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6fd6:	4770      	bx	lr
   b6fd8:	2003e708 	.word	0x2003e708
   b6fdc:	000b7b8c 	.word	0x000b7b8c

000b6fe0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6fe0:	b510      	push	{r4, lr}
   b6fe2:	4604      	mov	r4, r0
{
	free(buffer);
   b6fe4:	6800      	ldr	r0, [r0, #0]
   b6fe6:	f7fe f8c7 	bl	b5178 <free>
}
   b6fea:	4620      	mov	r0, r4
   b6fec:	bd10      	pop	{r4, pc}

000b6fee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6fee:	b510      	push	{r4, lr}
   b6ff0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6ff2:	6800      	ldr	r0, [r0, #0]
   b6ff4:	b108      	cbz	r0, b6ffa <_ZN6String10invalidateEv+0xc>
   b6ff6:	f7fe f8bf 	bl	b5178 <free>
	buffer = NULL;
   b6ffa:	2300      	movs	r3, #0
	capacity = len = 0;
   b6ffc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7000:	6023      	str	r3, [r4, #0]
}
   b7002:	bd10      	pop	{r4, pc}

000b7004 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7004:	b538      	push	{r3, r4, r5, lr}
   b7006:	4604      	mov	r4, r0
   b7008:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b700a:	6800      	ldr	r0, [r0, #0]
   b700c:	3101      	adds	r1, #1
   b700e:	f7fe f8bb 	bl	b5188 <realloc>
	if (newbuffer) {
   b7012:	b110      	cbz	r0, b701a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7014:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7018:	2001      	movs	r0, #1
	}
	return 0;
}
   b701a:	bd38      	pop	{r3, r4, r5, pc}

000b701c <_ZN6String7reserveEj>:
{
   b701c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b701e:	6803      	ldr	r3, [r0, #0]
{
   b7020:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7022:	b123      	cbz	r3, b702e <_ZN6String7reserveEj+0x12>
   b7024:	6843      	ldr	r3, [r0, #4]
   b7026:	428b      	cmp	r3, r1
   b7028:	d301      	bcc.n	b702e <_ZN6String7reserveEj+0x12>
   b702a:	2001      	movs	r0, #1
}
   b702c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b702e:	4620      	mov	r0, r4
   b7030:	f7ff ffe8 	bl	b7004 <_ZN6String12changeBufferEj>
   b7034:	2800      	cmp	r0, #0
   b7036:	d0f9      	beq.n	b702c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7038:	68a3      	ldr	r3, [r4, #8]
   b703a:	2b00      	cmp	r3, #0
   b703c:	d1f5      	bne.n	b702a <_ZN6String7reserveEj+0xe>
   b703e:	6822      	ldr	r2, [r4, #0]
   b7040:	7013      	strb	r3, [r2, #0]
   b7042:	e7f2      	b.n	b702a <_ZN6String7reserveEj+0xe>

000b7044 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7044:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7046:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7048:	4611      	mov	r1, r2
   b704a:	9201      	str	r2, [sp, #4]
{
   b704c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b704e:	f7ff ffe5 	bl	b701c <_ZN6String7reserveEj>
   b7052:	9a01      	ldr	r2, [sp, #4]
   b7054:	b928      	cbnz	r0, b7062 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7056:	4620      	mov	r0, r4
   b7058:	f7ff ffc9 	bl	b6fee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b705c:	4620      	mov	r0, r4
   b705e:	b003      	add	sp, #12
   b7060:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7062:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7064:	4629      	mov	r1, r5
   b7066:	6820      	ldr	r0, [r4, #0]
   b7068:	f000 fa82 	bl	b7570 <memcpy>
	buffer[len] = 0;
   b706c:	6822      	ldr	r2, [r4, #0]
   b706e:	68a3      	ldr	r3, [r4, #8]
   b7070:	2100      	movs	r1, #0
   b7072:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7074:	e7f2      	b.n	b705c <_ZN6String4copyEPKcj+0x18>

000b7076 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7076:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7078:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b707a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b707e:	4604      	mov	r4, r0
	len = 0;
   b7080:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7082:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7084:	b141      	cbz	r1, b7098 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7086:	4608      	mov	r0, r1
   b7088:	9101      	str	r1, [sp, #4]
   b708a:	f000 fad9 	bl	b7640 <strlen>
   b708e:	9901      	ldr	r1, [sp, #4]
   b7090:	4602      	mov	r2, r0
   b7092:	4620      	mov	r0, r4
   b7094:	f7ff ffd6 	bl	b7044 <_ZN6String4copyEPKcj>
}
   b7098:	4620      	mov	r0, r4
   b709a:	b002      	add	sp, #8
   b709c:	bd10      	pop	{r4, pc}

000b709e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b709e:	b513      	push	{r0, r1, r4, lr}
   b70a0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b70a2:	b159      	cbz	r1, b70bc <_ZN6StringaSEPKc+0x1e>
   b70a4:	4608      	mov	r0, r1
   b70a6:	9101      	str	r1, [sp, #4]
   b70a8:	f000 faca 	bl	b7640 <strlen>
   b70ac:	9901      	ldr	r1, [sp, #4]
   b70ae:	4602      	mov	r2, r0
   b70b0:	4620      	mov	r0, r4
   b70b2:	f7ff ffc7 	bl	b7044 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b70b6:	4620      	mov	r0, r4
   b70b8:	b002      	add	sp, #8
   b70ba:	bd10      	pop	{r4, pc}
	else invalidate();
   b70bc:	f7ff ff97 	bl	b6fee <_ZN6String10invalidateEv>
   b70c0:	e7f9      	b.n	b70b6 <_ZN6StringaSEPKc+0x18>

000b70c2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70c2:	4770      	bx	lr

000b70c4 <__tcf_1>:
   b70c4:	4770      	bx	lr
	...

000b70c8 <_Z17acquireWireBufferv>:
{
   b70c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b70ca:	4b0a      	ldr	r3, [pc, #40]	; (b70f4 <_Z17acquireWireBufferv+0x2c>)
   b70cc:	6003      	str	r3, [r0, #0]
   b70ce:	2301      	movs	r3, #1
{
   b70d0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b70d2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b70d4:	4908      	ldr	r1, [pc, #32]	; (b70f8 <_Z17acquireWireBufferv+0x30>)
   b70d6:	2020      	movs	r0, #32
   b70d8:	f000 f91c 	bl	b7314 <_ZnajRKSt9nothrow_t>
	};
   b70dc:	2520      	movs	r5, #32
   b70de:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b70e0:	4905      	ldr	r1, [pc, #20]	; (b70f8 <_Z17acquireWireBufferv+0x30>)
	};
   b70e2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b70e4:	4628      	mov	r0, r5
   b70e6:	f000 f915 	bl	b7314 <_ZnajRKSt9nothrow_t>
	};
   b70ea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b70ee:	4620      	mov	r0, r4
   b70f0:	bd38      	pop	{r3, r4, r5, pc}
   b70f2:	bf00      	nop
   b70f4:	00010018 	.word	0x00010018
   b70f8:	000b7bc0 	.word	0x000b7bc0

000b70fc <_Z18acquireWire1Bufferv>:
{
   b70fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b70fe:	4b0a      	ldr	r3, [pc, #40]	; (b7128 <_Z18acquireWire1Bufferv+0x2c>)
   b7100:	6003      	str	r3, [r0, #0]
   b7102:	2301      	movs	r3, #1
{
   b7104:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7106:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7108:	4908      	ldr	r1, [pc, #32]	; (b712c <_Z18acquireWire1Bufferv+0x30>)
   b710a:	2020      	movs	r0, #32
   b710c:	f000 f902 	bl	b7314 <_ZnajRKSt9nothrow_t>
	};
   b7110:	2520      	movs	r5, #32
   b7112:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7114:	4905      	ldr	r1, [pc, #20]	; (b712c <_Z18acquireWire1Bufferv+0x30>)
	};
   b7116:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7118:	4628      	mov	r0, r5
   b711a:	f000 f8fb 	bl	b7314 <_ZnajRKSt9nothrow_t>
	};
   b711e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7122:	4620      	mov	r0, r4
   b7124:	bd38      	pop	{r3, r4, r5, pc}
   b7126:	bf00      	nop
   b7128:	00010018 	.word	0x00010018
   b712c:	000b7bc0 	.word	0x000b7bc0

000b7130 <_Z19__fetch_global_Wirev>:
{
   b7130:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7132:	4d0e      	ldr	r5, [pc, #56]	; (b716c <_Z19__fetch_global_Wirev+0x3c>)
   b7134:	7829      	ldrb	r1, [r5, #0]
   b7136:	f3bf 8f5b 	dmb	ish
   b713a:	f011 0401 	ands.w	r4, r1, #1
{
   b713e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7140:	d111      	bne.n	b7166 <_Z19__fetch_global_Wirev+0x36>
   b7142:	4628      	mov	r0, r5
   b7144:	f7fc ffab 	bl	b409e <__cxa_guard_acquire>
   b7148:	b168      	cbz	r0, b7166 <_Z19__fetch_global_Wirev+0x36>
   b714a:	4668      	mov	r0, sp
   b714c:	f7ff ffbc 	bl	b70c8 <_Z17acquireWireBufferv>
   b7150:	466a      	mov	r2, sp
   b7152:	4621      	mov	r1, r4
   b7154:	4806      	ldr	r0, [pc, #24]	; (b7170 <_Z19__fetch_global_Wirev+0x40>)
   b7156:	f7fe f931 	bl	b53bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b715a:	4628      	mov	r0, r5
   b715c:	f7fc ffa4 	bl	b40a8 <__cxa_guard_release>
   b7160:	4804      	ldr	r0, [pc, #16]	; (b7174 <_Z19__fetch_global_Wirev+0x44>)
   b7162:	f000 f9ef 	bl	b7544 <atexit>
	return wire;
}
   b7166:	4802      	ldr	r0, [pc, #8]	; (b7170 <_Z19__fetch_global_Wirev+0x40>)
   b7168:	b007      	add	sp, #28
   b716a:	bd30      	pop	{r4, r5, pc}
   b716c:	2003e710 	.word	0x2003e710
   b7170:	2003e718 	.word	0x2003e718
   b7174:	000b70c3 	.word	0x000b70c3

000b7178 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b7178:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b717a:	4c0e      	ldr	r4, [pc, #56]	; (b71b4 <_Z20__fetch_global_Wire1v+0x3c>)
   b717c:	7823      	ldrb	r3, [r4, #0]
   b717e:	f3bf 8f5b 	dmb	ish
   b7182:	07db      	lsls	r3, r3, #31
{
   b7184:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b7186:	d411      	bmi.n	b71ac <_Z20__fetch_global_Wire1v+0x34>
   b7188:	4620      	mov	r0, r4
   b718a:	f7fc ff88 	bl	b409e <__cxa_guard_acquire>
   b718e:	b168      	cbz	r0, b71ac <_Z20__fetch_global_Wire1v+0x34>
   b7190:	4668      	mov	r0, sp
   b7192:	f7ff ffb3 	bl	b70fc <_Z18acquireWire1Bufferv>
   b7196:	466a      	mov	r2, sp
   b7198:	2101      	movs	r1, #1
   b719a:	4807      	ldr	r0, [pc, #28]	; (b71b8 <_Z20__fetch_global_Wire1v+0x40>)
   b719c:	f7fe f90e 	bl	b53bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b71a0:	4620      	mov	r0, r4
   b71a2:	f7fc ff81 	bl	b40a8 <__cxa_guard_release>
   b71a6:	4805      	ldr	r0, [pc, #20]	; (b71bc <_Z20__fetch_global_Wire1v+0x44>)
   b71a8:	f000 f9cc 	bl	b7544 <atexit>
	return wire;
}
   b71ac:	4802      	ldr	r0, [pc, #8]	; (b71b8 <_Z20__fetch_global_Wire1v+0x40>)
   b71ae:	b006      	add	sp, #24
   b71b0:	bd10      	pop	{r4, pc}
   b71b2:	bf00      	nop
   b71b4:	2003e714 	.word	0x2003e714
   b71b8:	2003e72c 	.word	0x2003e72c
   b71bc:	000b70c5 	.word	0x000b70c5

000b71c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71c0:	4770      	bx	lr
	...

000b71c4 <_Z20acquireSerial1Bufferv>:
{
   b71c4:	b538      	push	{r3, r4, r5, lr}
   b71c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b71c8:	2514      	movs	r5, #20
   b71ca:	462a      	mov	r2, r5
   b71cc:	2100      	movs	r1, #0
   b71ce:	f000 f9f7 	bl	b75c0 <memset>
   b71d2:	8025      	strh	r5, [r4, #0]
   b71d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71d6:	4907      	ldr	r1, [pc, #28]	; (b71f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b71d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b71dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71de:	f000 f899 	bl	b7314 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71e2:	4904      	ldr	r1, [pc, #16]	; (b71f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b71e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71e6:	4628      	mov	r0, r5
   b71e8:	f000 f894 	bl	b7314 <_ZnajRKSt9nothrow_t>
    };
   b71ec:	60e0      	str	r0, [r4, #12]
}
   b71ee:	4620      	mov	r0, r4
   b71f0:	bd38      	pop	{r3, r4, r5, pc}
   b71f2:	bf00      	nop
   b71f4:	000b7bc0 	.word	0x000b7bc0

000b71f8 <_Z22__fetch_global_Serial1v>:
{
   b71f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71fa:	4d0e      	ldr	r5, [pc, #56]	; (b7234 <_Z22__fetch_global_Serial1v+0x3c>)
   b71fc:	7829      	ldrb	r1, [r5, #0]
   b71fe:	f3bf 8f5b 	dmb	ish
   b7202:	f011 0401 	ands.w	r4, r1, #1
{
   b7206:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7208:	d111      	bne.n	b722e <_Z22__fetch_global_Serial1v+0x36>
   b720a:	4628      	mov	r0, r5
   b720c:	f7fc ff47 	bl	b409e <__cxa_guard_acquire>
   b7210:	b168      	cbz	r0, b722e <_Z22__fetch_global_Serial1v+0x36>
   b7212:	a801      	add	r0, sp, #4
   b7214:	f7ff ffd6 	bl	b71c4 <_Z20acquireSerial1Bufferv>
   b7218:	aa01      	add	r2, sp, #4
   b721a:	4621      	mov	r1, r4
   b721c:	4806      	ldr	r0, [pc, #24]	; (b7238 <_Z22__fetch_global_Serial1v+0x40>)
   b721e:	f7ff fdcf 	bl	b6dc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7222:	4628      	mov	r0, r5
   b7224:	f7fc ff40 	bl	b40a8 <__cxa_guard_release>
   b7228:	4804      	ldr	r0, [pc, #16]	; (b723c <_Z22__fetch_global_Serial1v+0x44>)
   b722a:	f000 f98b 	bl	b7544 <atexit>
    return serial1;
}
   b722e:	4802      	ldr	r0, [pc, #8]	; (b7238 <_Z22__fetch_global_Serial1v+0x40>)
   b7230:	b007      	add	sp, #28
   b7232:	bd30      	pop	{r4, r5, pc}
   b7234:	2003e744 	.word	0x2003e744
   b7238:	2003e748 	.word	0x2003e748
   b723c:	000b71c1 	.word	0x000b71c1

000b7240 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7240:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7242:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7244:	d902      	bls.n	b724c <pinAvailable+0xc>
    return false;
   b7246:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7248:	b002      	add	sp, #8
   b724a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b724c:	f1a0 030b 	sub.w	r3, r0, #11
   b7250:	2b02      	cmp	r3, #2
   b7252:	d81a      	bhi.n	b728a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7254:	4c17      	ldr	r4, [pc, #92]	; (b72b4 <pinAvailable+0x74>)
   b7256:	7821      	ldrb	r1, [r4, #0]
   b7258:	f3bf 8f5b 	dmb	ish
   b725c:	f011 0101 	ands.w	r1, r1, #1
   b7260:	d10b      	bne.n	b727a <pinAvailable+0x3a>
   b7262:	4620      	mov	r0, r4
   b7264:	9101      	str	r1, [sp, #4]
   b7266:	f7fc ff1a 	bl	b409e <__cxa_guard_acquire>
   b726a:	9901      	ldr	r1, [sp, #4]
   b726c:	b128      	cbz	r0, b727a <pinAvailable+0x3a>
   b726e:	4812      	ldr	r0, [pc, #72]	; (b72b8 <pinAvailable+0x78>)
   b7270:	f7ff fdd2 	bl	b6e18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7274:	4620      	mov	r0, r4
   b7276:	f7fc ff17 	bl	b40a8 <__cxa_guard_release>
   b727a:	4b0f      	ldr	r3, [pc, #60]	; (b72b8 <pinAvailable+0x78>)
   b727c:	7818      	ldrb	r0, [r3, #0]
   b727e:	f7fd fd0b 	bl	b4c98 <hal_spi_is_enabled>
   b7282:	2800      	cmp	r0, #0
   b7284:	d1df      	bne.n	b7246 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7286:	2001      	movs	r0, #1
   b7288:	e7de      	b.n	b7248 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b728a:	2801      	cmp	r0, #1
   b728c:	d809      	bhi.n	b72a2 <pinAvailable+0x62>
   b728e:	f7ff ff4f 	bl	b7130 <_Z19__fetch_global_Wirev>
   b7292:	2100      	movs	r1, #0
   b7294:	7c00      	ldrb	r0, [r0, #16]
   b7296:	f7fd fcaf 	bl	b4bf8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b729a:	f080 0001 	eor.w	r0, r0, #1
   b729e:	b2c0      	uxtb	r0, r0
   b72a0:	e7d2      	b.n	b7248 <pinAvailable+0x8>
   b72a2:	3809      	subs	r0, #9
   b72a4:	2801      	cmp	r0, #1
   b72a6:	d8ee      	bhi.n	b7286 <pinAvailable+0x46>
   b72a8:	f7ff ffa6 	bl	b71f8 <_Z22__fetch_global_Serial1v>
   b72ac:	7c00      	ldrb	r0, [r0, #16]
   b72ae:	f7fd fd3b 	bl	b4d28 <hal_usart_is_enabled>
   b72b2:	e7f2      	b.n	b729a <pinAvailable+0x5a>
   b72b4:	2003e578 	.word	0x2003e578
   b72b8:	2003e57c 	.word	0x2003e57c

000b72bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b72bc:	2823      	cmp	r0, #35	; 0x23
{
   b72be:	b538      	push	{r3, r4, r5, lr}
   b72c0:	4604      	mov	r4, r0
   b72c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b72c4:	d80a      	bhi.n	b72dc <pinMode+0x20>
   b72c6:	29ff      	cmp	r1, #255	; 0xff
   b72c8:	d008      	beq.n	b72dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b72ca:	f7ff ffb9 	bl	b7240 <pinAvailable>
   b72ce:	b128      	cbz	r0, b72dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b72d0:	4629      	mov	r1, r5
   b72d2:	4620      	mov	r0, r4
}
   b72d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b72d8:	f7fd be7a 	b.w	b4fd0 <HAL_Pin_Mode>
}
   b72dc:	bd38      	pop	{r3, r4, r5, pc}

000b72de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b72de:	b538      	push	{r3, r4, r5, lr}
   b72e0:	4604      	mov	r4, r0
   b72e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b72e4:	f7fd fe7c 	bl	b4fe0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b72e8:	28ff      	cmp	r0, #255	; 0xff
   b72ea:	d010      	beq.n	b730e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b72ec:	2806      	cmp	r0, #6
   b72ee:	d804      	bhi.n	b72fa <digitalWrite+0x1c>
   b72f0:	234d      	movs	r3, #77	; 0x4d
   b72f2:	fa23 f000 	lsr.w	r0, r3, r0
   b72f6:	07c3      	lsls	r3, r0, #31
   b72f8:	d409      	bmi.n	b730e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b72fa:	4620      	mov	r0, r4
   b72fc:	f7ff ffa0 	bl	b7240 <pinAvailable>
   b7300:	b128      	cbz	r0, b730e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7302:	4629      	mov	r1, r5
   b7304:	4620      	mov	r0, r4
}
   b7306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b730a:	f7fd be71 	b.w	b4ff0 <HAL_GPIO_Write>
}
   b730e:	bd38      	pop	{r3, r4, r5, pc}

000b7310 <_ZnwjRKSt9nothrow_t>:
   b7310:	f7fc bebf 	b.w	b4092 <_Znwj>

000b7314 <_ZnajRKSt9nothrow_t>:
   b7314:	f7fc bebf 	b.w	b4096 <_Znaj>

000b7318 <_ZSt25__throw_bad_function_callv>:
   b7318:	b508      	push	{r3, lr}
   b731a:	f7fd ff3d 	bl	b5198 <abort>
	...

000b7320 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7320:	4901      	ldr	r1, [pc, #4]	; (b7328 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7322:	f000 b8f9 	b.w	b7518 <_ZNKSt9type_infoeqERKS_>
   b7326:	bf00      	nop
   b7328:	000b7bdc 	.word	0x000b7bdc

000b732c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b732c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b732e:	2400      	movs	r4, #0
   b7330:	2310      	movs	r3, #16
   b7332:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7336:	6803      	ldr	r3, [r0, #0]
   b7338:	4615      	mov	r5, r2
   b733a:	699e      	ldr	r6, [r3, #24]
   b733c:	6812      	ldr	r2, [r2, #0]
   b733e:	466b      	mov	r3, sp
   b7340:	e9cd 4400 	strd	r4, r4, [sp]
   b7344:	47b0      	blx	r6
   b7346:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b734a:	f003 0306 	and.w	r3, r3, #6
   b734e:	2b06      	cmp	r3, #6
   b7350:	bf03      	ittte	eq
   b7352:	9b00      	ldreq	r3, [sp, #0]
   b7354:	602b      	streq	r3, [r5, #0]
   b7356:	2001      	moveq	r0, #1
   b7358:	4620      	movne	r0, r4
   b735a:	b004      	add	sp, #16
   b735c:	bd70      	pop	{r4, r5, r6, pc}

000b735e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b735e:	9800      	ldr	r0, [sp, #0]
   b7360:	4290      	cmp	r0, r2
   b7362:	bf14      	ite	ne
   b7364:	2001      	movne	r0, #1
   b7366:	2006      	moveq	r0, #6
   b7368:	4770      	bx	lr
	...

000b736c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b736c:	b510      	push	{r4, lr}
   b736e:	4b03      	ldr	r3, [pc, #12]	; (b737c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7370:	6003      	str	r3, [r0, #0]
   b7372:	4604      	mov	r4, r0
   b7374:	f000 f8cd 	bl	b7512 <_ZNSt9type_infoD1Ev>
   b7378:	4620      	mov	r0, r4
   b737a:	bd10      	pop	{r4, pc}
   b737c:	000b7c1c 	.word	0x000b7c1c

000b7380 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7380:	b510      	push	{r4, lr}
   b7382:	4604      	mov	r4, r0
   b7384:	f7ff fff2 	bl	b736c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7388:	4620      	mov	r0, r4
   b738a:	2108      	movs	r1, #8
   b738c:	f7fc fe85 	bl	b409a <_ZdlPvj>
   b7390:	4620      	mov	r0, r4
   b7392:	bd10      	pop	{r4, pc}

000b7394 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7398:	461f      	mov	r7, r3
   b739a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b739e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b73a2:	4598      	cmp	r8, r3
   b73a4:	4606      	mov	r6, r0
   b73a6:	4615      	mov	r5, r2
   b73a8:	d107      	bne.n	b73ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b73aa:	9907      	ldr	r1, [sp, #28]
   b73ac:	f000 f8b4 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b73b0:	b118      	cbz	r0, b73ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b73b2:	7165      	strb	r5, [r4, #5]
   b73b4:	2000      	movs	r0, #0
   b73b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b73ba:	4639      	mov	r1, r7
   b73bc:	4630      	mov	r0, r6
   b73be:	f000 f8ab 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b73c2:	2800      	cmp	r0, #0
   b73c4:	d0f6      	beq.n	b73b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b73c6:	2301      	movs	r3, #1
   b73c8:	f8c4 8000 	str.w	r8, [r4]
   b73cc:	7125      	strb	r5, [r4, #4]
   b73ce:	71a3      	strb	r3, [r4, #6]
   b73d0:	e7f0      	b.n	b73b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b73d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b73d2:	b538      	push	{r3, r4, r5, lr}
   b73d4:	4615      	mov	r5, r2
   b73d6:	461c      	mov	r4, r3
   b73d8:	f000 f89e 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b73dc:	b120      	cbz	r0, b73e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b73de:	2308      	movs	r3, #8
   b73e0:	60e3      	str	r3, [r4, #12]
   b73e2:	2306      	movs	r3, #6
   b73e4:	6025      	str	r5, [r4, #0]
   b73e6:	7123      	strb	r3, [r4, #4]
   b73e8:	bd38      	pop	{r3, r4, r5, pc}

000b73ea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b73ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73ec:	4605      	mov	r5, r0
   b73ee:	460c      	mov	r4, r1
   b73f0:	9201      	str	r2, [sp, #4]
   b73f2:	461e      	mov	r6, r3
   b73f4:	f000 f890 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b73f8:	b950      	cbnz	r0, b7410 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73fa:	2e03      	cmp	r6, #3
   b73fc:	d808      	bhi.n	b7410 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73fe:	6823      	ldr	r3, [r4, #0]
   b7400:	9a01      	ldr	r2, [sp, #4]
   b7402:	695b      	ldr	r3, [r3, #20]
   b7404:	4629      	mov	r1, r5
   b7406:	4620      	mov	r0, r4
   b7408:	b002      	add	sp, #8
   b740a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b740e:	4718      	bx	r3
   b7410:	b002      	add	sp, #8
   b7412:	bd70      	pop	{r4, r5, r6, pc}

000b7414 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7414:	b510      	push	{r4, lr}
   b7416:	4b03      	ldr	r3, [pc, #12]	; (b7424 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7418:	6003      	str	r3, [r0, #0]
   b741a:	4604      	mov	r4, r0
   b741c:	f7ff ffa6 	bl	b736c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7420:	4620      	mov	r0, r4
   b7422:	bd10      	pop	{r4, pc}
   b7424:	000b7c7c 	.word	0x000b7c7c

000b7428 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7428:	b510      	push	{r4, lr}
   b742a:	4604      	mov	r4, r0
   b742c:	f7ff fff2 	bl	b7414 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7430:	4620      	mov	r0, r4
   b7432:	210c      	movs	r1, #12
   b7434:	f7fc fe31 	bl	b409a <_ZdlPvj>
   b7438:	4620      	mov	r0, r4
   b743a:	bd10      	pop	{r4, pc}

000b743c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b743e:	9f08      	ldr	r7, [sp, #32]
   b7440:	4297      	cmp	r7, r2
   b7442:	4605      	mov	r5, r0
   b7444:	460e      	mov	r6, r1
   b7446:	4614      	mov	r4, r2
   b7448:	d00a      	beq.n	b7460 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b744a:	68a8      	ldr	r0, [r5, #8]
   b744c:	6802      	ldr	r2, [r0, #0]
   b744e:	9708      	str	r7, [sp, #32]
   b7450:	6a15      	ldr	r5, [r2, #32]
   b7452:	4631      	mov	r1, r6
   b7454:	4622      	mov	r2, r4
   b7456:	46ac      	mov	ip, r5
   b7458:	b003      	add	sp, #12
   b745a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b745e:	4760      	bx	ip
   b7460:	4619      	mov	r1, r3
   b7462:	9301      	str	r3, [sp, #4]
   b7464:	f000 f858 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b7468:	9b01      	ldr	r3, [sp, #4]
   b746a:	2800      	cmp	r0, #0
   b746c:	d0ed      	beq.n	b744a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b746e:	2006      	movs	r0, #6
   b7470:	b003      	add	sp, #12
   b7472:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7474 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7474:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7478:	460d      	mov	r5, r1
   b747a:	4619      	mov	r1, r3
   b747c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7480:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7484:	4681      	mov	r9, r0
   b7486:	4617      	mov	r7, r2
   b7488:	4698      	mov	r8, r3
   b748a:	f000 f845 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b748e:	b190      	cbz	r0, b74b6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7490:	2d00      	cmp	r5, #0
   b7492:	6034      	str	r4, [r6, #0]
   b7494:	7137      	strb	r7, [r6, #4]
   b7496:	db09      	blt.n	b74ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7498:	1961      	adds	r1, r4, r5
   b749a:	458a      	cmp	sl, r1
   b749c:	bf0c      	ite	eq
   b749e:	2106      	moveq	r1, #6
   b74a0:	2101      	movne	r1, #1
   b74a2:	71b1      	strb	r1, [r6, #6]
   b74a4:	2000      	movs	r0, #0
   b74a6:	b001      	add	sp, #4
   b74a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b74ac:	3502      	adds	r5, #2
   b74ae:	d1f9      	bne.n	b74a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b74b0:	2301      	movs	r3, #1
   b74b2:	71b3      	strb	r3, [r6, #6]
   b74b4:	e7f6      	b.n	b74a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b74b6:	4554      	cmp	r4, sl
   b74b8:	d106      	bne.n	b74c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b74ba:	4659      	mov	r1, fp
   b74bc:	4648      	mov	r0, r9
   b74be:	f000 f82b 	bl	b7518 <_ZNKSt9type_infoeqERKS_>
   b74c2:	b108      	cbz	r0, b74c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b74c4:	7177      	strb	r7, [r6, #5]
   b74c6:	e7ed      	b.n	b74a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b74c8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b74cc:	6803      	ldr	r3, [r0, #0]
   b74ce:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b74d2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b74d6:	69dc      	ldr	r4, [r3, #28]
   b74d8:	463a      	mov	r2, r7
   b74da:	4643      	mov	r3, r8
   b74dc:	4629      	mov	r1, r5
   b74de:	46a4      	mov	ip, r4
   b74e0:	b001      	add	sp, #4
   b74e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74e6:	4760      	bx	ip

000b74e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b74e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74ec:	4607      	mov	r7, r0
   b74ee:	460c      	mov	r4, r1
   b74f0:	4615      	mov	r5, r2
   b74f2:	461e      	mov	r6, r3
   b74f4:	f7ff ff6d 	bl	b73d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b74f8:	b948      	cbnz	r0, b750e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b74fa:	68b8      	ldr	r0, [r7, #8]
   b74fc:	6803      	ldr	r3, [r0, #0]
   b74fe:	699f      	ldr	r7, [r3, #24]
   b7500:	462a      	mov	r2, r5
   b7502:	4633      	mov	r3, r6
   b7504:	4621      	mov	r1, r4
   b7506:	46bc      	mov	ip, r7
   b7508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b750c:	4760      	bx	ip
   b750e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7512 <_ZNSt9type_infoD1Ev>:
   b7512:	4770      	bx	lr

000b7514 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7514:	2000      	movs	r0, #0
   b7516:	4770      	bx	lr

000b7518 <_ZNKSt9type_infoeqERKS_>:
   b7518:	4281      	cmp	r1, r0
   b751a:	b508      	push	{r3, lr}
   b751c:	d00e      	beq.n	b753c <_ZNKSt9type_infoeqERKS_+0x24>
   b751e:	6840      	ldr	r0, [r0, #4]
   b7520:	7803      	ldrb	r3, [r0, #0]
   b7522:	2b2a      	cmp	r3, #42	; 0x2a
   b7524:	d00c      	beq.n	b7540 <_ZNKSt9type_infoeqERKS_+0x28>
   b7526:	6849      	ldr	r1, [r1, #4]
   b7528:	780b      	ldrb	r3, [r1, #0]
   b752a:	2b2a      	cmp	r3, #42	; 0x2a
   b752c:	bf08      	it	eq
   b752e:	3101      	addeq	r1, #1
   b7530:	f000 f87c 	bl	b762c <strcmp>
   b7534:	fab0 f080 	clz	r0, r0
   b7538:	0940      	lsrs	r0, r0, #5
   b753a:	bd08      	pop	{r3, pc}
   b753c:	2001      	movs	r0, #1
   b753e:	e7fc      	b.n	b753a <_ZNKSt9type_infoeqERKS_+0x22>
   b7540:	2000      	movs	r0, #0
   b7542:	e7fa      	b.n	b753a <_ZNKSt9type_infoeqERKS_+0x22>

000b7544 <atexit>:
   b7544:	2300      	movs	r3, #0
   b7546:	4601      	mov	r1, r0
   b7548:	461a      	mov	r2, r3
   b754a:	4618      	mov	r0, r3
   b754c:	f000 b88c 	b.w	b7668 <__register_exitproc>

000b7550 <memcmp>:
   b7550:	b510      	push	{r4, lr}
   b7552:	3901      	subs	r1, #1
   b7554:	4402      	add	r2, r0
   b7556:	4290      	cmp	r0, r2
   b7558:	d101      	bne.n	b755e <memcmp+0xe>
   b755a:	2000      	movs	r0, #0
   b755c:	e005      	b.n	b756a <memcmp+0x1a>
   b755e:	7803      	ldrb	r3, [r0, #0]
   b7560:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7564:	42a3      	cmp	r3, r4
   b7566:	d001      	beq.n	b756c <memcmp+0x1c>
   b7568:	1b18      	subs	r0, r3, r4
   b756a:	bd10      	pop	{r4, pc}
   b756c:	3001      	adds	r0, #1
   b756e:	e7f2      	b.n	b7556 <memcmp+0x6>

000b7570 <memcpy>:
   b7570:	440a      	add	r2, r1
   b7572:	4291      	cmp	r1, r2
   b7574:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7578:	d100      	bne.n	b757c <memcpy+0xc>
   b757a:	4770      	bx	lr
   b757c:	b510      	push	{r4, lr}
   b757e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7582:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7586:	4291      	cmp	r1, r2
   b7588:	d1f9      	bne.n	b757e <memcpy+0xe>
   b758a:	bd10      	pop	{r4, pc}

000b758c <memmove>:
   b758c:	4288      	cmp	r0, r1
   b758e:	b510      	push	{r4, lr}
   b7590:	eb01 0402 	add.w	r4, r1, r2
   b7594:	d902      	bls.n	b759c <memmove+0x10>
   b7596:	4284      	cmp	r4, r0
   b7598:	4623      	mov	r3, r4
   b759a:	d807      	bhi.n	b75ac <memmove+0x20>
   b759c:	1e43      	subs	r3, r0, #1
   b759e:	42a1      	cmp	r1, r4
   b75a0:	d008      	beq.n	b75b4 <memmove+0x28>
   b75a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b75a6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b75aa:	e7f8      	b.n	b759e <memmove+0x12>
   b75ac:	4402      	add	r2, r0
   b75ae:	4601      	mov	r1, r0
   b75b0:	428a      	cmp	r2, r1
   b75b2:	d100      	bne.n	b75b6 <memmove+0x2a>
   b75b4:	bd10      	pop	{r4, pc}
   b75b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b75ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b75be:	e7f7      	b.n	b75b0 <memmove+0x24>

000b75c0 <memset>:
   b75c0:	4402      	add	r2, r0
   b75c2:	4603      	mov	r3, r0
   b75c4:	4293      	cmp	r3, r2
   b75c6:	d100      	bne.n	b75ca <memset+0xa>
   b75c8:	4770      	bx	lr
   b75ca:	f803 1b01 	strb.w	r1, [r3], #1
   b75ce:	e7f9      	b.n	b75c4 <memset+0x4>

000b75d0 <srand>:
   b75d0:	b538      	push	{r3, r4, r5, lr}
   b75d2:	4b10      	ldr	r3, [pc, #64]	; (b7614 <srand+0x44>)
   b75d4:	681d      	ldr	r5, [r3, #0]
   b75d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b75d8:	4604      	mov	r4, r0
   b75da:	b9b3      	cbnz	r3, b760a <srand+0x3a>
   b75dc:	2018      	movs	r0, #24
   b75de:	f7fd fdc3 	bl	b5168 <malloc>
   b75e2:	4602      	mov	r2, r0
   b75e4:	63a8      	str	r0, [r5, #56]	; 0x38
   b75e6:	b920      	cbnz	r0, b75f2 <srand+0x22>
   b75e8:	4b0b      	ldr	r3, [pc, #44]	; (b7618 <srand+0x48>)
   b75ea:	480c      	ldr	r0, [pc, #48]	; (b761c <srand+0x4c>)
   b75ec:	2142      	movs	r1, #66	; 0x42
   b75ee:	f7fd fddb 	bl	b51a8 <__assert_func>
   b75f2:	490b      	ldr	r1, [pc, #44]	; (b7620 <srand+0x50>)
   b75f4:	4b0b      	ldr	r3, [pc, #44]	; (b7624 <srand+0x54>)
   b75f6:	e9c0 1300 	strd	r1, r3, [r0]
   b75fa:	4b0b      	ldr	r3, [pc, #44]	; (b7628 <srand+0x58>)
   b75fc:	6083      	str	r3, [r0, #8]
   b75fe:	230b      	movs	r3, #11
   b7600:	8183      	strh	r3, [r0, #12]
   b7602:	2100      	movs	r1, #0
   b7604:	2001      	movs	r0, #1
   b7606:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b760a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b760c:	2200      	movs	r2, #0
   b760e:	611c      	str	r4, [r3, #16]
   b7610:	615a      	str	r2, [r3, #20]
   b7612:	bd38      	pop	{r3, r4, r5, pc}
   b7614:	2003e510 	.word	0x2003e510
   b7618:	000b7cb5 	.word	0x000b7cb5
   b761c:	000b7ccc 	.word	0x000b7ccc
   b7620:	abcd330e 	.word	0xabcd330e
   b7624:	e66d1234 	.word	0xe66d1234
   b7628:	0005deec 	.word	0x0005deec

000b762c <strcmp>:
   b762c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7630:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7634:	2a01      	cmp	r2, #1
   b7636:	bf28      	it	cs
   b7638:	429a      	cmpcs	r2, r3
   b763a:	d0f7      	beq.n	b762c <strcmp>
   b763c:	1ad0      	subs	r0, r2, r3
   b763e:	4770      	bx	lr

000b7640 <strlen>:
   b7640:	4603      	mov	r3, r0
   b7642:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7646:	2a00      	cmp	r2, #0
   b7648:	d1fb      	bne.n	b7642 <strlen+0x2>
   b764a:	1a18      	subs	r0, r3, r0
   b764c:	3801      	subs	r0, #1
   b764e:	4770      	bx	lr

000b7650 <strnlen>:
   b7650:	b510      	push	{r4, lr}
   b7652:	4602      	mov	r2, r0
   b7654:	4401      	add	r1, r0
   b7656:	428a      	cmp	r2, r1
   b7658:	4613      	mov	r3, r2
   b765a:	d003      	beq.n	b7664 <strnlen+0x14>
   b765c:	781c      	ldrb	r4, [r3, #0]
   b765e:	3201      	adds	r2, #1
   b7660:	2c00      	cmp	r4, #0
   b7662:	d1f8      	bne.n	b7656 <strnlen+0x6>
   b7664:	1a18      	subs	r0, r3, r0
   b7666:	bd10      	pop	{r4, pc}

000b7668 <__register_exitproc>:
   b7668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b766c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7728 <__register_exitproc+0xc0>
   b7670:	4606      	mov	r6, r0
   b7672:	f8d8 0000 	ldr.w	r0, [r8]
   b7676:	461f      	mov	r7, r3
   b7678:	460d      	mov	r5, r1
   b767a:	4691      	mov	r9, r2
   b767c:	f000 f856 	bl	b772c <__retarget_lock_acquire_recursive>
   b7680:	4b25      	ldr	r3, [pc, #148]	; (b7718 <__register_exitproc+0xb0>)
   b7682:	681c      	ldr	r4, [r3, #0]
   b7684:	b934      	cbnz	r4, b7694 <__register_exitproc+0x2c>
   b7686:	4c25      	ldr	r4, [pc, #148]	; (b771c <__register_exitproc+0xb4>)
   b7688:	601c      	str	r4, [r3, #0]
   b768a:	4b25      	ldr	r3, [pc, #148]	; (b7720 <__register_exitproc+0xb8>)
   b768c:	b113      	cbz	r3, b7694 <__register_exitproc+0x2c>
   b768e:	681b      	ldr	r3, [r3, #0]
   b7690:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7694:	6863      	ldr	r3, [r4, #4]
   b7696:	2b1f      	cmp	r3, #31
   b7698:	dd07      	ble.n	b76aa <__register_exitproc+0x42>
   b769a:	f8d8 0000 	ldr.w	r0, [r8]
   b769e:	f000 f847 	bl	b7730 <__retarget_lock_release_recursive>
   b76a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b76a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b76aa:	b34e      	cbz	r6, b7700 <__register_exitproc+0x98>
   b76ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b76b0:	b988      	cbnz	r0, b76d6 <__register_exitproc+0x6e>
   b76b2:	4b1c      	ldr	r3, [pc, #112]	; (b7724 <__register_exitproc+0xbc>)
   b76b4:	b923      	cbnz	r3, b76c0 <__register_exitproc+0x58>
   b76b6:	f8d8 0000 	ldr.w	r0, [r8]
   b76ba:	f000 f838 	bl	b772e <__retarget_lock_release>
   b76be:	e7f0      	b.n	b76a2 <__register_exitproc+0x3a>
   b76c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b76c4:	f7fd fd50 	bl	b5168 <malloc>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d0f4      	beq.n	b76b6 <__register_exitproc+0x4e>
   b76cc:	2300      	movs	r3, #0
   b76ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b76d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b76d6:	6863      	ldr	r3, [r4, #4]
   b76d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b76dc:	2201      	movs	r2, #1
   b76de:	409a      	lsls	r2, r3
   b76e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b76e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b76e8:	4313      	orrs	r3, r2
   b76ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b76ee:	2e02      	cmp	r6, #2
   b76f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b76f4:	bf02      	ittt	eq
   b76f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b76fa:	4313      	orreq	r3, r2
   b76fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7700:	6863      	ldr	r3, [r4, #4]
   b7702:	f8d8 0000 	ldr.w	r0, [r8]
   b7706:	1c5a      	adds	r2, r3, #1
   b7708:	3302      	adds	r3, #2
   b770a:	6062      	str	r2, [r4, #4]
   b770c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7710:	f000 f80e 	bl	b7730 <__retarget_lock_release_recursive>
   b7714:	2000      	movs	r0, #0
   b7716:	e7c6      	b.n	b76a6 <__register_exitproc+0x3e>
   b7718:	2003e7e8 	.word	0x2003e7e8
   b771c:	2003e75c 	.word	0x2003e75c
   b7720:	00000000 	.word	0x00000000
   b7724:	000b5169 	.word	0x000b5169
   b7728:	2003e574 	.word	0x2003e574

000b772c <__retarget_lock_acquire_recursive>:
   b772c:	4770      	bx	lr

000b772e <__retarget_lock_release>:
   b772e:	4770      	bx	lr

000b7730 <__retarget_lock_release_recursive>:
   b7730:	4770      	bx	lr

000b7732 <link_code_end>:
	...

000b7734 <dynalib_user>:
   b7734:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7744:	0000 0000 454c 2044 614d 7274 7869 7420     ....LED Matrix t
   b7754:	7268 6165 0064 7645 6e65 2074 616d 616e     hread.Event mana
   b7764:	6567 656d 746e 7420 7268 6165 0064 6c42     gement thread.Bl
   b7774:	6575 6f74 746f 2068 6e49 6574 6672 6361     uetooth Interfac
   b7784:	2065 6854 6572 6461 0000 0000 4455 000b     e Thread....UD..
   b7794:	441d 000b 0000 0000 7748 000b 0400 0000     .D......Hw......
   b77a4:	0000 0000 4555 000b 4511 000b 0000 0000     ....UE...E......
   b77b4:	775a 000b 0800 0000 0014 0000 4889 000b     Zw...........H..
   b77c4:	4895 000b 0000 0000 7772 000b 0800 0000     .H......rw......
   b77d4:	0014 0000 4536 3034 3030 3130 422d 4135     ....6E400001-B5A
   b77e4:	2d33 3346 3339 452d 4130 2d39 3545 4530     3-F393-E0A9-E50E
   b77f4:	3432 4344 4143 4539 3600 3445 3030 3030     24DCCA9E.6E40000
   b7804:	2d32 3542 3341 462d 3933 2d33 3045 3941     2-B5A3-F393-E0A9
   b7814:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   b7824:	3034 3030 3330 422d 4135 2d33 3346 3339     400003-B5A3-F393
   b7834:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   b7844:	4539 7400 0078 7872 6200 7461 0000 0000     9E.tx.rx.bat....

000b7854 <_ZTV5Timer>:
	...
   b785c:	4821 000b 4875 000b 4759 000b               !H..uH..YG..

000b7868 <_ZTVN5spark12NetworkClassE>:
	...
   b7870:	5201 000b 520b 000b 5215 000b 521f 000b     .R...R...R...R..
   b7880:	5229 000b 5235 000b 5241 000b 5249 000b     )R..5R..AR..IR..
   b7890:	5251 000b 525d 000b 5265 000b 526f 000b     QR..]R..eR..oR..
   b78a0:	5279 000b                                   yR..

000b78a4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b78ac <_ZTV7TwoWire>:
	...
   b78b4:	5365 000b 53af 000b 5387 000b 5367 000b     eS...S...S..gS..
   b78c4:	538f 000b 5397 000b 539f 000b 53a7 000b     .S...S...S...S..

000b78d4 <_ZTV9USBSerial>:
	...
   b78dc:	54a9 000b 5511 000b 54e7 000b 59d5 000b     .T...U...T...Y..
   b78ec:	54d9 000b 54ab 000b 54bb 000b 550b 000b     .T...T...T...U..
   b78fc:	54cb 000b 54a3 000b                         .T...T..

000b7904 <_ZTV9IPAddress>:
	...
   b790c:	55b5 000b 55a5 000b 55a7 000b               .U...U...U..

000b7918 <_ZTVN5spark13CellularClassE>:
	...
   b7920:	596b 000b 5961 000b 5957 000b 590d 000b     kY..aY..WY...Y..
   b7930:	594b 000b 593f 000b 5241 000b 5249 000b     KY..?Y..AR..IR..
   b7940:	5933 000b 592b 000b 5921 000b 5917 000b     3Y..+Y..!Y...Y..
   b7950:	5279 000b 5925 252d 2d6d 6425 2554 3a48     yR..%Y-%m-%dT%H:
   b7960:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   b7970:	7061 0070 7341 6573 7472 6f69 466e 6961     app.AssertionFai
   b7980:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   b7990:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   b79a0:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   b79b0:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   b79c0:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   b79d0:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   b79e0:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   b79f0:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   b7a00:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   b7a10:	6465 7420 206f 7061 6570 646e 7020 6565     ed to append pee
   b7a20:	2072 6543 746e 6172 206c 6564 6976 6563     r Central device
   b7a30:	002e 6f43 6e6e 6365 6574 2064 7962 4320     ..Connected by C
   b7a40:	6e65 7274 6c61 6420 7665 6369 2e65 4400     entral device..D
   b7a50:	7369 6f63 6e6e 6365 6574 2064 7962 7220     isconnected by r
   b7a60:	6d65 746f 2065 6564 6976 6563 002e 7544     emote device..Du
   b7a70:	6c70 6369 7461 6465 6320 6168 6172 7463     plicated charact
   b7a80:	7265 7369 6974 2063 6163 6e6e 746f 6220     eristic cannot b
   b7a90:	2065 6461 6564 2e64 4600 6961 656c 2064     e added..Failed 
   b7aa0:	6f74 6120 7070 6e65 2064 6f6c 6163 206c     to append local 
   b7ab0:	6863 7261 6361 6574 6972 7473 6369 002e     characteristic..

000b7ac0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7ac8:	5a6d 000b 5ad1 000b 5ba5 000b 5afb 000b     mZ...Z...[...Z..
   b7ad8:	5a71 000b                                   qZ..

000b7adc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7ae4:	5a69 000b 5adf 000b 5a6b 000b 5b01 000b     iZ...Z..kZ...[..
   b7af4:	5a91 000b                                   .Z..

000b7af8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7b00:	5a67 000b 5aed 000b 6339 000b 5b07 000b     gZ...Z..9c...[..
   b7b10:	5ab1 000b 0000 0000 0000 34fb 5f9b 0080     .Z.........4._..
   b7b20:	8000 1000 0000 0000 0000                    ..........

000b7b2a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b7b2a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b7b3a <_ZN8particle7BleUuid9BASE_UUIDE>:
   b7b3a:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b7b4c <_ZTV11USARTSerial>:
	...
   b7b54:	6d45 000b 6db1 000b 6d89 000b 59d5 000b     Em...m...m...Y..
   b7b64:	6d59 000b 6d75 000b 6d67 000b 6d83 000b     Ym..um..gm...m..
   b7b74:	6d47 000b 6d4b 000b                         Gm..Km..

000b7b7c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7b7c:	0800 1810 2820 3830                         .... (08

000b7b84 <_ZTVN5spark13EthernetClassE>:
	...
   b7b8c:	6fc3 000b 6fb9 000b 6faf 000b 6fa5 000b     .o...o...o...o..
   b7b9c:	6f99 000b 6f8d 000b 5241 000b 5249 000b     .o...o..AR..IR..
   b7bac:	6f81 000b 6f79 000b 6f6f 000b 6f65 000b     .o..yo..oo..eo..
   b7bbc:	5279 000b                                   yR..

000b7bc0 <_ZSt7nothrow>:
	...

000b7bc1 <_ZTSSt19_Sp_make_shared_tag>:
   b7bc1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7bd1:	6572 5f64 6174 0067 0000                     red_tag....

000b7bdc <_ZTISt19_Sp_make_shared_tag>:
   b7bdc:	7c1c 000b 7bc1 000b                         .|...{..

000b7be4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7be4:	7c7c 000b 7bf0 000b 7ca0 000b               ||...{...|..

000b7bf0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7bf0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7c00:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7c10:	0045 0000                                   E...

000b7c14 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7c14:	0000 0000 7be4 000b 736d 000b 7381 000b     .....{..ms...s..
   b7c24:	7515 000b 7515 000b 73eb 000b 732d 000b     .u...u...s..-s..
   b7c34:	73d3 000b 7395 000b 735f 000b               .s...s.._s..

000b7c40 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7c40:	7c7c 000b 7c4c 000b 7be4 000b               ||..L|...{..

000b7c4c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7c4c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7c5c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7c6c:	666e 456f 0000 0000                         nfoE....

000b7c74 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7c74:	0000 0000 7c40 000b 7415 000b 7429 000b     ....@|...t..)t..
   b7c84:	7515 000b 7515 000b 73eb 000b 732d 000b     .u...u...s..-s..
   b7c94:	74e9 000b 7475 000b 743d 000b               .t..ut..=t..

000b7ca0 <_ZTISt9type_info>:
   b7ca0:	7c1c 000b 7ca8 000b                         .|...|..

000b7ca8 <_ZTSSt9type_info>:
   b7ca8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7cb8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7cc8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7cd8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7ce8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7cf8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7d08:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7d18:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7d28:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7d38:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7d49 <link_const_variable_data_end>:
   b7d49:	00          	.byte	0x00
	...

000b7d4c <link_constructors_location>:
   b7d4c:	000b40f3 	.word	0x000b40f3
   b7d50:	000b4501 	.word	0x000b4501
   b7d54:	000b49b5 	.word	0x000b49b5
   b7d58:	000b5351 	.word	0x000b5351
   b7d5c:	000b5975 	.word	0x000b5975
   b7d60:	000b59a5 	.word	0x000b59a5
   b7d64:	000b59b1 	.word	0x000b59b1
   b7d68:	000b59c5 	.word	0x000b59c5
   b7d6c:	000b6d35 	.word	0x000b6d35
   b7d70:	000b6de9 	.word	0x000b6de9
   b7d74:	000b6fcd 	.word	0x000b6fcd

000b7d78 <link_constructors_end>:
	...
