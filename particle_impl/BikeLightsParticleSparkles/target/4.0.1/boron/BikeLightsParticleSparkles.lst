
/home/wredenba/git/BikeLightsV4/particle_impl/BikeLightsParticleSparkles/target/4.0.1/boron/BikeLightsParticleSparkles.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b61c0  000b61c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b61e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5dc  000b61e8  0001e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  2003e648  2003e648  0002e648  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6254  000b6254  00026254  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b627c  000b627c  0002627c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001054e0  00000000  00000000  00026280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012300  00000000  00000000  0012b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002988  00000000  00000000  0013da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00039eb1  00000000  00000000  001403e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0003e0dc  00000000  00000000  0017a299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00132e63  00000000  00000000  001b8375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00034fbc  00000000  00000000  002eb1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009780  00000000  00000000  00320194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000738c  00000000  00000000  00329914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 face 	bl	b55ce <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fad6 	bl	b55ea <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5dc 	.word	0x2003e5dc
   b4048:	000b61e8 	.word	0x000b61e8
   b404c:	2003e648 	.word	0x2003e648
   b4050:	2003e648 	.word	0x2003e648
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 ff01 	bl	b4e64 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6198 	.word	0x000b6198
   b407c:	000b61bc 	.word	0x000b61bc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f821 	bl	b40cc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bea1 	b.w	b4dd4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bc55 	b.w	b4940 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bc53 	b.w	b4940 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bc59 	b.w	b4950 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
#include "threads_init/threads_init.h"

void setup() {
   b40b0:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b40b2:	4805      	ldr	r0, [pc, #20]	; (b40c8 <setup+0x18>)
   b40b4:	2300      	movs	r3, #0
   b40b6:	461a      	mov	r2, r3
   b40b8:	4619      	mov	r1, r3
   b40ba:	6840      	ldr	r0, [r0, #4]
   b40bc:	f000 fbe4 	bl	b4888 <network_off>
  Cellular.off();
  threads_list_init();
}
   b40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  threads_list_init();
   b40c4:	f000 b9f6 	b.w	b44b4 <_Z17threads_list_initv>
   b40c8:	2003e6c4 	.word	0x2003e6c4

000b40cc <loop>:

void loop() {
  delay(50000);
   b40cc:	f24c 3050 	movw	r0, #50000	; 0xc350
   b40d0:	f000 be5a 	b.w	b4d88 <delay>

000b40d4 <_ZN9LedMatrixC1Ehh>:
#include "LedMatrix.h"
#include "cp437font.h"
/**
 * Heavily influenced by the code and the blog posts from https://github.com/nickgammon/MAX7219_Dot_Matrix
 */
LedMatrix::LedMatrix(byte numberOfDevices, byte slaveSelectPin) {
   b40d4:	b570      	push	{r4, r5, r6, lr}
   b40d6:	4604      	mov	r4, r0
   b40d8:	460d      	mov	r5, r1
   b40da:	3014      	adds	r0, #20
   b40dc:	490e      	ldr	r1, [pc, #56]	; (b4118 <_ZN9LedMatrixC1Ehh+0x44>)
   b40de:	4616      	mov	r6, r2
   b40e0:	f001 f941 	bl	b5366 <_ZN6StringC1EPK19__FlashStringHelper>
   b40e4:	490c      	ldr	r1, [pc, #48]	; (b4118 <_ZN9LedMatrixC1Ehh+0x44>)
   b40e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b40ea:	f001 f93c 	bl	b5366 <_ZN6StringC1EPK19__FlashStringHelper>
   b40ee:	2201      	movs	r2, #1
   b40f0:	2300      	movs	r3, #0
   b40f2:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b40f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b40fa:	63e3      	str	r3, [r4, #60]	; 0x3c
   b40fc:	f240 1307 	movw	r3, #263	; 0x107
   b4100:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    myNumberOfDevices = numberOfDevices;
   b4104:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    mySlaveSelectPin = slaveSelectPin;
   b4108:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    cols = new byte[numberOfDevices * 8];
   b410c:	00e8      	lsls	r0, r5, #3
   b410e:	f7ff ffc2 	bl	b4096 <_Znaj>
   b4112:	6020      	str	r0, [r4, #0]
}
   b4114:	4620      	mov	r0, r4
   b4116:	bd70      	pop	{r4, r5, r6, pc}
   b4118:	000b6194 	.word	0x000b6194

000b411c <_ZN9LedMatrix28calculateTextAlignmentOffsetEv>:
    myTextAlignment = textAlignment;
    calculateTextAlignmentOffset();
}

void LedMatrix::calculateTextAlignmentOffset() {
    switch(myTextAlignment) {
   b411c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
   b4120:	2b03      	cmp	r3, #3
   b4122:	d805      	bhi.n	b4130 <_ZN9LedMatrix28calculateTextAlignmentOffsetEv+0x14>
   b4124:	e8df f003 	tbb	[pc, r3]
   b4128:	12090502 	.word	0x12090502
        case TEXT_ALIGN_LEFT:
            myTextAlignmentOffset = 0;
   b412c:	2300      	movs	r3, #0
            break;
        case TEXT_ALIGN_RIGHT:
            myTextAlignmentOffset = myText.length() * myCharWidth - myNumberOfDevices * 8;
            break;
        case TEXT_ALIGN_RIGHT_END:
            myTextAlignmentOffset = - myText.length() * myCharWidth;
   b412e:	6383      	str	r3, [r0, #56]	; 0x38
            break;
    }

}
   b4130:	4770      	bx	lr
            myTextAlignmentOffset = myNumberOfDevices * 8;
   b4132:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   b4136:	00db      	lsls	r3, r3, #3
   b4138:	e7f9      	b.n	b412e <_ZN9LedMatrix28calculateTextAlignmentOffsetEv+0x12>
            myTextAlignmentOffset = myText.length() * myCharWidth - myNumberOfDevices * 8;
   b413a:	69c2      	ldr	r2, [r0, #28]
   b413c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   b4140:	4353      	muls	r3, r2
   b4142:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   b4146:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
   b414a:	e7f0      	b.n	b412e <_ZN9LedMatrix28calculateTextAlignmentOffsetEv+0x12>
            myTextAlignmentOffset = - myText.length() * myCharWidth;
   b414c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   b4150:	69c2      	ldr	r2, [r0, #28]
   b4152:	4353      	muls	r3, r2
   b4154:	425b      	negs	r3, r3
   b4156:	e7ea      	b.n	b412e <_ZN9LedMatrix28calculateTextAlignmentOffsetEv+0x12>

000b4158 <_ZN9LedMatrix5clearEv>:

void LedMatrix::clear() {
   b4158:	2300      	movs	r3, #0
   b415a:	b510      	push	{r4, lr}
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
        cols[col] = 0;
   b415c:	461c      	mov	r4, r3
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b415e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   b4162:	1c5a      	adds	r2, r3, #1
   b4164:	b2db      	uxtb	r3, r3
   b4166:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
   b416a:	da03      	bge.n	b4174 <_ZN9LedMatrix5clearEv+0x1c>
        cols[col] = 0;
   b416c:	6801      	ldr	r1, [r0, #0]
   b416e:	54cc      	strb	r4, [r1, r3]
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b4170:	4613      	mov	r3, r2
   b4172:	e7f4      	b.n	b415e <_ZN9LedMatrix5clearEv+0x6>
    }

}
   b4174:	bd10      	pop	{r4, pc}

000b4176 <_ZN9LedMatrix7setTextE6String>:
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
        sendByte(col / 8, col % 8 + 1, cols[col]);
    }
}

void LedMatrix::setText(String text) {
   b4176:	b510      	push	{r4, lr}
   b4178:	4604      	mov	r4, r0
    myText = text;
   b417a:	3014      	adds	r0, #20
   b417c:	f001 f907 	bl	b538e <_ZN6StringaSERKS_>
    myTextOffset = 0;
   b4180:	2300      	movs	r3, #0
   b4182:	6363      	str	r3, [r4, #52]	; 0x34
    calculateTextAlignmentOffset();
   b4184:	4620      	mov	r0, r4
}
   b4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calculateTextAlignmentOffset();
   b418a:	f7ff bfc7 	b.w	b411c <_ZN9LedMatrix28calculateTextAlignmentOffsetEv>

000b418e <_ZN9LedMatrix11setNextTextE6String>:

void LedMatrix::setNextText(String nextText) {
    myNextText = nextText;
   b418e:	3024      	adds	r0, #36	; 0x24
   b4190:	f001 b8fd 	b.w	b538e <_ZN6StringaSERKS_>

000b4194 <_ZN9LedMatrix14scrollTextLeftEv>:

void LedMatrix::scrollTextRight() {
    myTextOffset = (myTextOffset + 1) % ((int)myText.length() * myCharWidth - 5);
}

void LedMatrix::scrollTextLeft() {
   b4194:	b538      	push	{r3, r4, r5, lr}
   b4196:	4604      	mov	r4, r0
    myTextOffset = (myTextOffset - 1) % ((int)myText.length() * myCharWidth + myNumberOfDevices * 8);
   b4198:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   b419c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   b41a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b41a2:	69c0      	ldr	r0, [r0, #28]
   b41a4:	00d2      	lsls	r2, r2, #3
   b41a6:	3b01      	subs	r3, #1
   b41a8:	fb00 2201 	mla	r2, r0, r1, r2
   b41ac:	fb93 f1f2 	sdiv	r1, r3, r2
   b41b0:	fb02 3311 	mls	r3, r2, r1, r3
   b41b4:	6363      	str	r3, [r4, #52]	; 0x34
    if (myTextOffset == 0 && myNextText.length() > 0) {
   b41b6:	b98b      	cbnz	r3, b41dc <_ZN9LedMatrix14scrollTextLeftEv+0x48>
   b41b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b41ba:	b17b      	cbz	r3, b41dc <_ZN9LedMatrix14scrollTextLeftEv+0x48>
        myText = myNextText;
   b41bc:	f104 0524 	add.w	r5, r4, #36	; 0x24
   b41c0:	4629      	mov	r1, r5
   b41c2:	f104 0014 	add.w	r0, r4, #20
   b41c6:	f001 f8e2 	bl	b538e <_ZN6StringaSERKS_>
        myNextText = "";
   b41ca:	4628      	mov	r0, r5
   b41cc:	4904      	ldr	r1, [pc, #16]	; (b41e0 <_ZN9LedMatrix14scrollTextLeftEv+0x4c>)
   b41ce:	f001 f8ed 	bl	b53ac <_ZN6StringaSEPKc>
        calculateTextAlignmentOffset();
   b41d2:	4620      	mov	r0, r4
    }
}
   b41d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        calculateTextAlignmentOffset();
   b41d8:	f7ff bfa0 	b.w	b411c <_ZN9LedMatrix28calculateTextAlignmentOffsetEv>
}
   b41dc:	bd38      	pop	{r3, r4, r5, pc}
   b41de:	bf00      	nop
   b41e0:	000b6194 	.word	0x000b6194

000b41e4 <_ZN9LedMatrix8setPixelEhh>:
void LedMatrix::setPixel(byte x, byte y) {

    // Weird Matrix operations to rotate everything around the way I need to
    // -- William Redenbaugh
    int matrix_x = 7-(x % 8);
    int matrix_y = y % 8;
   b41e4:	f002 0207 	and.w	r2, r2, #7
    int which_matrix = x / 8;
    int new_x = (7 - matrix_y) + (which_matrix * 8);
   b41e8:	08cb      	lsrs	r3, r1, #3
   b41ea:	f1c2 0207 	rsb	r2, r2, #7
   b41ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    int new_y = matrix_x;

    bitWrite(cols[new_x], new_y, true);
   b41f2:	6800      	ldr	r0, [r0, #0]
    int matrix_x = 7-(x % 8);
   b41f4:	43c9      	mvns	r1, r1
    bitWrite(cols[new_x], new_y, true);
   b41f6:	2301      	movs	r3, #1
    int matrix_x = 7-(x % 8);
   b41f8:	f001 0107 	and.w	r1, r1, #7
    bitWrite(cols[new_x], new_y, true);
   b41fc:	fa03 f101 	lsl.w	r1, r3, r1
   b4200:	5c83      	ldrb	r3, [r0, r2]
   b4202:	4319      	orrs	r1, r3
   b4204:	5481      	strb	r1, [r0, r2]
}
   b4206:	4770      	bx	lr

000b4208 <_ZN9LedMatrix9setColumnEih>:
    if (column < 0 || column >= myNumberOfDevices * 8) {
   b4208:	2900      	cmp	r1, #0
void LedMatrix::setColumn(int column, byte value) {
   b420a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b420c:	4606      	mov	r6, r0
   b420e:	4617      	mov	r7, r2
    if (column < 0 || column >= myNumberOfDevices * 8) {
   b4210:	db16      	blt.n	b4240 <_ZN9LedMatrix9setColumnEih+0x38>
   b4212:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   b4216:	ebb1 0fc3 	cmp.w	r1, r3, lsl #3
   b421a:	ea4f 04c3 	mov.w	r4, r3, lsl #3
   b421e:	da0f      	bge.n	b4240 <_ZN9LedMatrix9setColumnEih+0x38>
            setPixel((num_pixels-1) - column , n);
   b4220:	1a64      	subs	r4, r4, r1
   b4222:	3c01      	subs	r4, #1
    for(int n = 0; n < 8; n++){
   b4224:	2500      	movs	r5, #0
            setPixel((num_pixels-1) - column , n);
   b4226:	b2e4      	uxtb	r4, r4
        if(value & (1 << n))
   b4228:	fa47 f305 	asr.w	r3, r7, r5
   b422c:	07db      	lsls	r3, r3, #31
   b422e:	d504      	bpl.n	b423a <_ZN9LedMatrix9setColumnEih+0x32>
            setPixel((num_pixels-1) - column , n);
   b4230:	b2ea      	uxtb	r2, r5
   b4232:	4621      	mov	r1, r4
   b4234:	4630      	mov	r0, r6
   b4236:	f7ff ffd5 	bl	b41e4 <_ZN9LedMatrix8setPixelEhh>
    for(int n = 0; n < 8; n++){
   b423a:	3501      	adds	r5, #1
   b423c:	2d08      	cmp	r5, #8
   b423e:	d1f3      	bne.n	b4228 <_ZN9LedMatrix9setColumnEih+0x20>
}
   b4240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b4244 <_ZN9LedMatrix8drawTextEv>:
void LedMatrix::drawText() {
   b4244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4248:	f8df 8054 	ldr.w	r8, [pc, #84]	; b42a0 <_ZN9LedMatrix8drawTextEv+0x5c>
   b424c:	4604      	mov	r4, r0
    for (int i = 0; i < myText.length(); i++) {
   b424e:	2500      	movs	r5, #0
        letter = myText.charAt(i);
   b4250:	f100 0714 	add.w	r7, r0, #20
    for (int i = 0; i < myText.length(); i++) {
   b4254:	69e3      	ldr	r3, [r4, #28]
   b4256:	42ab      	cmp	r3, r5
   b4258:	d91f      	bls.n	b429a <_ZN9LedMatrix8drawTextEv+0x56>
        letter = myText.charAt(i);
   b425a:	4629      	mov	r1, r5
   b425c:	4638      	mov	r0, r7
   b425e:	f001 f8c0 	bl	b53e2 <_ZNK6String6charAtEj>
        for (byte col = 0; col < 8; col++) {
   b4262:	b200      	sxth	r0, r0
   b4264:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
        letter = myText.charAt(i);
   b4268:	2600      	movs	r6, #0
            position = i * myCharWidth + col + myTextOffset + myTextAlignmentOffset;
   b426a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   b426e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b4270:	fb05 6101 	mla	r1, r5, r1, r6
   b4274:	4419      	add	r1, r3
   b4276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if (position >= 0 && position < myNumberOfDevices * 8) {
   b4278:	18c9      	adds	r1, r1, r3
   b427a:	d409      	bmi.n	b4290 <_ZN9LedMatrix8drawTextEv+0x4c>
   b427c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   b4280:	ebb1 0fc3 	cmp.w	r1, r3, lsl #3
   b4284:	da04      	bge.n	b4290 <_ZN9LedMatrix8drawTextEv+0x4c>
                setColumn(position, pgm_read_byte (&cp437_font [letter] [col]));
   b4286:	f819 2006 	ldrb.w	r2, [r9, r6]
   b428a:	4620      	mov	r0, r4
   b428c:	f7ff ffbc 	bl	b4208 <_ZN9LedMatrix9setColumnEih>
        for (byte col = 0; col < 8; col++) {
   b4290:	3601      	adds	r6, #1
   b4292:	2e08      	cmp	r6, #8
   b4294:	d1e9      	bne.n	b426a <_ZN9LedMatrix8drawTextEv+0x26>
    for (int i = 0; i < myText.length(); i++) {
   b4296:	3501      	adds	r5, #1
   b4298:	e7dc      	b.n	b4254 <_ZN9LedMatrix8drawTextEv+0x10>
}
   b429a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b429e:	bf00      	nop
   b42a0:	000b5748 	.word	0x000b5748

000b42a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b42a4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b42a6:	4c0b      	ldr	r4, [pc, #44]	; (b42d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b42a8:	7821      	ldrb	r1, [r4, #0]
   b42aa:	f3bf 8f5b 	dmb	ish
   b42ae:	f011 0101 	ands.w	r1, r1, #1
   b42b2:	d10b      	bne.n	b42cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b42b4:	4620      	mov	r0, r4
   b42b6:	9101      	str	r1, [sp, #4]
   b42b8:	f7ff fef1 	bl	b409e <__cxa_guard_acquire>
   b42bc:	9901      	ldr	r1, [sp, #4]
   b42be:	b128      	cbz	r0, b42cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b42c0:	4805      	ldr	r0, [pc, #20]	; (b42d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b42c2:	f000 ff21 	bl	b5108 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b42c6:	4620      	mov	r0, r4
   b42c8:	f7ff feee 	bl	b40a8 <__cxa_guard_release>
        return instance;
    }
   b42cc:	4802      	ldr	r0, [pc, #8]	; (b42d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b42ce:	b002      	add	sp, #8
   b42d0:	bd10      	pop	{r4, pc}
   b42d2:	bf00      	nop
   b42d4:	2003e648 	.word	0x2003e648
   b42d8:	2003e64c 	.word	0x2003e64c

000b42dc <_ZN9LedMatrix8sendByteEhhh>:
void LedMatrix::sendByte (const byte device, const byte reg, const byte data) {
   b42dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42e0:	1d05      	adds	r5, r0, #4
   b42e2:	4604      	mov	r4, r0
   b42e4:	460e      	mov	r6, r1
   b42e6:	4690      	mov	r8, r2
        spiregister[i] = (byte)0;
   b42e8:	2100      	movs	r1, #0
   b42ea:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   b42ee:	9201      	str	r2, [sp, #4]
   b42f0:	4628      	mov	r0, r5
void LedMatrix::sendByte (const byte device, const byte reg, const byte data) {
   b42f2:	461f      	mov	r7, r3
        spiregister[i] = (byte)0;
   b42f4:	f001 f979 	bl	b55ea <memset>
        spidata[i] = (byte)0;
   b42f8:	9a01      	ldr	r2, [sp, #4]
   b42fa:	2100      	movs	r1, #0
   b42fc:	f104 000c 	add.w	r0, r4, #12
   b4300:	f001 f973 	bl	b55ea <memset>
    spiregister[offset] = reg;
   b4304:	19a1      	adds	r1, r4, r6
    for(int i=0;i<myNumberOfDevices;i++) {
   b4306:	f06f 0603 	mvn.w	r6, #3
    spiregister[offset] = reg;
   b430a:	f881 8004 	strb.w	r8, [r1, #4]
    spidata[offset] = data;
   b430e:	730f      	strb	r7, [r1, #12]
    digitalWrite(mySlaveSelectPin,LOW);
   b4310:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
   b4314:	2100      	movs	r1, #0
   b4316:	f001 f934 	bl	b5582 <digitalWrite>
    for(int i=0;i<myNumberOfDevices;i++) {
   b431a:	1b36      	subs	r6, r6, r4
   b431c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   b4320:	1973      	adds	r3, r6, r5
   b4322:	429a      	cmp	r2, r3
   b4324:	dd0f      	ble.n	b4346 <_ZN9LedMatrix8sendByteEhhh+0x6a>
        SPI.transfer (spiregister[i]);
   b4326:	f815 1b01 	ldrb.w	r1, [r5], #1
   b432a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b432c:	f7ff ffba 	bl	b42a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4330:	9901      	ldr	r1, [sp, #4]
   b4332:	f000 ff89 	bl	b5248 <_ZN8SPIClass8transferEh>
        SPI.transfer (spidata[i]);
   b4336:	79e9      	ldrb	r1, [r5, #7]
   b4338:	9101      	str	r1, [sp, #4]
   b433a:	f7ff ffb3 	bl	b42a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b433e:	9901      	ldr	r1, [sp, #4]
   b4340:	f000 ff82 	bl	b5248 <_ZN8SPIClass8transferEh>
    for(int i=0;i<myNumberOfDevices;i++) {
   b4344:	e7ea      	b.n	b431c <_ZN9LedMatrix8sendByteEhhh+0x40>
    digitalWrite (mySlaveSelectPin, HIGH);
   b4346:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
   b434a:	2101      	movs	r1, #1
}
   b434c:	b002      	add	sp, #8
   b434e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite (mySlaveSelectPin, HIGH);
   b4352:	f001 b916 	b.w	b5582 <digitalWrite>

000b4356 <_ZN9LedMatrix4initEv>:
void LedMatrix::init() {
   b4356:	b537      	push	{r0, r1, r2, r4, r5, lr}
    pinMode(mySlaveSelectPin, OUTPUT);
   b4358:	2101      	movs	r1, #1
void LedMatrix::init() {
   b435a:	4604      	mov	r4, r0
    pinMode(mySlaveSelectPin, OUTPUT);
   b435c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b4360:	f001 f8fe 	bl	b5560 <pinMode>
        instance().begin();
   b4364:	f7ff ff9e 	bl	b42a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4368:	f000 fed8 	bl	b511c <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
   b436c:	f7ff ff9a 	bl	b42a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4370:	2100      	movs	r1, #0
   b4372:	f000 fee7 	bl	b5144 <_ZN8SPIClass11setDataModeEh>
        instance().setClockDivider(divider);
   b4376:	f7ff ff95 	bl	b42a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b437a:	2130      	movs	r1, #48	; 0x30
   b437c:	f000 ff3e 	bl	b51fc <_ZN8SPIClass15setClockDividerEh>
    }
   b4380:	2500      	movs	r5, #0
    for(byte device = 0; device < myNumberOfDevices; device++) {
   b4382:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   b4386:	b2e9      	uxtb	r1, r5
   b4388:	428b      	cmp	r3, r1
   b438a:	d91f      	bls.n	b43cc <_ZN9LedMatrix4initEv+0x76>
        sendByte (device, MAX7219_REG_SCANLIMIT, 7);   // show all 8 digits
   b438c:	2307      	movs	r3, #7
   b438e:	220b      	movs	r2, #11
   b4390:	4620      	mov	r0, r4
   b4392:	9101      	str	r1, [sp, #4]
   b4394:	f7ff ffa2 	bl	b42dc <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_DECODEMODE, 0);  // using an led matrix (not digits)
   b4398:	9901      	ldr	r1, [sp, #4]
   b439a:	2300      	movs	r3, #0
   b439c:	2209      	movs	r2, #9
   b439e:	4620      	mov	r0, r4
   b43a0:	f7ff ff9c 	bl	b42dc <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_DISPLAYTEST, 0); // no display test
   b43a4:	9901      	ldr	r1, [sp, #4]
   b43a6:	2300      	movs	r3, #0
   b43a8:	220f      	movs	r2, #15
   b43aa:	4620      	mov	r0, r4
   b43ac:	f7ff ff96 	bl	b42dc <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_INTENSITY, 0);   // character intensity: range: 0 to 15
   b43b0:	9901      	ldr	r1, [sp, #4]
   b43b2:	2300      	movs	r3, #0
   b43b4:	220a      	movs	r2, #10
   b43b6:	4620      	mov	r0, r4
   b43b8:	f7ff ff90 	bl	b42dc <_ZN9LedMatrix8sendByteEhhh>
        sendByte (device, MAX7219_REG_SHUTDOWN, 1);    // not in shutdown mode (ie. start it up)
   b43bc:	9901      	ldr	r1, [sp, #4]
   b43be:	2301      	movs	r3, #1
   b43c0:	220c      	movs	r2, #12
   b43c2:	4620      	mov	r0, r4
   b43c4:	f7ff ff8a 	bl	b42dc <_ZN9LedMatrix8sendByteEhhh>
    for(byte device = 0; device < myNumberOfDevices; device++) {
   b43c8:	3501      	adds	r5, #1
   b43ca:	e7da      	b.n	b4382 <_ZN9LedMatrix4initEv+0x2c>
}
   b43cc:	b003      	add	sp, #12
   b43ce:	bd30      	pop	{r4, r5, pc}

000b43d0 <_ZN9LedMatrix6commitEv>:
void LedMatrix::commit() {
   b43d0:	b538      	push	{r3, r4, r5, lr}
   b43d2:	4605      	mov	r5, r0
   b43d4:	2300      	movs	r3, #0
   b43d6:	b2d9      	uxtb	r1, r3
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b43d8:	1c5c      	adds	r4, r3, #1
   b43da:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   b43de:	ebb1 0fc3 	cmp.w	r1, r3, lsl #3
   b43e2:	da0a      	bge.n	b43fa <_ZN9LedMatrix6commitEv+0x2a>
        sendByte(col / 8, col % 8 + 1, cols[col]);
   b43e4:	682b      	ldr	r3, [r5, #0]
   b43e6:	f001 0207 	and.w	r2, r1, #7
   b43ea:	5c5b      	ldrb	r3, [r3, r1]
   b43ec:	3201      	adds	r2, #1
   b43ee:	08c9      	lsrs	r1, r1, #3
   b43f0:	4628      	mov	r0, r5
   b43f2:	f7ff ff73 	bl	b42dc <_ZN9LedMatrix8sendByteEhhh>
    for (byte col = 0; col < myNumberOfDevices * 8; col++) {
   b43f6:	4623      	mov	r3, r4
   b43f8:	e7ed      	b.n	b43d6 <_ZN9LedMatrix6commitEv+0x6>
}
   b43fa:	bd38      	pop	{r3, r4, r5, pc}

000b43fc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b43fc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b43fe:	2301      	movs	r3, #1
   b4400:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b4402:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b4404:	4604      	mov	r4, r0
        if (th->func) {
   b4406:	b143      	cbz	r3, b441a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b4408:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b440a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b440c:	2301      	movs	r3, #1
   b440e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b4410:	2000      	movs	r0, #0
    }
   b4412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b4416:	f000 b9bf 	b.w	b4798 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b441a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b441c:	2800      	cmp	r0, #0
   b441e:	d0f5      	beq.n	b440c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b4420:	6883      	ldr	r3, [r0, #8]
   b4422:	b90b      	cbnz	r3, b4428 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b4424:	f001 f8ca 	bl	b55bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4428:	68c3      	ldr	r3, [r0, #12]
   b442a:	e7ee      	b.n	b440a <_ZN6Thread3runEPv+0xe>

000b442c <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b442c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4430:	4604      	mov	r4, r0
   b4432:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b4434:	2014      	movs	r0, #20
   b4436:	491d      	ldr	r1, [pc, #116]	; (b44ac <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b4438:	4690      	mov	r8, r2
   b443a:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b443c:	f001 f8ba 	bl	b55b4 <_ZnwjRKSt9nothrow_t>
   b4440:	b130      	cbz	r0, b4450 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b4442:	2500      	movs	r5, #0
            exited(false) {
   b4444:	e9c0 5500 	strd	r5, r5, [r0]
   b4448:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b444c:	7405      	strb	r5, [r0, #16]
   b444e:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b4450:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b4452:	b198      	cbz	r0, b447c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b4454:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4456:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b445a:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b445e:	4631      	mov	r1, r6
   b4460:	e9cd 0300 	strd	r0, r3, [sp]
   b4464:	4b12      	ldr	r3, [pc, #72]	; (b44b0 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x84>)
   b4466:	3004      	adds	r0, #4
   b4468:	f000 f986 	bl	b4778 <os_thread_create>
   b446c:	b930      	cbnz	r0, b447c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b446e:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b4470:	7c1b      	ldrb	r3, [r3, #16]
   b4472:	b9bb      	cbnz	r3, b44a4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
            HAL_Delay_Milliseconds(1);
   b4474:	2001      	movs	r0, #1
   b4476:	f000 f99f 	bl	b47b8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b447a:	e7f8      	b.n	b446e <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b447c:	6826      	ldr	r6, [r4, #0]
	_M_ptr() = __p;
   b447e:	2300      	movs	r3, #0
   b4480:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b4482:	b17e      	cbz	r6, b44a4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x78>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b4484:	6835      	ldr	r5, [r6, #0]
   b4486:	b14d      	cbz	r5, b449c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x70>
      if (_M_manager)
   b4488:	68ab      	ldr	r3, [r5, #8]
   b448a:	b11b      	cbz	r3, b4494 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b448c:	2203      	movs	r2, #3
   b448e:	4629      	mov	r1, r5
   b4490:	4628      	mov	r0, r5
   b4492:	4798      	blx	r3
	delete __ptr;
   b4494:	2110      	movs	r1, #16
   b4496:	4628      	mov	r0, r5
   b4498:	f7ff fdff 	bl	b409a <_ZdlPvj>
   b449c:	2114      	movs	r1, #20
   b449e:	4630      	mov	r0, r6
   b44a0:	f7ff fdfb 	bl	b409a <_ZdlPvj>
    }
   b44a4:	4620      	mov	r0, r4
   b44a6:	b002      	add	sp, #8
   b44a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b44ac:	000b6100 	.word	0x000b6100
   b44b0:	000b43fd 	.word	0x000b43fd

000b44b4 <_Z17threads_list_initv>:
#include "threads_list.h"

static TaskListData task_data[NUM_THREADS];

void threads_list_init(void)
{
   b44b4:	b507      	push	{r0, r1, r2, lr}
    task_init_descriptor_t threads[NUM_THREADS] = THREAD_LIST;

    // Run each setup function for each task
    for (int n = 0; n < NUM_THREADS; n++)
    {
        threads[n].task_init_fun();
   b44b6:	f000 f815 	bl	b44e4 <_Z15led_thread_initv>
        task_data[n].task_name = threads[n].task_name;
        task_data[n].stack_size = threads[n].stack_size;
        task_data[n].task_priority = threads[n].task_priority;
        task_data[n].param = threads[n].param;

        task_data[n].handler =  new Thread(threads[n].task_name, threads[n].task_fun, threads[n].param, threads[n].task_priority, threads[n].stack_size);
   b44ba:	2004      	movs	r0, #4
   b44bc:	f7ff fde9 	bl	b4092 <_Znwj>
   b44c0:	b140      	cbz	r0, b44d4 <_Z17threads_list_initv+0x20>
   b44c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b44c6:	2300      	movs	r3, #0
   b44c8:	e9cd 3200 	strd	r3, r2, [sp]
   b44cc:	4903      	ldr	r1, [pc, #12]	; (b44dc <_Z17threads_list_initv+0x28>)
   b44ce:	4a04      	ldr	r2, [pc, #16]	; (b44e0 <_Z17threads_list_initv+0x2c>)
   b44d0:	f7ff ffac 	bl	b442c <_ZN6ThreadC1EPKcPFvPvES2_hj>
    }
   b44d4:	b003      	add	sp, #12
   b44d6:	f85d fb04 	ldr.w	pc, [sp], #4
   b44da:	bf00      	nop
   b44dc:	000b5f48 	.word	0x000b5f48
   b44e0:	000b44e9 	.word	0x000b44e9

000b44e4 <_Z15led_thread_initv>:
#include "LedMatrix.h"
#include "spark_wiring_system.h"

void led_thread_init(void){
    // TODO
}
   b44e4:	4770      	bx	lr
	...

000b44e8 <_Z17led_matrix_threadPv>:
#define NUMBER_OF_DEVICES 6
#define CS_PIN A5
LedMatrix ledMatrix = LedMatrix(NUMBER_OF_DEVICES, CS_PIN);

static int x = 0;
void led_matrix_thread(void *params){
   b44e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    ledMatrix.init();
   b44ea:	481e      	ldr	r0, [pc, #120]	; (b4564 <_Z17led_matrix_threadPv+0x7c>)
    ledMatrix.setText("MAX7219 Animation Demo");
    ledMatrix.setNextText("Second text");

    for(;;){
        ledMatrix.clear();
   b44ec:	4c1d      	ldr	r4, [pc, #116]	; (b4564 <_Z17led_matrix_threadPv+0x7c>)
        ledMatrix.scrollTextLeft();
        ledMatrix.drawText();
        ledMatrix.commit();
        delay(50);
        x=x+1;
   b44ee:	4d1e      	ldr	r5, [pc, #120]	; (b4568 <_Z17led_matrix_threadPv+0x80>)
        if (x == 400) {
            ledMatrix.setNextText("Third text");
   b44f0:	4e1e      	ldr	r6, [pc, #120]	; (b456c <_Z17led_matrix_threadPv+0x84>)
    ledMatrix.init();
   b44f2:	f7ff ff30 	bl	b4356 <_ZN9LedMatrix4initEv>
    ledMatrix.setText("MAX7219 Animation Demo");
   b44f6:	491e      	ldr	r1, [pc, #120]	; (b4570 <_Z17led_matrix_threadPv+0x88>)
   b44f8:	4668      	mov	r0, sp
   b44fa:	f000 ff34 	bl	b5366 <_ZN6StringC1EPK19__FlashStringHelper>
   b44fe:	4669      	mov	r1, sp
   b4500:	4818      	ldr	r0, [pc, #96]	; (b4564 <_Z17led_matrix_threadPv+0x7c>)
   b4502:	f7ff fe38 	bl	b4176 <_ZN9LedMatrix7setTextE6String>
   b4506:	4668      	mov	r0, sp
   b4508:	f000 fee2 	bl	b52d0 <_ZN6StringD1Ev>
    ledMatrix.setNextText("Second text");
   b450c:	4919      	ldr	r1, [pc, #100]	; (b4574 <_Z17led_matrix_threadPv+0x8c>)
   b450e:	4668      	mov	r0, sp
   b4510:	f000 ff29 	bl	b5366 <_ZN6StringC1EPK19__FlashStringHelper>
   b4514:	4813      	ldr	r0, [pc, #76]	; (b4564 <_Z17led_matrix_threadPv+0x7c>)
   b4516:	4669      	mov	r1, sp
   b4518:	f7ff fe39 	bl	b418e <_ZN9LedMatrix11setNextTextE6String>
   b451c:	4668      	mov	r0, sp
   b451e:	f000 fed7 	bl	b52d0 <_ZN6StringD1Ev>
        ledMatrix.clear();
   b4522:	4620      	mov	r0, r4
   b4524:	f7ff fe18 	bl	b4158 <_ZN9LedMatrix5clearEv>
        ledMatrix.scrollTextLeft();
   b4528:	4620      	mov	r0, r4
   b452a:	f7ff fe33 	bl	b4194 <_ZN9LedMatrix14scrollTextLeftEv>
        ledMatrix.drawText();
   b452e:	4620      	mov	r0, r4
   b4530:	f7ff fe88 	bl	b4244 <_ZN9LedMatrix8drawTextEv>
        ledMatrix.commit();
   b4534:	4620      	mov	r0, r4
   b4536:	f7ff ff4b 	bl	b43d0 <_ZN9LedMatrix6commitEv>
        delay(50);
   b453a:	2032      	movs	r0, #50	; 0x32
   b453c:	f000 fc24 	bl	b4d88 <delay>
        x=x+1;
   b4540:	682b      	ldr	r3, [r5, #0]
   b4542:	3301      	adds	r3, #1
        if (x == 400) {
   b4544:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
        x=x+1;
   b4548:	602b      	str	r3, [r5, #0]
        if (x == 400) {
   b454a:	d1ea      	bne.n	b4522 <_Z17led_matrix_threadPv+0x3a>
            ledMatrix.setNextText("Third text");
   b454c:	4631      	mov	r1, r6
   b454e:	4668      	mov	r0, sp
   b4550:	f000 ff09 	bl	b5366 <_ZN6StringC1EPK19__FlashStringHelper>
   b4554:	4620      	mov	r0, r4
   b4556:	4669      	mov	r1, sp
   b4558:	f7ff fe19 	bl	b418e <_ZN9LedMatrix11setNextTextE6String>
   b455c:	4668      	mov	r0, sp
   b455e:	f000 feb7 	bl	b52d0 <_ZN6StringD1Ev>
   b4562:	e7de      	b.n	b4522 <_Z17led_matrix_threadPv+0x3a>
   b4564:	2003e658 	.word	0x2003e658
   b4568:	2003e654 	.word	0x2003e654
   b456c:	000b5f7d 	.word	0x000b5f7d
   b4570:	000b5f5a 	.word	0x000b5f5a
   b4574:	000b5f71 	.word	0x000b5f71

000b4578 <_GLOBAL__sub_I__Z15led_thread_initv>:
LedMatrix ledMatrix = LedMatrix(NUMBER_OF_DEVICES, CS_PIN);
   b4578:	4802      	ldr	r0, [pc, #8]	; (b4584 <_GLOBAL__sub_I__Z15led_thread_initv+0xc>)
   b457a:	220e      	movs	r2, #14
   b457c:	2106      	movs	r1, #6
   b457e:	f7ff bda9 	b.w	b40d4 <_ZN9LedMatrixC1Ehh>
   b4582:	bf00      	nop
   b4584:	2003e658 	.word	0x2003e658

000b4588 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <HAL_USB_USART_Init+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	681b      	ldr	r3, [r3, #0]
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	0003024c 	.word	0x0003024c

000b4598 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <HAL_USB_USART_Available_Data+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	691b      	ldr	r3, [r3, #16]
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	0003024c 	.word	0x0003024c

000b45a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	695b      	ldr	r3, [r3, #20]
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	0003024c 	.word	0x0003024c

000b45b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <HAL_USB_USART_Receive_Data+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	699b      	ldr	r3, [r3, #24]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	0003024c 	.word	0x0003024c

000b45c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <HAL_USB_USART_Send_Data+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	69db      	ldr	r3, [r3, #28]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	0003024c 	.word	0x0003024c

000b45d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <HAL_USB_USART_Flush_Data+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	6a1b      	ldr	r3, [r3, #32]
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	0003024c 	.word	0x0003024c

000b45e8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <hal_i2c_write+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	6a1b      	ldr	r3, [r3, #32]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030228 	.word	0x00030228

000b45f8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <hal_i2c_available+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030228 	.word	0x00030228

000b4608 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <hal_i2c_read+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030228 	.word	0x00030228

000b4618 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <hal_i2c_peek+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030228 	.word	0x00030228

000b4628 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <hal_i2c_flush+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	00030228 	.word	0x00030228

000b4638 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <hal_i2c_is_enabled+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030228 	.word	0x00030228

000b4648 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <hal_i2c_init+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	00030228 	.word	0x00030228

000b4658 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <hal_spi_begin+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	681b      	ldr	r3, [r3, #0]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030230 	.word	0x00030230

000b4668 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <hal_spi_set_data_mode+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	68db      	ldr	r3, [r3, #12]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	00030230 	.word	0x00030230

000b4678 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <hal_spi_set_clock_divider+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	691b      	ldr	r3, [r3, #16]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	00030230 	.word	0x00030230

000b4688 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <hal_spi_transfer+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	695b      	ldr	r3, [r3, #20]
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030230 	.word	0x00030230

000b4698 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <hal_spi_init+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	69db      	ldr	r3, [r3, #28]
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	00030230 	.word	0x00030230

000b46a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <hal_spi_is_enabled+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	6a1b      	ldr	r3, [r3, #32]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030230 	.word	0x00030230

000b46b8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <hal_spi_info+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030230 	.word	0x00030230

000b46c8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <hal_spi_acquire+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030230 	.word	0x00030230

000b46d8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <hal_spi_release+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030230 	.word	0x00030230

000b46e8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <hal_usart_write+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	68db      	ldr	r3, [r3, #12]
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	0003023c 	.word	0x0003023c

000b46f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <hal_usart_available+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	691b      	ldr	r3, [r3, #16]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	0003023c 	.word	0x0003023c

000b4708 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <hal_usart_read+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	695b      	ldr	r3, [r3, #20]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	0003023c 	.word	0x0003023c

000b4718 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <hal_usart_peek+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	699b      	ldr	r3, [r3, #24]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	0003023c 	.word	0x0003023c

000b4728 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <hal_usart_flush+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	69db      	ldr	r3, [r3, #28]
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003023c 	.word	0x0003023c

000b4738 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <hal_usart_is_enabled+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6a1b      	ldr	r3, [r3, #32]
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	0003023c 	.word	0x0003023c

000b4748 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <hal_usart_available_data_for_write+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	0003023c 	.word	0x0003023c

000b4758 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <hal_usart_init_ex+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	0003023c 	.word	0x0003023c

000b4768 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <inet_inet_ntop+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	695b      	ldr	r3, [r3, #20]
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030264 	.word	0x00030264

000b4778 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <os_thread_create+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	685b      	ldr	r3, [r3, #4]
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030248 	.word	0x00030248

000b4788 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <os_mutex_recursive_create+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030248 	.word	0x00030248

000b4798 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <os_thread_exit+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	00030248 	.word	0x00030248

000b47a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <HAL_RNG_GetRandomNumber+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	685b      	ldr	r3, [r3, #4]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	00030218 	.word	0x00030218

000b47b8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <HAL_Delay_Milliseconds+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	689b      	ldr	r3, [r3, #8]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	00030218 	.word	0x00030218

000b47c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	695b      	ldr	r3, [r3, #20]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	00030218 	.word	0x00030218

000b47d8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <HAL_Pin_Mode+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	689b      	ldr	r3, [r3, #8]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003022c 	.word	0x0003022c

000b47e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <HAL_Get_Pin_Mode+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	68db      	ldr	r3, [r3, #12]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	0003022c 	.word	0x0003022c

000b47f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <HAL_GPIO_Write+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	691b      	ldr	r3, [r3, #16]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	0003022c 	.word	0x0003022c

000b4808 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <netdb_freeaddrinfo+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	689b      	ldr	r3, [r3, #8]
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030268 	.word	0x00030268

000b4818 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <netdb_getaddrinfo+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	68db      	ldr	r3, [r3, #12]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030268 	.word	0x00030268

000b4828 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <spark_set_random_seed_from_cloud_handler+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030244 	.word	0x00030244

000b4838 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <network_connect+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	685b      	ldr	r3, [r3, #4]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030240 	.word	0x00030240

000b4848 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <network_connecting+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	689b      	ldr	r3, [r3, #8]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	00030240 	.word	0x00030240

000b4858 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <network_disconnect+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	68db      	ldr	r3, [r3, #12]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	00030240 	.word	0x00030240

000b4868 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <network_ready+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	691b      	ldr	r3, [r3, #16]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	00030240 	.word	0x00030240

000b4878 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <network_on+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	695b      	ldr	r3, [r3, #20]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	00030240 	.word	0x00030240

000b4888 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <network_off+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	699b      	ldr	r3, [r3, #24]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030240 	.word	0x00030240

000b4898 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <network_listen+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	69db      	ldr	r3, [r3, #28]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030240 	.word	0x00030240

000b48a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <network_listening+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6a1b      	ldr	r3, [r3, #32]
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030240 	.word	0x00030240

000b48b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <network_set_listen_timeout+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030240 	.word	0x00030240

000b48c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <network_get_listen_timeout+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030240 	.word	0x00030240

000b48d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <network_is_on+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030240 	.word	0x00030240

000b48e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <network_is_off+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030240 	.word	0x00030240

000b48f8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <set_system_mode+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	685b      	ldr	r3, [r3, #4]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030220 	.word	0x00030220

000b4908 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <system_delay_ms+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	695b      	ldr	r3, [r3, #20]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030220 	.word	0x00030220

000b4918 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b03      	ldr	r3, [pc, #12]	; (b4928 <system_ctrl_set_app_request_handler+0x10>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4922:	9301      	str	r3, [sp, #4]
   b4924:	bd08      	pop	{r3, pc}
   b4926:	0000      	.short	0x0000
   b4928:	00030220 	.word	0x00030220

000b492c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b03      	ldr	r3, [pc, #12]	; (b493c <system_ctrl_set_result+0x10>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4936:	9301      	str	r3, [sp, #4]
   b4938:	bd08      	pop	{r3, pc}
   b493a:	0000      	.short	0x0000
   b493c:	00030220 	.word	0x00030220

000b4940 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <malloc+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	681b      	ldr	r3, [r3, #0]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	0003021c 	.word	0x0003021c

000b4950 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <free+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	685b      	ldr	r3, [r3, #4]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	0003021c 	.word	0x0003021c

000b4960 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <realloc+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	689b      	ldr	r3, [r3, #8]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	0003021c 	.word	0x0003021c

000b4970 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <abort+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	0003021c 	.word	0x0003021c

000b4980 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <__assert_func+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	0003021c 	.word	0x0003021c

000b4990 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <newlib_impure_ptr_callback+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	0003021c 	.word	0x0003021c

000b49a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b49a0:	2300      	movs	r3, #0
   b49a2:	6840      	ldr	r0, [r0, #4]
   b49a4:	461a      	mov	r2, r3
   b49a6:	f7ff bf47 	b.w	b4838 <network_connect>

000b49aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b49aa:	6840      	ldr	r0, [r0, #4]
   b49ac:	2200      	movs	r2, #0
   b49ae:	2102      	movs	r1, #2
   b49b0:	f7ff bf52 	b.w	b4858 <network_disconnect>

000b49b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b49b4:	2200      	movs	r2, #0
   b49b6:	6840      	ldr	r0, [r0, #4]
   b49b8:	4611      	mov	r1, r2
   b49ba:	f7ff bf45 	b.w	b4848 <network_connecting>

000b49be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b49be:	2200      	movs	r2, #0
   b49c0:	6840      	ldr	r0, [r0, #4]
   b49c2:	4611      	mov	r1, r2
   b49c4:	f7ff bf50 	b.w	b4868 <network_ready>

000b49c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b49c8:	2300      	movs	r3, #0
   b49ca:	6840      	ldr	r0, [r0, #4]
   b49cc:	461a      	mov	r2, r3
   b49ce:	4619      	mov	r1, r3
   b49d0:	f7ff bf52 	b.w	b4878 <network_on>

000b49d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b49d4:	2300      	movs	r3, #0
   b49d6:	6840      	ldr	r0, [r0, #4]
   b49d8:	461a      	mov	r2, r3
   b49da:	4619      	mov	r1, r3
   b49dc:	f7ff bf54 	b.w	b4888 <network_off>

000b49e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b49e0:	6840      	ldr	r0, [r0, #4]
   b49e2:	2100      	movs	r1, #0
   b49e4:	f7ff bf78 	b.w	b48d8 <network_is_on>

000b49e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b49e8:	6840      	ldr	r0, [r0, #4]
   b49ea:	2100      	movs	r1, #0
   b49ec:	f7ff bf7c 	b.w	b48e8 <network_is_off>

000b49f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b49f0:	6840      	ldr	r0, [r0, #4]
   b49f2:	2200      	movs	r2, #0
   b49f4:	f081 0101 	eor.w	r1, r1, #1
   b49f8:	f7ff bf4e 	b.w	b4898 <network_listen>

000b49fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b49fc:	6840      	ldr	r0, [r0, #4]
   b49fe:	2200      	movs	r2, #0
   b4a00:	f7ff bf5a 	b.w	b48b8 <network_set_listen_timeout>

000b4a04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4a04:	2200      	movs	r2, #0
   b4a06:	6840      	ldr	r0, [r0, #4]
   b4a08:	4611      	mov	r1, r2
   b4a0a:	f7ff bf5d 	b.w	b48c8 <network_get_listen_timeout>

000b4a0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4a0e:	2200      	movs	r2, #0
   b4a10:	6840      	ldr	r0, [r0, #4]
   b4a12:	4611      	mov	r1, r2
   b4a14:	f7ff bf48 	b.w	b48a8 <network_listening>

000b4a18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a1c:	b095      	sub	sp, #84	; 0x54
   b4a1e:	4614      	mov	r4, r2
   b4a20:	460d      	mov	r5, r1
   b4a22:	4607      	mov	r7, r0
    IPAddress addr;
   b4a24:	f000 f972 	bl	b4d0c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4a28:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4a2a:	221c      	movs	r2, #28
   b4a2c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4a2e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4a30:	f000 fddb 	bl	b55ea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4a34:	2340      	movs	r3, #64	; 0x40
   b4a36:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4a38:	4620      	mov	r0, r4
   b4a3a:	466b      	mov	r3, sp
   b4a3c:	aa0c      	add	r2, sp, #48	; 0x30
   b4a3e:	2100      	movs	r1, #0
   b4a40:	f7ff feea 	bl	b4818 <netdb_getaddrinfo>
    if (!r) {
   b4a44:	4604      	mov	r4, r0
   b4a46:	2800      	cmp	r0, #0
   b4a48:	d14b      	bne.n	b4ae2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a4a:	4602      	mov	r2, r0
   b4a4c:	2101      	movs	r1, #1
   b4a4e:	6868      	ldr	r0, [r5, #4]
   b4a50:	f7ff ff0a 	bl	b4868 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a58:	4622      	mov	r2, r4
   b4a5a:	6868      	ldr	r0, [r5, #4]
   b4a5c:	f7ff ff04 	bl	b4868 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a62:	4681      	mov	r9, r0
        bool ok = false;
   b4a64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a66:	2e00      	cmp	r6, #0
   b4a68:	d03b      	beq.n	b4ae2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4a6a:	2900      	cmp	r1, #0
   b4a6c:	d139      	bne.n	b4ae2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4a6e:	6873      	ldr	r3, [r6, #4]
   b4a70:	2b02      	cmp	r3, #2
   b4a72:	d003      	beq.n	b4a7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4a74:	2b0a      	cmp	r3, #10
   b4a76:	d011      	beq.n	b4a9c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a78:	69f6      	ldr	r6, [r6, #28]
   b4a7a:	e7f4      	b.n	b4a66 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4a7c:	f1b8 0f00 	cmp.w	r8, #0
   b4a80:	d0fa      	beq.n	b4a78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4a82:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4a84:	a806      	add	r0, sp, #24
   b4a86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4a88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4a8a:	f000 f96d 	bl	b4d68 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4a90:	1d3c      	adds	r4, r7, #4
   b4a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4a94:	682b      	ldr	r3, [r5, #0]
   b4a96:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4a98:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4a9a:	e7ed      	b.n	b4a78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4a9c:	f1b9 0f00 	cmp.w	r9, #0
   b4aa0:	d0ea      	beq.n	b4a78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4aa2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4aa4:	2210      	movs	r2, #16
   b4aa6:	a801      	add	r0, sp, #4
   b4aa8:	f000 fd9f 	bl	b55ea <memset>
                    a.v = 6;
   b4aac:	2306      	movs	r3, #6
   b4aae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4ab2:	ad01      	add	r5, sp, #4
   b4ab4:	f104 0308 	add.w	r3, r4, #8
   b4ab8:	3418      	adds	r4, #24
   b4aba:	6818      	ldr	r0, [r3, #0]
   b4abc:	6859      	ldr	r1, [r3, #4]
   b4abe:	462a      	mov	r2, r5
   b4ac0:	c203      	stmia	r2!, {r0, r1}
   b4ac2:	3308      	adds	r3, #8
   b4ac4:	42a3      	cmp	r3, r4
   b4ac6:	4615      	mov	r5, r2
   b4ac8:	d1f7      	bne.n	b4aba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4aca:	a901      	add	r1, sp, #4
   b4acc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ace:	ad07      	add	r5, sp, #28
   b4ad0:	f000 f92a 	bl	b4d28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ad6:	1d3c      	adds	r4, r7, #4
   b4ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ada:	682b      	ldr	r3, [r5, #0]
   b4adc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4ade:	4649      	mov	r1, r9
   b4ae0:	e7ca      	b.n	b4a78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4ae2:	9800      	ldr	r0, [sp, #0]
   b4ae4:	f7ff fe90 	bl	b4808 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4ae8:	4638      	mov	r0, r7
   b4aea:	b015      	add	sp, #84	; 0x54
   b4aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4af0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4af0:	4b02      	ldr	r3, [pc, #8]	; (b4afc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4af2:	4a03      	ldr	r2, [pc, #12]	; (b4b00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4af4:	601a      	str	r2, [r3, #0]
   b4af6:	2200      	movs	r2, #0
   b4af8:	605a      	str	r2, [r3, #4]

} // spark
   b4afa:	4770      	bx	lr
   b4afc:	2003e69c 	.word	0x2003e69c
   b4b00:	000b5f90 	.word	0x000b5f90

000b4b04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4b04:	4770      	bx	lr

000b4b06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b08:	4606      	mov	r6, r0
   b4b0a:	4615      	mov	r5, r2
   b4b0c:	460c      	mov	r4, r1
   b4b0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4b10:	42bc      	cmp	r4, r7
   b4b12:	d006      	beq.n	b4b22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4b14:	6833      	ldr	r3, [r6, #0]
   b4b16:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4b1a:	689b      	ldr	r3, [r3, #8]
   b4b1c:	4630      	mov	r0, r6
   b4b1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4b20:	e7f6      	b.n	b4b10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4b22:	4628      	mov	r0, r5
   b4b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4b26:	7c00      	ldrb	r0, [r0, #16]
   b4b28:	2200      	movs	r2, #0
   b4b2a:	f7ff bd5d 	b.w	b45e8 <hal_i2c_write>

000b4b2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4b2e:	7c00      	ldrb	r0, [r0, #16]
   b4b30:	2100      	movs	r1, #0
   b4b32:	f7ff bd61 	b.w	b45f8 <hal_i2c_available>

000b4b36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4b36:	7c00      	ldrb	r0, [r0, #16]
   b4b38:	2100      	movs	r1, #0
   b4b3a:	f7ff bd65 	b.w	b4608 <hal_i2c_read>

000b4b3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4b3e:	7c00      	ldrb	r0, [r0, #16]
   b4b40:	2100      	movs	r1, #0
   b4b42:	f7ff bd69 	b.w	b4618 <hal_i2c_peek>

000b4b46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4b46:	7c00      	ldrb	r0, [r0, #16]
   b4b48:	2100      	movs	r1, #0
   b4b4a:	f7ff bd6d 	b.w	b4628 <hal_i2c_flush>

000b4b4e <_ZN7TwoWireD0Ev>:
   b4b4e:	b510      	push	{r4, lr}
   b4b50:	2114      	movs	r1, #20
   b4b52:	4604      	mov	r4, r0
   b4b54:	f7ff faa1 	bl	b409a <_ZdlPvj>
   b4b58:	4620      	mov	r0, r4
   b4b5a:	bd10      	pop	{r4, pc}

000b4b5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4b5c:	b538      	push	{r3, r4, r5, lr}
   b4b5e:	4604      	mov	r4, r0
   b4b60:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b66:	2200      	movs	r2, #0
   b4b68:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4b6c:	4b09      	ldr	r3, [pc, #36]	; (b4b94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4b6e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4b70:	4608      	mov	r0, r1
   b4b72:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4b74:	4629      	mov	r1, r5
   b4b76:	f7ff fd67 	bl	b4648 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4b7a:	30bf      	adds	r0, #191	; 0xbf
   b4b7c:	d108      	bne.n	b4b90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4b7e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4b80:	07db      	lsls	r3, r3, #31
   b4b82:	d505      	bpl.n	b4b90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4b84:	6868      	ldr	r0, [r5, #4]
   b4b86:	f7ff fee3 	bl	b4950 <free>
    free(conf.tx_buffer);
   b4b8a:	68e8      	ldr	r0, [r5, #12]
   b4b8c:	f7ff fee0 	bl	b4950 <free>
}
   b4b90:	4620      	mov	r0, r4
   b4b92:	bd38      	pop	{r3, r4, r5, pc}
   b4b94:	000b5fcc 	.word	0x000b5fcc

000b4b98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4b98:	7441      	strb	r1, [r0, #17]
}
   b4b9a:	4770      	bx	lr

000b4b9c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b9c:	4770      	bx	lr

000b4b9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4b9e:	4770      	bx	lr

000b4ba0 <_ZN9USBSerial4readEv>:
{
   b4ba0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ba2:	2100      	movs	r1, #0
   b4ba4:	7c00      	ldrb	r0, [r0, #16]
   b4ba6:	f7ff fd07 	bl	b45b8 <HAL_USB_USART_Receive_Data>
}
   b4baa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4bae:	bd08      	pop	{r3, pc}

000b4bb0 <_ZN9USBSerial4peekEv>:
{
   b4bb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4bb2:	2101      	movs	r1, #1
   b4bb4:	7c00      	ldrb	r0, [r0, #16]
   b4bb6:	f7ff fcff 	bl	b45b8 <HAL_USB_USART_Receive_Data>
}
   b4bba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4bbe:	bd08      	pop	{r3, pc}

000b4bc0 <_ZN9USBSerial17availableForWriteEv>:
{
   b4bc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4bc2:	7c00      	ldrb	r0, [r0, #16]
   b4bc4:	f7ff fcf0 	bl	b45a8 <HAL_USB_USART_Available_Data_For_Write>
}
   b4bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bcc:	bd08      	pop	{r3, pc}

000b4bce <_ZN9USBSerial9availableEv>:
{
   b4bce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4bd0:	7c00      	ldrb	r0, [r0, #16]
   b4bd2:	f7ff fce1 	bl	b4598 <HAL_USB_USART_Available_Data>
}
   b4bd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bda:	bd08      	pop	{r3, pc}

000b4bdc <_ZN9USBSerial5writeEh>:
{
   b4bdc:	b513      	push	{r0, r1, r4, lr}
   b4bde:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4be0:	7c00      	ldrb	r0, [r0, #16]
{
   b4be2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4be4:	f7ff fce0 	bl	b45a8 <HAL_USB_USART_Available_Data_For_Write>
   b4be8:	2800      	cmp	r0, #0
   b4bea:	9901      	ldr	r1, [sp, #4]
   b4bec:	dc01      	bgt.n	b4bf2 <_ZN9USBSerial5writeEh+0x16>
   b4bee:	7c60      	ldrb	r0, [r4, #17]
   b4bf0:	b120      	cbz	r0, b4bfc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4bf2:	7c20      	ldrb	r0, [r4, #16]
   b4bf4:	f7ff fce8 	bl	b45c8 <HAL_USB_USART_Send_Data>
   b4bf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4bfc:	b002      	add	sp, #8
   b4bfe:	bd10      	pop	{r4, pc}

000b4c00 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4c00:	7c00      	ldrb	r0, [r0, #16]
   b4c02:	f7ff bce9 	b.w	b45d8 <HAL_USB_USART_Flush_Data>

000b4c06 <_ZN9USBSerialD0Ev>:
   b4c06:	b510      	push	{r4, lr}
   b4c08:	2114      	movs	r1, #20
   b4c0a:	4604      	mov	r4, r0
   b4c0c:	f7ff fa45 	bl	b409a <_ZdlPvj>
   b4c10:	4620      	mov	r0, r4
   b4c12:	bd10      	pop	{r4, pc}

000b4c14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4c14:	b510      	push	{r4, lr}
   b4c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c1a:	4604      	mov	r4, r0
   b4c1c:	4608      	mov	r0, r1
   b4c1e:	2100      	movs	r1, #0
   b4c20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4c24:	4b04      	ldr	r3, [pc, #16]	; (b4c38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4c26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c28:	2301      	movs	r3, #1
  _serial = serial;
   b4c2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4c2e:	4611      	mov	r1, r2
   b4c30:	f7ff fcaa 	bl	b4588 <HAL_USB_USART_Init>
}
   b4c34:	4620      	mov	r0, r4
   b4c36:	bd10      	pop	{r4, pc}
   b4c38:	000b5ff4 	.word	0x000b5ff4

000b4c3c <_Z19acquireSerialBufferv>:
{
   b4c3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4c3e:	2214      	movs	r2, #20
{
   b4c40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4c42:	2100      	movs	r1, #0
   b4c44:	f000 fcd1 	bl	b55ea <memset>
}
   b4c48:	4620      	mov	r0, r4
   b4c4a:	bd10      	pop	{r4, pc}

000b4c4c <_Z16_fetch_usbserialv>:
{
   b4c4c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c4e:	4c0f      	ldr	r4, [pc, #60]	; (b4c8c <_Z16_fetch_usbserialv+0x40>)
{
   b4c50:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4c52:	a803      	add	r0, sp, #12
   b4c54:	f7ff fff2 	bl	b4c3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c58:	7821      	ldrb	r1, [r4, #0]
   b4c5a:	f3bf 8f5b 	dmb	ish
   b4c5e:	f011 0101 	ands.w	r1, r1, #1
   b4c62:	d10f      	bne.n	b4c84 <_Z16_fetch_usbserialv+0x38>
   b4c64:	4620      	mov	r0, r4
   b4c66:	9101      	str	r1, [sp, #4]
   b4c68:	f7ff fa19 	bl	b409e <__cxa_guard_acquire>
   b4c6c:	9901      	ldr	r1, [sp, #4]
   b4c6e:	b148      	cbz	r0, b4c84 <_Z16_fetch_usbserialv+0x38>
   b4c70:	aa03      	add	r2, sp, #12
   b4c72:	4807      	ldr	r0, [pc, #28]	; (b4c90 <_Z16_fetch_usbserialv+0x44>)
   b4c74:	f7ff ffce 	bl	b4c14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4c78:	4620      	mov	r0, r4
   b4c7a:	f7ff fa15 	bl	b40a8 <__cxa_guard_release>
   b4c7e:	4805      	ldr	r0, [pc, #20]	; (b4c94 <_Z16_fetch_usbserialv+0x48>)
   b4c80:	f000 fc9f 	bl	b55c2 <atexit>
	return _usbserial;
}
   b4c84:	4802      	ldr	r0, [pc, #8]	; (b4c90 <_Z16_fetch_usbserialv+0x44>)
   b4c86:	b008      	add	sp, #32
   b4c88:	bd10      	pop	{r4, pc}
   b4c8a:	bf00      	nop
   b4c8c:	2003e6a4 	.word	0x2003e6a4
   b4c90:	2003e6a8 	.word	0x2003e6a8
   b4c94:	000b4b9d 	.word	0x000b4b9d

000b4c98 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b4c98:	4770      	bx	lr

000b4c9a <_ZN9IPAddressD0Ev>:
   b4c9a:	b510      	push	{r4, lr}
   b4c9c:	2118      	movs	r1, #24
   b4c9e:	4604      	mov	r4, r0
   b4ca0:	f7ff f9fb 	bl	b409a <_ZdlPvj>
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	bd10      	pop	{r4, pc}

000b4ca8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4caa:	7d03      	ldrb	r3, [r0, #20]
   b4cac:	2b06      	cmp	r3, #6
{
   b4cae:	b08d      	sub	sp, #52	; 0x34
   b4cb0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4cb2:	f100 0704 	add.w	r7, r0, #4
   b4cb6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4cba:	d012      	beq.n	b4ce2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4cbc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4cc0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4cc4:	220a      	movs	r2, #10
   b4cc6:	4630      	mov	r0, r6
   b4cc8:	f000 f98d 	bl	b4fe6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4ccc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4cce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4cd0:	d019      	beq.n	b4d06 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4cd2:	2c00      	cmp	r4, #0
   b4cd4:	d0f4      	beq.n	b4cc0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4cd6:	212e      	movs	r1, #46	; 0x2e
   b4cd8:	4630      	mov	r0, r6
   b4cda:	f000 f981 	bl	b4fe0 <_ZN5Print5printEc>
   b4cde:	4404      	add	r4, r0
   b4ce0:	e7ee      	b.n	b4cc0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ce2:	232f      	movs	r3, #47	; 0x2f
   b4ce4:	466a      	mov	r2, sp
   b4ce6:	4639      	mov	r1, r7
   b4ce8:	200a      	movs	r0, #10
		buf[0] = 0;
   b4cea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4cee:	f7ff fd3b 	bl	b4768 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4cf2:	4668      	mov	r0, sp
   b4cf4:	f000 fcb0 	bl	b5658 <strlen>
   b4cf8:	6833      	ldr	r3, [r6, #0]
   b4cfa:	4602      	mov	r2, r0
   b4cfc:	68db      	ldr	r3, [r3, #12]
   b4cfe:	4669      	mov	r1, sp
   b4d00:	4630      	mov	r0, r6
   b4d02:	4798      	blx	r3
   b4d04:	4604      	mov	r4, r0
    }
    return n;
}
   b4d06:	4620      	mov	r0, r4
   b4d08:	b00d      	add	sp, #52	; 0x34
   b4d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4d0c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4d0c:	b510      	push	{r4, lr}
   b4d0e:	4b05      	ldr	r3, [pc, #20]	; (b4d24 <_ZN9IPAddressC1Ev+0x18>)
   b4d10:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4d12:	2211      	movs	r2, #17
   b4d14:	f840 3b04 	str.w	r3, [r0], #4
   b4d18:	2100      	movs	r1, #0
   b4d1a:	f000 fc66 	bl	b55ea <memset>
}
   b4d1e:	4620      	mov	r0, r4
   b4d20:	bd10      	pop	{r4, pc}
   b4d22:	bf00      	nop
   b4d24:	000b6024 	.word	0x000b6024

000b4d28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4d28:	4603      	mov	r3, r0
   b4d2a:	4a07      	ldr	r2, [pc, #28]	; (b4d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4d2c:	b510      	push	{r4, lr}
   b4d2e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4d32:	f101 0210 	add.w	r2, r1, #16
   b4d36:	f851 4b04 	ldr.w	r4, [r1], #4
   b4d3a:	f843 4b04 	str.w	r4, [r3], #4
   b4d3e:	4291      	cmp	r1, r2
   b4d40:	d1f9      	bne.n	b4d36 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4d42:	780a      	ldrb	r2, [r1, #0]
   b4d44:	701a      	strb	r2, [r3, #0]
}
   b4d46:	bd10      	pop	{r4, pc}
   b4d48:	000b6024 	.word	0x000b6024

000b4d4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4d4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4d4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4d52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4d56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4d5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4d5e:	2304      	movs	r3, #4
   b4d60:	6041      	str	r1, [r0, #4]
   b4d62:	7503      	strb	r3, [r0, #20]
}
   b4d64:	bd10      	pop	{r4, pc}
	...

000b4d68 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4d68:	b507      	push	{r0, r1, r2, lr}
   b4d6a:	4b06      	ldr	r3, [pc, #24]	; (b4d84 <_ZN9IPAddressC1EPKh+0x1c>)
   b4d6c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4d6e:	78cb      	ldrb	r3, [r1, #3]
   b4d70:	9300      	str	r3, [sp, #0]
   b4d72:	788b      	ldrb	r3, [r1, #2]
   b4d74:	784a      	ldrb	r2, [r1, #1]
   b4d76:	7809      	ldrb	r1, [r1, #0]
   b4d78:	f7ff ffe8 	bl	b4d4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4d7c:	b003      	add	sp, #12
   b4d7e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d82:	bf00      	nop
   b4d84:	000b6024 	.word	0x000b6024

000b4d88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4d88:	2100      	movs	r1, #0
   b4d8a:	f7ff bdbd 	b.w	b4908 <system_delay_ms>
	...

000b4d90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4d90:	4b01      	ldr	r3, [pc, #4]	; (b4d98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4d92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4d94:	4770      	bx	lr
   b4d96:	bf00      	nop
   b4d98:	2003e5e0 	.word	0x2003e5e0

000b4d9c <serialEventRun>:
{
   b4d9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4d9e:	4b0b      	ldr	r3, [pc, #44]	; (b4dcc <serialEventRun+0x30>)
   b4da0:	b143      	cbz	r3, b4db4 <serialEventRun+0x18>
   b4da2:	f7ff ff53 	bl	b4c4c <_Z16_fetch_usbserialv>
   b4da6:	6803      	ldr	r3, [r0, #0]
   b4da8:	691b      	ldr	r3, [r3, #16]
   b4daa:	4798      	blx	r3
   b4dac:	2800      	cmp	r0, #0
   b4dae:	dd01      	ble.n	b4db4 <serialEventRun+0x18>
        serialEvent();
   b4db0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4db4:	4b06      	ldr	r3, [pc, #24]	; (b4dd0 <serialEventRun+0x34>)
   b4db6:	b143      	cbz	r3, b4dca <serialEventRun+0x2e>
   b4db8:	f000 fb70 	bl	b549c <_Z22__fetch_global_Serial1v>
   b4dbc:	6803      	ldr	r3, [r0, #0]
   b4dbe:	691b      	ldr	r3, [r3, #16]
   b4dc0:	4798      	blx	r3
   b4dc2:	2800      	cmp	r0, #0
   b4dc4:	dd01      	ble.n	b4dca <serialEventRun+0x2e>
        serialEvent1();
   b4dc6:	f3af 8000 	nop.w
}
   b4dca:	bd08      	pop	{r3, pc}
	...

000b4dd4 <_post_loop>:
{
   b4dd4:	b508      	push	{r3, lr}
	serialEventRun();
   b4dd6:	f7ff ffe1 	bl	b4d9c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4dda:	f7ff fcf5 	bl	b47c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4dde:	4b01      	ldr	r3, [pc, #4]	; (b4de4 <_post_loop+0x10>)
   b4de0:	6018      	str	r0, [r3, #0]
}
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	2003e740 	.word	0x2003e740

000b4de8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4de8:	4805      	ldr	r0, [pc, #20]	; (b4e00 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4dea:	4a06      	ldr	r2, [pc, #24]	; (b4e04 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4dec:	4906      	ldr	r1, [pc, #24]	; (b4e08 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4dee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4df0:	1a12      	subs	r2, r2, r0
   b4df2:	f000 fbec 	bl	b55ce <memcpy>
    __backup_sram_signature = signature;
   b4df6:	4b05      	ldr	r3, [pc, #20]	; (b4e0c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4df8:	4a05      	ldr	r2, [pc, #20]	; (b4e10 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4dfa:	601a      	str	r2, [r3, #0]
}
   b4dfc:	bd08      	pop	{r3, pc}
   b4dfe:	bf00      	nop
   b4e00:	2003f400 	.word	0x2003f400
   b4e04:	2003f404 	.word	0x2003f404
   b4e08:	000b61e4 	.word	0x000b61e4
   b4e0c:	2003f400 	.word	0x2003f400
   b4e10:	9a271c1e 	.word	0x9a271c1e

000b4e14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4e14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e16:	2300      	movs	r3, #0
   b4e18:	9300      	str	r3, [sp, #0]
   b4e1a:	461a      	mov	r2, r3
   b4e1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e20:	f7ff fd84 	bl	b492c <system_ctrl_set_result>
}
   b4e24:	b003      	add	sp, #12
   b4e26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4e2c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4e2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4e2e:	8843      	ldrh	r3, [r0, #2]
   b4e30:	2b0a      	cmp	r3, #10
   b4e32:	d008      	beq.n	b4e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4e34:	2b50      	cmp	r3, #80	; 0x50
   b4e36:	d10b      	bne.n	b4e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4e38:	4b09      	ldr	r3, [pc, #36]	; (b4e60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4e3a:	681b      	ldr	r3, [r3, #0]
   b4e3c:	b14b      	cbz	r3, b4e52 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4e3e:	b003      	add	sp, #12
   b4e40:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4e44:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4e46:	f7ff ffe5 	bl	b4e14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4e4a:	b003      	add	sp, #12
   b4e4c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e50:	2300      	movs	r3, #0
   b4e52:	9300      	str	r3, [sp, #0]
   b4e54:	461a      	mov	r2, r3
   b4e56:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e5a:	f7ff fd67 	bl	b492c <system_ctrl_set_result>
}
   b4e5e:	e7f4      	b.n	b4e4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4e60:	2003e6c0 	.word	0x2003e6c0

000b4e64 <module_user_init_hook>:
{
   b4e64:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4e66:	4812      	ldr	r0, [pc, #72]	; (b4eb0 <module_user_init_hook+0x4c>)
   b4e68:	2100      	movs	r1, #0
   b4e6a:	f7ff fd91 	bl	b4990 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4e6e:	4b11      	ldr	r3, [pc, #68]	; (b4eb4 <module_user_init_hook+0x50>)
   b4e70:	681a      	ldr	r2, [r3, #0]
   b4e72:	4b11      	ldr	r3, [pc, #68]	; (b4eb8 <module_user_init_hook+0x54>)
   b4e74:	429a      	cmp	r2, r3
   b4e76:	4b11      	ldr	r3, [pc, #68]	; (b4ebc <module_user_init_hook+0x58>)
   b4e78:	bf0c      	ite	eq
   b4e7a:	2201      	moveq	r2, #1
   b4e7c:	2200      	movne	r2, #0
   b4e7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4e80:	d001      	beq.n	b4e86 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4e82:	f7ff ffb1 	bl	b4de8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4e86:	f7ff fc8f 	bl	b47a8 <HAL_RNG_GetRandomNumber>
   b4e8a:	4604      	mov	r4, r0
    srand(seed);
   b4e8c:	f000 fbb6 	bl	b55fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4e90:	4b0b      	ldr	r3, [pc, #44]	; (b4ec0 <module_user_init_hook+0x5c>)
   b4e92:	b113      	cbz	r3, b4e9a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4e94:	4620      	mov	r0, r4
   b4e96:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4e9a:	2100      	movs	r1, #0
   b4e9c:	4808      	ldr	r0, [pc, #32]	; (b4ec0 <module_user_init_hook+0x5c>)
   b4e9e:	f7ff fcc3 	bl	b4828 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4ea6:	4807      	ldr	r0, [pc, #28]	; (b4ec4 <module_user_init_hook+0x60>)
   b4ea8:	2100      	movs	r1, #0
   b4eaa:	f7ff bd35 	b.w	b4918 <system_ctrl_set_app_request_handler>
   b4eae:	bf00      	nop
   b4eb0:	000b4d91 	.word	0x000b4d91
   b4eb4:	2003f400 	.word	0x2003f400
   b4eb8:	9a271c1e 	.word	0x9a271c1e
   b4ebc:	2003e6bc 	.word	0x2003e6bc
   b4ec0:	00000000 	.word	0x00000000
   b4ec4:	000b4e2d 	.word	0x000b4e2d

000b4ec8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4ec8:	2200      	movs	r2, #0
   b4eca:	6840      	ldr	r0, [r0, #4]
   b4ecc:	4611      	mov	r1, r2
   b4ece:	f7ff bccb 	b.w	b4868 <network_ready>

000b4ed2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4ed2:	2200      	movs	r2, #0
   b4ed4:	6840      	ldr	r0, [r0, #4]
   b4ed6:	4611      	mov	r1, r2
   b4ed8:	f7ff bce6 	b.w	b48a8 <network_listening>

000b4edc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4edc:	2200      	movs	r2, #0
   b4ede:	6840      	ldr	r0, [r0, #4]
   b4ee0:	4611      	mov	r1, r2
   b4ee2:	f7ff bcf1 	b.w	b48c8 <network_get_listen_timeout>

000b4ee6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ee6:	6840      	ldr	r0, [r0, #4]
   b4ee8:	2200      	movs	r2, #0
   b4eea:	f7ff bce5 	b.w	b48b8 <network_set_listen_timeout>

000b4eee <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4eee:	6840      	ldr	r0, [r0, #4]
   b4ef0:	2200      	movs	r2, #0
   b4ef2:	f081 0101 	eor.w	r1, r1, #1
   b4ef6:	f7ff bccf 	b.w	b4898 <network_listen>

000b4efa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4efa:	2300      	movs	r3, #0
   b4efc:	6840      	ldr	r0, [r0, #4]
   b4efe:	461a      	mov	r2, r3
   b4f00:	4619      	mov	r1, r3
   b4f02:	f7ff bcc1 	b.w	b4888 <network_off>

000b4f06 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4f06:	2300      	movs	r3, #0
   b4f08:	6840      	ldr	r0, [r0, #4]
   b4f0a:	461a      	mov	r2, r3
   b4f0c:	4619      	mov	r1, r3
   b4f0e:	f7ff bcb3 	b.w	b4878 <network_on>

000b4f12 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4f12:	2200      	movs	r2, #0
   b4f14:	6840      	ldr	r0, [r0, #4]
   b4f16:	4611      	mov	r1, r2
   b4f18:	f7ff bc96 	b.w	b4848 <network_connecting>

000b4f1c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f1c:	6840      	ldr	r0, [r0, #4]
   b4f1e:	2200      	movs	r2, #0
   b4f20:	2102      	movs	r1, #2
   b4f22:	f7ff bc99 	b.w	b4858 <network_disconnect>

000b4f26 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f26:	2300      	movs	r3, #0
   b4f28:	6840      	ldr	r0, [r0, #4]
   b4f2a:	461a      	mov	r2, r3
   b4f2c:	f7ff bc84 	b.w	b4838 <network_connect>

000b4f30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4f30:	4b08      	ldr	r3, [pc, #32]	; (b4f54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4f32:	b510      	push	{r4, lr}
   b4f34:	2428      	movs	r4, #40	; 0x28
   b4f36:	4622      	mov	r2, r4
   b4f38:	4618      	mov	r0, r3
   b4f3a:	2100      	movs	r1, #0
   b4f3c:	f000 fb55 	bl	b55ea <memset>
   b4f40:	4b05      	ldr	r3, [pc, #20]	; (b4f58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4f42:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4f48:	6042      	str	r2, [r0, #4]
   b4f4a:	2204      	movs	r2, #4
   b4f4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4f4e:	4a03      	ldr	r2, [pc, #12]	; (b4f5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4f50:	601a      	str	r2, [r3, #0]
   b4f52:	bd10      	pop	{r4, pc}
   b4f54:	2003e6cc 	.word	0x2003e6cc
   b4f58:	2003e6c4 	.word	0x2003e6c4
   b4f5c:	000b6038 	.word	0x000b6038

000b4f60 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4f60:	4b01      	ldr	r3, [pc, #4]	; (b4f68 <_GLOBAL__sub_I_RGB+0x8>)
   b4f62:	2200      	movs	r2, #0
   b4f64:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4f66:	4770      	bx	lr
   b4f68:	2003e6f4 	.word	0x2003e6f4

000b4f6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4f6c:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4f6e:	681a      	ldr	r2, [r3, #0]
   b4f70:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4f72:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4f74:	4770      	bx	lr
   b4f76:	bf00      	nop
   b4f78:	2003e5dc 	.word	0x2003e5dc
   b4f7c:	2003e704 	.word	0x2003e704

000b4f80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4f80:	4b01      	ldr	r3, [pc, #4]	; (b4f88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4f82:	4a02      	ldr	r2, [pc, #8]	; (b4f8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4f84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4f86:	4770      	bx	lr
   b4f88:	2003e708 	.word	0x2003e708
   b4f8c:	000b6088 	.word	0x000b6088

000b4f90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f92:	4606      	mov	r6, r0
   b4f94:	460d      	mov	r5, r1
  size_t n = 0;
   b4f96:	188f      	adds	r7, r1, r2
   b4f98:	2400      	movs	r4, #0
  while (size--) {
   b4f9a:	42bd      	cmp	r5, r7
   b4f9c:	d00c      	beq.n	b4fb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4f9e:	6833      	ldr	r3, [r6, #0]
   b4fa0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4fa4:	689b      	ldr	r3, [r3, #8]
   b4fa6:	4630      	mov	r0, r6
   b4fa8:	4798      	blx	r3
     if (chunk>=0)
   b4faa:	1e03      	subs	r3, r0, #0
   b4fac:	db01      	blt.n	b4fb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4fae:	441c      	add	r4, r3
  while (size--) {
   b4fb0:	e7f3      	b.n	b4f9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4fb2:	2c00      	cmp	r4, #0
   b4fb4:	bf08      	it	eq
   b4fb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4fb8:	4620      	mov	r0, r4
   b4fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4fbc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4fbc:	b513      	push	{r0, r1, r4, lr}
   b4fbe:	4604      	mov	r4, r0
    }
   b4fc0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4fc2:	b159      	cbz	r1, b4fdc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4fc4:	9101      	str	r1, [sp, #4]
   b4fc6:	f000 fb47 	bl	b5658 <strlen>
   b4fca:	6823      	ldr	r3, [r4, #0]
   b4fcc:	9901      	ldr	r1, [sp, #4]
   b4fce:	68db      	ldr	r3, [r3, #12]
   b4fd0:	4602      	mov	r2, r0
   b4fd2:	4620      	mov	r0, r4
    }
   b4fd4:	b002      	add	sp, #8
   b4fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4fda:	4718      	bx	r3
    }
   b4fdc:	b002      	add	sp, #8
   b4fde:	bd10      	pop	{r4, pc}

000b4fe0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4fe0:	6803      	ldr	r3, [r0, #0]
   b4fe2:	689b      	ldr	r3, [r3, #8]
   b4fe4:	4718      	bx	r3

000b4fe6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4fe6:	b530      	push	{r4, r5, lr}
   b4fe8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4fea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4fec:	2a01      	cmp	r2, #1
  *str = '\0';
   b4fee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4ff2:	bf98      	it	ls
   b4ff4:	220a      	movls	r2, #10
   b4ff6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4ff8:	460d      	mov	r5, r1
   b4ffa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4ffe:	fb01 5312 	mls	r3, r1, r2, r5
   b5002:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5006:	2b09      	cmp	r3, #9
   b5008:	bf94      	ite	ls
   b500a:	3330      	addls	r3, #48	; 0x30
   b500c:	3337      	addhi	r3, #55	; 0x37
   b500e:	b2db      	uxtb	r3, r3
  } while(n);
   b5010:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5012:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5016:	d9ef      	bls.n	b4ff8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5018:	4621      	mov	r1, r4
   b501a:	f7ff ffcf 	bl	b4fbc <_ZN5Print5writeEPKc>
}
   b501e:	b00b      	add	sp, #44	; 0x2c
   b5020:	bd30      	pop	{r4, r5, pc}
	...

000b5024 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5024:	4802      	ldr	r0, [pc, #8]	; (b5030 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5026:	2300      	movs	r3, #0
   b5028:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b502a:	f7ff bbad 	b.w	b4788 <os_mutex_recursive_create>
   b502e:	bf00      	nop
   b5030:	2003e70c 	.word	0x2003e70c

000b5034 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5034:	4770      	bx	lr

000b5036 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5036:	7441      	strb	r1, [r0, #17]
}
   b5038:	4770      	bx	lr

000b503a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b503a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b503c:	7c00      	ldrb	r0, [r0, #16]
   b503e:	f7ff fb83 	bl	b4748 <hal_usart_available_data_for_write>
}
   b5042:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5046:	bd08      	pop	{r3, pc}

000b5048 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5048:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b504a:	7c00      	ldrb	r0, [r0, #16]
   b504c:	f7ff fb54 	bl	b46f8 <hal_usart_available>
}
   b5050:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5054:	bd08      	pop	{r3, pc}

000b5056 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5056:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5058:	7c00      	ldrb	r0, [r0, #16]
   b505a:	f7ff fb5d 	bl	b4718 <hal_usart_peek>
}
   b505e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5062:	bd08      	pop	{r3, pc}

000b5064 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5064:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5066:	7c00      	ldrb	r0, [r0, #16]
   b5068:	f7ff fb4e 	bl	b4708 <hal_usart_read>
}
   b506c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5070:	bd08      	pop	{r3, pc}

000b5072 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5072:	7c00      	ldrb	r0, [r0, #16]
   b5074:	f7ff bb58 	b.w	b4728 <hal_usart_flush>

000b5078 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5078:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b507a:	7c45      	ldrb	r5, [r0, #17]
{
   b507c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b507e:	b12d      	cbz	r5, b508c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5080:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5082:	b003      	add	sp, #12
   b5084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5088:	f7ff bb2e 	b.w	b46e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b508c:	7c00      	ldrb	r0, [r0, #16]
   b508e:	9101      	str	r1, [sp, #4]
   b5090:	f7ff fb5a 	bl	b4748 <hal_usart_available_data_for_write>
   b5094:	2800      	cmp	r0, #0
   b5096:	9901      	ldr	r1, [sp, #4]
   b5098:	dcf2      	bgt.n	b5080 <_ZN11USARTSerial5writeEh+0x8>
}
   b509a:	4628      	mov	r0, r5
   b509c:	b003      	add	sp, #12
   b509e:	bd30      	pop	{r4, r5, pc}

000b50a0 <_ZN11USARTSerialD0Ev>:
   b50a0:	b510      	push	{r4, lr}
   b50a2:	2114      	movs	r1, #20
   b50a4:	4604      	mov	r4, r0
   b50a6:	f7fe fff8 	bl	b409a <_ZdlPvj>
   b50aa:	4620      	mov	r0, r4
   b50ac:	bd10      	pop	{r4, pc}
	...

000b50b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b50b0:	b510      	push	{r4, lr}
   b50b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50b6:	4604      	mov	r4, r0
   b50b8:	4608      	mov	r0, r1
   b50ba:	4611      	mov	r1, r2
   b50bc:	2200      	movs	r2, #0
   b50be:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b50c2:	4b04      	ldr	r3, [pc, #16]	; (b50d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b50c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b50c6:	2301      	movs	r3, #1
  _serial = serial;
   b50c8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b50ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b50cc:	f7ff fb44 	bl	b4758 <hal_usart_init_ex>
}
   b50d0:	4620      	mov	r0, r4
   b50d2:	bd10      	pop	{r4, pc}
   b50d4:	000b6094 	.word	0x000b6094

000b50d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b50d8:	4b05      	ldr	r3, [pc, #20]	; (b50f0 <_GLOBAL__sub_I_System+0x18>)
   b50da:	2202      	movs	r2, #2
   b50dc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50de:	4b05      	ldr	r3, [pc, #20]	; (b50f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b50e0:	4a05      	ldr	r2, [pc, #20]	; (b50f8 <_GLOBAL__sub_I_System+0x20>)
   b50e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b50e4:	2000      	movs	r0, #0
   b50e6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50ea:	f7ff bc05 	b.w	b48f8 <set_system_mode>
   b50ee:	bf00      	nop
   b50f0:	2003e71c 	.word	0x2003e71c
   b50f4:	2003e710 	.word	0x2003e710
   b50f8:	ffff0000 	.word	0xffff0000

000b50fc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b50fc:	2100      	movs	r1, #0
   b50fe:	f7ff baeb 	b.w	b46d8 <hal_spi_release>

000b5102 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5102:	2100      	movs	r1, #0
   b5104:	f7ff bae0 	b.w	b46c8 <hal_spi_acquire>

000b5108 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5108:	b510      	push	{r4, lr}
   b510a:	4604      	mov	r4, r0
   b510c:	4608      	mov	r0, r1
{
    _spi = spi;
   b510e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5110:	f7ff fac2 	bl	b4698 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5114:	2300      	movs	r3, #0
   b5116:	6063      	str	r3, [r4, #4]
}
   b5118:	4620      	mov	r0, r4
   b511a:	bd10      	pop	{r4, pc}

000b511c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b511c:	b513      	push	{r0, r1, r4, lr}
   b511e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5120:	7800      	ldrb	r0, [r0, #0]
   b5122:	f7ff ffee 	bl	b5102 <_ZN8SPIClass4lockEv.isra.0>
   b5126:	b958      	cbnz	r0, b5140 <_ZN8SPIClass5beginEv+0x24>
   b5128:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b512a:	9001      	str	r0, [sp, #4]
   b512c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5130:	f7ff fa92 	bl	b4658 <hal_spi_begin>
        unlock();
   b5134:	9801      	ldr	r0, [sp, #4]
    }
}
   b5136:	b002      	add	sp, #8
   b5138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b513c:	f7ff bfde 	b.w	b50fc <_ZN8SPIClass6unlockEv.isra.0>
   b5140:	b002      	add	sp, #8
   b5142:	bd10      	pop	{r4, pc}

000b5144 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   b5144:	b513      	push	{r0, r1, r4, lr}
   b5146:	4604      	mov	r4, r0
    if (!lock())
   b5148:	7800      	ldrb	r0, [r0, #0]
{
   b514a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b514c:	f7ff ffd9 	bl	b5102 <_ZN8SPIClass4lockEv.isra.0>
   b5150:	9901      	ldr	r1, [sp, #4]
   b5152:	b948      	cbnz	r0, b5168 <_ZN8SPIClass11setDataModeEh+0x24>
   b5154:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5156:	9001      	str	r0, [sp, #4]
   b5158:	f7ff fa86 	bl	b4668 <hal_spi_set_data_mode>
        unlock();
   b515c:	9801      	ldr	r0, [sp, #4]
    }
}
   b515e:	b002      	add	sp, #8
   b5160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5164:	f7ff bfca 	b.w	b50fc <_ZN8SPIClass6unlockEv.isra.0>
   b5168:	b002      	add	sp, #8
   b516a:	bd10      	pop	{r4, pc}

000b516c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b516c:	0840      	lsrs	r0, r0, #1
{
   b516e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5170:	6018      	str	r0, [r3, #0]
   b5172:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5174:	6818      	ldr	r0, [r3, #0]
   b5176:	4288      	cmp	r0, r1
   b5178:	b2e5      	uxtb	r5, r4
   b517a:	d906      	bls.n	b518a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b517c:	3401      	adds	r4, #1
   b517e:	2c08      	cmp	r4, #8
   b5180:	d002      	beq.n	b5188 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5182:	0840      	lsrs	r0, r0, #1
   b5184:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5186:	e7f5      	b.n	b5174 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5188:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b518c:	5d5b      	ldrb	r3, [r3, r5]
   b518e:	7013      	strb	r3, [r2, #0]
}
   b5190:	bd30      	pop	{r4, r5, pc}
   b5192:	bf00      	nop
   b5194:	000b60bc 	.word	0x000b60bc

000b5198 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b519c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b519e:	2300      	movs	r3, #0
{
   b51a0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b51a2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b51a4:	9302      	str	r3, [sp, #8]
{
   b51a6:	460e      	mov	r6, r1
   b51a8:	4617      	mov	r7, r2
    if (!lock())
   b51aa:	f7ff ffaa 	bl	b5102 <_ZN8SPIClass4lockEv.isra.0>
   b51ae:	4605      	mov	r5, r0
   b51b0:	bb00      	cbnz	r0, b51f4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b51b2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b51b6:	4601      	mov	r1, r0
   b51b8:	2214      	movs	r2, #20
   b51ba:	a803      	add	r0, sp, #12
   b51bc:	f000 fa15 	bl	b55ea <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b51c0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b51c2:	462a      	mov	r2, r5
   b51c4:	a903      	add	r1, sp, #12
   b51c6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b51c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b51cc:	f7ff fa74 	bl	b46b8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b51d0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b51d2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b51d6:	ab02      	add	r3, sp, #8
   b51d8:	f10d 0207 	add.w	r2, sp, #7
   b51dc:	fb07 f106 	mul.w	r1, r7, r6
   b51e0:	f7ff ffc4 	bl	b516c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b51e4:	7820      	ldrb	r0, [r4, #0]
   b51e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b51ea:	f7ff fa45 	bl	b4678 <hal_spi_set_clock_divider>
        unlock();
   b51ee:	7820      	ldrb	r0, [r4, #0]
   b51f0:	f7ff ff84 	bl	b50fc <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b51f4:	9802      	ldr	r0, [sp, #8]
   b51f6:	b008      	add	sp, #32
   b51f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b51fc <_ZN8SPIClass15setClockDividerEh>:
{
   b51fc:	b538      	push	{r3, r4, r5, lr}
   b51fe:	4604      	mov	r4, r0
    if (!lock())
   b5200:	7800      	ldrb	r0, [r0, #0]
{
   b5202:	460d      	mov	r5, r1
    if (!lock())
   b5204:	f7ff ff7d 	bl	b5102 <_ZN8SPIClass4lockEv.isra.0>
   b5208:	4603      	mov	r3, r0
   b520a:	b9d0      	cbnz	r0, b5242 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b520c:	6861      	ldr	r1, [r4, #4]
   b520e:	b199      	cbz	r1, b5238 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5210:	4a0c      	ldr	r2, [pc, #48]	; (b5244 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5212:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5216:	4285      	cmp	r5, r0
   b5218:	d002      	beq.n	b5220 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b521a:	3301      	adds	r3, #1
   b521c:	2b08      	cmp	r3, #8
   b521e:	d1f8      	bne.n	b5212 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5220:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5222:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5224:	2201      	movs	r2, #1
   b5226:	40d9      	lsrs	r1, r3
   b5228:	4620      	mov	r0, r4
   b522a:	f7ff ffb5 	bl	b5198 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b522e:	7820      	ldrb	r0, [r4, #0]
}
   b5230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5234:	f7ff bf62 	b.w	b50fc <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5238:	7820      	ldrb	r0, [r4, #0]
   b523a:	4629      	mov	r1, r5
   b523c:	f7ff fa1c 	bl	b4678 <hal_spi_set_clock_divider>
   b5240:	e7f5      	b.n	b522e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5242:	bd38      	pop	{r3, r4, r5, pc}
   b5244:	000b60bc 	.word	0x000b60bc

000b5248 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5248:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b524a:	7800      	ldrb	r0, [r0, #0]
   b524c:	f7ff fa1c 	bl	b4688 <hal_spi_transfer>
}
   b5250:	b2c0      	uxtb	r0, r0
   b5252:	bd08      	pop	{r3, pc}

000b5254 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5254:	2200      	movs	r2, #0
   b5256:	6840      	ldr	r0, [r0, #4]
   b5258:	4611      	mov	r1, r2
   b525a:	f7ff bb25 	b.w	b48a8 <network_listening>

000b525e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b525e:	2200      	movs	r2, #0
   b5260:	6840      	ldr	r0, [r0, #4]
   b5262:	4611      	mov	r1, r2
   b5264:	f7ff bb30 	b.w	b48c8 <network_get_listen_timeout>

000b5268 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5268:	6840      	ldr	r0, [r0, #4]
   b526a:	2200      	movs	r2, #0
   b526c:	f7ff bb24 	b.w	b48b8 <network_set_listen_timeout>

000b5270 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5270:	6840      	ldr	r0, [r0, #4]
   b5272:	2200      	movs	r2, #0
   b5274:	f081 0101 	eor.w	r1, r1, #1
   b5278:	f7ff bb0e 	b.w	b4898 <network_listen>

000b527c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b527c:	2300      	movs	r3, #0
   b527e:	6840      	ldr	r0, [r0, #4]
   b5280:	461a      	mov	r2, r3
   b5282:	4619      	mov	r1, r3
   b5284:	f7ff bb00 	b.w	b4888 <network_off>

000b5288 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5288:	2300      	movs	r3, #0
   b528a:	6840      	ldr	r0, [r0, #4]
   b528c:	461a      	mov	r2, r3
   b528e:	4619      	mov	r1, r3
   b5290:	f7ff baf2 	b.w	b4878 <network_on>

000b5294 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5294:	2200      	movs	r2, #0
   b5296:	6840      	ldr	r0, [r0, #4]
   b5298:	4611      	mov	r1, r2
   b529a:	f7ff bae5 	b.w	b4868 <network_ready>

000b529e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b529e:	2200      	movs	r2, #0
   b52a0:	6840      	ldr	r0, [r0, #4]
   b52a2:	4611      	mov	r1, r2
   b52a4:	f7ff bad0 	b.w	b4848 <network_connecting>

000b52a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b52a8:	6840      	ldr	r0, [r0, #4]
   b52aa:	2200      	movs	r2, #0
   b52ac:	2102      	movs	r1, #2
   b52ae:	f7ff bad3 	b.w	b4858 <network_disconnect>

000b52b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b52b2:	2300      	movs	r3, #0
   b52b4:	6840      	ldr	r0, [r0, #4]
   b52b6:	461a      	mov	r2, r3
   b52b8:	f7ff babe 	b.w	b4838 <network_connect>

000b52bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b52bc:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b52be:	2203      	movs	r2, #3
   b52c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b52c2:	4a02      	ldr	r2, [pc, #8]	; (b52cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b52c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b52c6:	4770      	bx	lr
   b52c8:	2003e720 	.word	0x2003e720
   b52cc:	000b60cc 	.word	0x000b60cc

000b52d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b52d0:	b510      	push	{r4, lr}
   b52d2:	4604      	mov	r4, r0
{
	free(buffer);
   b52d4:	6800      	ldr	r0, [r0, #0]
   b52d6:	f7ff fb3b 	bl	b4950 <free>
}
   b52da:	4620      	mov	r0, r4
   b52dc:	bd10      	pop	{r4, pc}

000b52de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b52de:	b510      	push	{r4, lr}
   b52e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b52e2:	6800      	ldr	r0, [r0, #0]
   b52e4:	b108      	cbz	r0, b52ea <_ZN6String10invalidateEv+0xc>
   b52e6:	f7ff fb33 	bl	b4950 <free>
	buffer = NULL;
   b52ea:	2300      	movs	r3, #0
	capacity = len = 0;
   b52ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b52f0:	6023      	str	r3, [r4, #0]
}
   b52f2:	bd10      	pop	{r4, pc}

000b52f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52f4:	b538      	push	{r3, r4, r5, lr}
   b52f6:	4604      	mov	r4, r0
   b52f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52fa:	6800      	ldr	r0, [r0, #0]
   b52fc:	3101      	adds	r1, #1
   b52fe:	f7ff fb2f 	bl	b4960 <realloc>
	if (newbuffer) {
   b5302:	b110      	cbz	r0, b530a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5304:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5308:	2001      	movs	r0, #1
	}
	return 0;
}
   b530a:	bd38      	pop	{r3, r4, r5, pc}

000b530c <_ZN6String7reserveEj>:
{
   b530c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b530e:	6803      	ldr	r3, [r0, #0]
{
   b5310:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5312:	b123      	cbz	r3, b531e <_ZN6String7reserveEj+0x12>
   b5314:	6843      	ldr	r3, [r0, #4]
   b5316:	428b      	cmp	r3, r1
   b5318:	d301      	bcc.n	b531e <_ZN6String7reserveEj+0x12>
   b531a:	2001      	movs	r0, #1
}
   b531c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b531e:	4620      	mov	r0, r4
   b5320:	f7ff ffe8 	bl	b52f4 <_ZN6String12changeBufferEj>
   b5324:	2800      	cmp	r0, #0
   b5326:	d0f9      	beq.n	b531c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5328:	68a3      	ldr	r3, [r4, #8]
   b532a:	2b00      	cmp	r3, #0
   b532c:	d1f5      	bne.n	b531a <_ZN6String7reserveEj+0xe>
   b532e:	6822      	ldr	r2, [r4, #0]
   b5330:	7013      	strb	r3, [r2, #0]
   b5332:	e7f2      	b.n	b531a <_ZN6String7reserveEj+0xe>

000b5334 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5334:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5336:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5338:	4611      	mov	r1, r2
   b533a:	9201      	str	r2, [sp, #4]
{
   b533c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b533e:	f7ff ffe5 	bl	b530c <_ZN6String7reserveEj>
   b5342:	9a01      	ldr	r2, [sp, #4]
   b5344:	b928      	cbnz	r0, b5352 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5346:	4620      	mov	r0, r4
   b5348:	f7ff ffc9 	bl	b52de <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b534c:	4620      	mov	r0, r4
   b534e:	b003      	add	sp, #12
   b5350:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5352:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5354:	4629      	mov	r1, r5
   b5356:	6820      	ldr	r0, [r4, #0]
   b5358:	f000 f939 	bl	b55ce <memcpy>
	buffer[len] = 0;
   b535c:	6822      	ldr	r2, [r4, #0]
   b535e:	68a3      	ldr	r3, [r4, #8]
   b5360:	2100      	movs	r1, #0
   b5362:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5364:	e7f2      	b.n	b534c <_ZN6String4copyEPKcj+0x18>

000b5366 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5366:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5368:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b536a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b536e:	4604      	mov	r4, r0
	len = 0;
   b5370:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5372:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5374:	b141      	cbz	r1, b5388 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5376:	4608      	mov	r0, r1
   b5378:	9101      	str	r1, [sp, #4]
   b537a:	f000 f96d 	bl	b5658 <strlen>
   b537e:	9901      	ldr	r1, [sp, #4]
   b5380:	4602      	mov	r2, r0
   b5382:	4620      	mov	r0, r4
   b5384:	f7ff ffd6 	bl	b5334 <_ZN6String4copyEPKcj>
}
   b5388:	4620      	mov	r0, r4
   b538a:	b002      	add	sp, #8
   b538c:	bd10      	pop	{r4, pc}

000b538e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b538e:	4288      	cmp	r0, r1
{
   b5390:	b510      	push	{r4, lr}
   b5392:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5394:	d005      	beq.n	b53a2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5396:	680b      	ldr	r3, [r1, #0]
   b5398:	b12b      	cbz	r3, b53a6 <_ZN6StringaSERKS_+0x18>
   b539a:	688a      	ldr	r2, [r1, #8]
   b539c:	4619      	mov	r1, r3
   b539e:	f7ff ffc9 	bl	b5334 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b53a2:	4620      	mov	r0, r4
   b53a4:	bd10      	pop	{r4, pc}
	else invalidate();
   b53a6:	f7ff ff9a 	bl	b52de <_ZN6String10invalidateEv>
   b53aa:	e7fa      	b.n	b53a2 <_ZN6StringaSERKS_+0x14>

000b53ac <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b53ac:	b513      	push	{r0, r1, r4, lr}
   b53ae:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b53b0:	b159      	cbz	r1, b53ca <_ZN6StringaSEPKc+0x1e>
   b53b2:	4608      	mov	r0, r1
   b53b4:	9101      	str	r1, [sp, #4]
   b53b6:	f000 f94f 	bl	b5658 <strlen>
   b53ba:	9901      	ldr	r1, [sp, #4]
   b53bc:	4602      	mov	r2, r0
   b53be:	4620      	mov	r0, r4
   b53c0:	f7ff ffb8 	bl	b5334 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b53c4:	4620      	mov	r0, r4
   b53c6:	b002      	add	sp, #8
   b53c8:	bd10      	pop	{r4, pc}
	else invalidate();
   b53ca:	f7ff ff88 	bl	b52de <_ZN6String10invalidateEv>
   b53ce:	e7f9      	b.n	b53c4 <_ZN6StringaSEPKc+0x18>

000b53d0 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b53d0:	6883      	ldr	r3, [r0, #8]
   b53d2:	428b      	cmp	r3, r1
   b53d4:	d903      	bls.n	b53de <_ZNK6StringixEj+0xe>
   b53d6:	6800      	ldr	r0, [r0, #0]
   b53d8:	b110      	cbz	r0, b53e0 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b53da:	5c40      	ldrb	r0, [r0, r1]
   b53dc:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b53de:	2000      	movs	r0, #0
}
   b53e0:	4770      	bx	lr

000b53e2 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b53e2:	f7ff bff5 	b.w	b53d0 <_ZNK6StringixEj>

000b53e6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53e6:	4770      	bx	lr

000b53e8 <_Z17acquireWireBufferv>:
{
   b53e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b53ea:	4b0a      	ldr	r3, [pc, #40]	; (b5414 <_Z17acquireWireBufferv+0x2c>)
   b53ec:	6003      	str	r3, [r0, #0]
   b53ee:	2301      	movs	r3, #1
{
   b53f0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b53f2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b53f4:	4908      	ldr	r1, [pc, #32]	; (b5418 <_Z17acquireWireBufferv+0x30>)
   b53f6:	2020      	movs	r0, #32
   b53f8:	f000 f8de 	bl	b55b8 <_ZnajRKSt9nothrow_t>
	};
   b53fc:	2520      	movs	r5, #32
   b53fe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5400:	4905      	ldr	r1, [pc, #20]	; (b5418 <_Z17acquireWireBufferv+0x30>)
	};
   b5402:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5404:	4628      	mov	r0, r5
   b5406:	f000 f8d7 	bl	b55b8 <_ZnajRKSt9nothrow_t>
	};
   b540a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b540e:	4620      	mov	r0, r4
   b5410:	bd38      	pop	{r3, r4, r5, pc}
   b5412:	bf00      	nop
   b5414:	00010018 	.word	0x00010018
   b5418:	000b6100 	.word	0x000b6100

000b541c <_Z19__fetch_global_Wirev>:
{
   b541c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b541e:	4d0e      	ldr	r5, [pc, #56]	; (b5458 <_Z19__fetch_global_Wirev+0x3c>)
   b5420:	7829      	ldrb	r1, [r5, #0]
   b5422:	f3bf 8f5b 	dmb	ish
   b5426:	f011 0401 	ands.w	r4, r1, #1
{
   b542a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b542c:	d111      	bne.n	b5452 <_Z19__fetch_global_Wirev+0x36>
   b542e:	4628      	mov	r0, r5
   b5430:	f7fe fe35 	bl	b409e <__cxa_guard_acquire>
   b5434:	b168      	cbz	r0, b5452 <_Z19__fetch_global_Wirev+0x36>
   b5436:	4668      	mov	r0, sp
   b5438:	f7ff ffd6 	bl	b53e8 <_Z17acquireWireBufferv>
   b543c:	466a      	mov	r2, sp
   b543e:	4621      	mov	r1, r4
   b5440:	4806      	ldr	r0, [pc, #24]	; (b545c <_Z19__fetch_global_Wirev+0x40>)
   b5442:	f7ff fb8b 	bl	b4b5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5446:	4628      	mov	r0, r5
   b5448:	f7fe fe2e 	bl	b40a8 <__cxa_guard_release>
   b544c:	4804      	ldr	r0, [pc, #16]	; (b5460 <_Z19__fetch_global_Wirev+0x44>)
   b544e:	f000 f8b8 	bl	b55c2 <atexit>
	return wire;
}
   b5452:	4802      	ldr	r0, [pc, #8]	; (b545c <_Z19__fetch_global_Wirev+0x40>)
   b5454:	b007      	add	sp, #28
   b5456:	bd30      	pop	{r4, r5, pc}
   b5458:	2003e728 	.word	0x2003e728
   b545c:	2003e72c 	.word	0x2003e72c
   b5460:	000b53e7 	.word	0x000b53e7

000b5464 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5464:	4770      	bx	lr
	...

000b5468 <_Z20acquireSerial1Bufferv>:
{
   b5468:	b538      	push	{r3, r4, r5, lr}
   b546a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b546c:	2514      	movs	r5, #20
   b546e:	462a      	mov	r2, r5
   b5470:	2100      	movs	r1, #0
   b5472:	f000 f8ba 	bl	b55ea <memset>
   b5476:	8025      	strh	r5, [r4, #0]
   b5478:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b547a:	4907      	ldr	r1, [pc, #28]	; (b5498 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b547c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b547e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5480:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5482:	f000 f899 	bl	b55b8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5486:	4904      	ldr	r1, [pc, #16]	; (b5498 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5488:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b548a:	4628      	mov	r0, r5
   b548c:	f000 f894 	bl	b55b8 <_ZnajRKSt9nothrow_t>
    };
   b5490:	60e0      	str	r0, [r4, #12]
}
   b5492:	4620      	mov	r0, r4
   b5494:	bd38      	pop	{r3, r4, r5, pc}
   b5496:	bf00      	nop
   b5498:	000b6100 	.word	0x000b6100

000b549c <_Z22__fetch_global_Serial1v>:
{
   b549c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b549e:	4d0e      	ldr	r5, [pc, #56]	; (b54d8 <_Z22__fetch_global_Serial1v+0x3c>)
   b54a0:	7829      	ldrb	r1, [r5, #0]
   b54a2:	f3bf 8f5b 	dmb	ish
   b54a6:	f011 0401 	ands.w	r4, r1, #1
{
   b54aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b54ac:	d111      	bne.n	b54d2 <_Z22__fetch_global_Serial1v+0x36>
   b54ae:	4628      	mov	r0, r5
   b54b0:	f7fe fdf5 	bl	b409e <__cxa_guard_acquire>
   b54b4:	b168      	cbz	r0, b54d2 <_Z22__fetch_global_Serial1v+0x36>
   b54b6:	a801      	add	r0, sp, #4
   b54b8:	f7ff ffd6 	bl	b5468 <_Z20acquireSerial1Bufferv>
   b54bc:	aa01      	add	r2, sp, #4
   b54be:	4621      	mov	r1, r4
   b54c0:	4806      	ldr	r0, [pc, #24]	; (b54dc <_Z22__fetch_global_Serial1v+0x40>)
   b54c2:	f7ff fdf5 	bl	b50b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b54c6:	4628      	mov	r0, r5
   b54c8:	f7fe fdee 	bl	b40a8 <__cxa_guard_release>
   b54cc:	4804      	ldr	r0, [pc, #16]	; (b54e0 <_Z22__fetch_global_Serial1v+0x44>)
   b54ce:	f000 f878 	bl	b55c2 <atexit>
    return serial1;
}
   b54d2:	4802      	ldr	r0, [pc, #8]	; (b54dc <_Z22__fetch_global_Serial1v+0x40>)
   b54d4:	b007      	add	sp, #28
   b54d6:	bd30      	pop	{r4, r5, pc}
   b54d8:	2003e744 	.word	0x2003e744
   b54dc:	2003e748 	.word	0x2003e748
   b54e0:	000b5465 	.word	0x000b5465

000b54e4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b54e4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b54e6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b54e8:	d902      	bls.n	b54f0 <pinAvailable+0xc>
    return false;
   b54ea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b54ec:	b002      	add	sp, #8
   b54ee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b54f0:	f1a0 030b 	sub.w	r3, r0, #11
   b54f4:	2b02      	cmp	r3, #2
   b54f6:	d81a      	bhi.n	b552e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b54f8:	4c17      	ldr	r4, [pc, #92]	; (b5558 <pinAvailable+0x74>)
   b54fa:	7821      	ldrb	r1, [r4, #0]
   b54fc:	f3bf 8f5b 	dmb	ish
   b5500:	f011 0101 	ands.w	r1, r1, #1
   b5504:	d10b      	bne.n	b551e <pinAvailable+0x3a>
   b5506:	4620      	mov	r0, r4
   b5508:	9101      	str	r1, [sp, #4]
   b550a:	f7fe fdc8 	bl	b409e <__cxa_guard_acquire>
   b550e:	9901      	ldr	r1, [sp, #4]
   b5510:	b128      	cbz	r0, b551e <pinAvailable+0x3a>
   b5512:	4812      	ldr	r0, [pc, #72]	; (b555c <pinAvailable+0x78>)
   b5514:	f7ff fdf8 	bl	b5108 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5518:	4620      	mov	r0, r4
   b551a:	f7fe fdc5 	bl	b40a8 <__cxa_guard_release>
   b551e:	4b0f      	ldr	r3, [pc, #60]	; (b555c <pinAvailable+0x78>)
   b5520:	7818      	ldrb	r0, [r3, #0]
   b5522:	f7ff f8c1 	bl	b46a8 <hal_spi_is_enabled>
   b5526:	2800      	cmp	r0, #0
   b5528:	d1df      	bne.n	b54ea <pinAvailable+0x6>
  return true; // 'pin' is available
   b552a:	2001      	movs	r0, #1
   b552c:	e7de      	b.n	b54ec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b552e:	2801      	cmp	r0, #1
   b5530:	d809      	bhi.n	b5546 <pinAvailable+0x62>
   b5532:	f7ff ff73 	bl	b541c <_Z19__fetch_global_Wirev>
   b5536:	2100      	movs	r1, #0
   b5538:	7c00      	ldrb	r0, [r0, #16]
   b553a:	f7ff f87d 	bl	b4638 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b553e:	f080 0001 	eor.w	r0, r0, #1
   b5542:	b2c0      	uxtb	r0, r0
   b5544:	e7d2      	b.n	b54ec <pinAvailable+0x8>
   b5546:	3809      	subs	r0, #9
   b5548:	2801      	cmp	r0, #1
   b554a:	d8ee      	bhi.n	b552a <pinAvailable+0x46>
   b554c:	f7ff ffa6 	bl	b549c <_Z22__fetch_global_Serial1v>
   b5550:	7c00      	ldrb	r0, [r0, #16]
   b5552:	f7ff f8f1 	bl	b4738 <hal_usart_is_enabled>
   b5556:	e7f2      	b.n	b553e <pinAvailable+0x5a>
   b5558:	2003e648 	.word	0x2003e648
   b555c:	2003e64c 	.word	0x2003e64c

000b5560 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5560:	2823      	cmp	r0, #35	; 0x23
{
   b5562:	b538      	push	{r3, r4, r5, lr}
   b5564:	4604      	mov	r4, r0
   b5566:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5568:	d80a      	bhi.n	b5580 <pinMode+0x20>
   b556a:	29ff      	cmp	r1, #255	; 0xff
   b556c:	d008      	beq.n	b5580 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b556e:	f7ff ffb9 	bl	b54e4 <pinAvailable>
   b5572:	b128      	cbz	r0, b5580 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5574:	4629      	mov	r1, r5
   b5576:	4620      	mov	r0, r4
}
   b5578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b557c:	f7ff b92c 	b.w	b47d8 <HAL_Pin_Mode>
}
   b5580:	bd38      	pop	{r3, r4, r5, pc}

000b5582 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5582:	b538      	push	{r3, r4, r5, lr}
   b5584:	4604      	mov	r4, r0
   b5586:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5588:	f7ff f92e 	bl	b47e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b558c:	28ff      	cmp	r0, #255	; 0xff
   b558e:	d010      	beq.n	b55b2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5590:	2806      	cmp	r0, #6
   b5592:	d804      	bhi.n	b559e <digitalWrite+0x1c>
   b5594:	234d      	movs	r3, #77	; 0x4d
   b5596:	fa23 f000 	lsr.w	r0, r3, r0
   b559a:	07c3      	lsls	r3, r0, #31
   b559c:	d409      	bmi.n	b55b2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b559e:	4620      	mov	r0, r4
   b55a0:	f7ff ffa0 	bl	b54e4 <pinAvailable>
   b55a4:	b128      	cbz	r0, b55b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b55a6:	4629      	mov	r1, r5
   b55a8:	4620      	mov	r0, r4
}
   b55aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b55ae:	f7ff b923 	b.w	b47f8 <HAL_GPIO_Write>
}
   b55b2:	bd38      	pop	{r3, r4, r5, pc}

000b55b4 <_ZnwjRKSt9nothrow_t>:
   b55b4:	f7fe bd6d 	b.w	b4092 <_Znwj>

000b55b8 <_ZnajRKSt9nothrow_t>:
   b55b8:	f7fe bd6d 	b.w	b4096 <_Znaj>

000b55bc <_ZSt25__throw_bad_function_callv>:
   b55bc:	b508      	push	{r3, lr}
   b55be:	f7ff f9d7 	bl	b4970 <abort>

000b55c2 <atexit>:
   b55c2:	2300      	movs	r3, #0
   b55c4:	4601      	mov	r1, r0
   b55c6:	461a      	mov	r2, r3
   b55c8:	4618      	mov	r0, r3
   b55ca:	f000 b84d 	b.w	b5668 <__register_exitproc>

000b55ce <memcpy>:
   b55ce:	440a      	add	r2, r1
   b55d0:	4291      	cmp	r1, r2
   b55d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b55d6:	d100      	bne.n	b55da <memcpy+0xc>
   b55d8:	4770      	bx	lr
   b55da:	b510      	push	{r4, lr}
   b55dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   b55e0:	f803 4f01 	strb.w	r4, [r3, #1]!
   b55e4:	4291      	cmp	r1, r2
   b55e6:	d1f9      	bne.n	b55dc <memcpy+0xe>
   b55e8:	bd10      	pop	{r4, pc}

000b55ea <memset>:
   b55ea:	4402      	add	r2, r0
   b55ec:	4603      	mov	r3, r0
   b55ee:	4293      	cmp	r3, r2
   b55f0:	d100      	bne.n	b55f4 <memset+0xa>
   b55f2:	4770      	bx	lr
   b55f4:	f803 1b01 	strb.w	r1, [r3], #1
   b55f8:	e7f9      	b.n	b55ee <memset+0x4>
	...

000b55fc <srand>:
   b55fc:	b538      	push	{r3, r4, r5, lr}
   b55fe:	4b10      	ldr	r3, [pc, #64]	; (b5640 <srand+0x44>)
   b5600:	681d      	ldr	r5, [r3, #0]
   b5602:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5604:	4604      	mov	r4, r0
   b5606:	b9b3      	cbnz	r3, b5636 <srand+0x3a>
   b5608:	2018      	movs	r0, #24
   b560a:	f7ff f999 	bl	b4940 <malloc>
   b560e:	4602      	mov	r2, r0
   b5610:	63a8      	str	r0, [r5, #56]	; 0x38
   b5612:	b920      	cbnz	r0, b561e <srand+0x22>
   b5614:	4b0b      	ldr	r3, [pc, #44]	; (b5644 <srand+0x48>)
   b5616:	480c      	ldr	r0, [pc, #48]	; (b5648 <srand+0x4c>)
   b5618:	2142      	movs	r1, #66	; 0x42
   b561a:	f7ff f9b1 	bl	b4980 <__assert_func>
   b561e:	490b      	ldr	r1, [pc, #44]	; (b564c <srand+0x50>)
   b5620:	4b0b      	ldr	r3, [pc, #44]	; (b5650 <srand+0x54>)
   b5622:	e9c0 1300 	strd	r1, r3, [r0]
   b5626:	4b0b      	ldr	r3, [pc, #44]	; (b5654 <srand+0x58>)
   b5628:	6083      	str	r3, [r0, #8]
   b562a:	230b      	movs	r3, #11
   b562c:	8183      	strh	r3, [r0, #12]
   b562e:	2100      	movs	r1, #0
   b5630:	2001      	movs	r0, #1
   b5632:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5636:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5638:	2200      	movs	r2, #0
   b563a:	611c      	str	r4, [r3, #16]
   b563c:	615a      	str	r2, [r3, #20]
   b563e:	bd38      	pop	{r3, r4, r5, pc}
   b5640:	2003e5e0 	.word	0x2003e5e0
   b5644:	000b6101 	.word	0x000b6101
   b5648:	000b6118 	.word	0x000b6118
   b564c:	abcd330e 	.word	0xabcd330e
   b5650:	e66d1234 	.word	0xe66d1234
   b5654:	0005deec 	.word	0x0005deec

000b5658 <strlen>:
   b5658:	4603      	mov	r3, r0
   b565a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b565e:	2a00      	cmp	r2, #0
   b5660:	d1fb      	bne.n	b565a <strlen+0x2>
   b5662:	1a18      	subs	r0, r3, r0
   b5664:	3801      	subs	r0, #1
   b5666:	4770      	bx	lr

000b5668 <__register_exitproc>:
   b5668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b566c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5728 <__register_exitproc+0xc0>
   b5670:	4606      	mov	r6, r0
   b5672:	f8d8 0000 	ldr.w	r0, [r8]
   b5676:	461f      	mov	r7, r3
   b5678:	460d      	mov	r5, r1
   b567a:	4691      	mov	r9, r2
   b567c:	f000 f856 	bl	b572c <__retarget_lock_acquire_recursive>
   b5680:	4b25      	ldr	r3, [pc, #148]	; (b5718 <__register_exitproc+0xb0>)
   b5682:	681c      	ldr	r4, [r3, #0]
   b5684:	b934      	cbnz	r4, b5694 <__register_exitproc+0x2c>
   b5686:	4c25      	ldr	r4, [pc, #148]	; (b571c <__register_exitproc+0xb4>)
   b5688:	601c      	str	r4, [r3, #0]
   b568a:	4b25      	ldr	r3, [pc, #148]	; (b5720 <__register_exitproc+0xb8>)
   b568c:	b113      	cbz	r3, b5694 <__register_exitproc+0x2c>
   b568e:	681b      	ldr	r3, [r3, #0]
   b5690:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5694:	6863      	ldr	r3, [r4, #4]
   b5696:	2b1f      	cmp	r3, #31
   b5698:	dd07      	ble.n	b56aa <__register_exitproc+0x42>
   b569a:	f8d8 0000 	ldr.w	r0, [r8]
   b569e:	f000 f847 	bl	b5730 <__retarget_lock_release_recursive>
   b56a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b56a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b56aa:	b34e      	cbz	r6, b5700 <__register_exitproc+0x98>
   b56ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b56b0:	b988      	cbnz	r0, b56d6 <__register_exitproc+0x6e>
   b56b2:	4b1c      	ldr	r3, [pc, #112]	; (b5724 <__register_exitproc+0xbc>)
   b56b4:	b923      	cbnz	r3, b56c0 <__register_exitproc+0x58>
   b56b6:	f8d8 0000 	ldr.w	r0, [r8]
   b56ba:	f000 f838 	bl	b572e <__retarget_lock_release>
   b56be:	e7f0      	b.n	b56a2 <__register_exitproc+0x3a>
   b56c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b56c4:	f7ff f93c 	bl	b4940 <malloc>
   b56c8:	2800      	cmp	r0, #0
   b56ca:	d0f4      	beq.n	b56b6 <__register_exitproc+0x4e>
   b56cc:	2300      	movs	r3, #0
   b56ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b56d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b56d6:	6863      	ldr	r3, [r4, #4]
   b56d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b56dc:	2201      	movs	r2, #1
   b56de:	409a      	lsls	r2, r3
   b56e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b56e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b56e8:	4313      	orrs	r3, r2
   b56ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b56ee:	2e02      	cmp	r6, #2
   b56f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b56f4:	bf02      	ittt	eq
   b56f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b56fa:	4313      	orreq	r3, r2
   b56fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5700:	6863      	ldr	r3, [r4, #4]
   b5702:	f8d8 0000 	ldr.w	r0, [r8]
   b5706:	1c5a      	adds	r2, r3, #1
   b5708:	3302      	adds	r3, #2
   b570a:	6062      	str	r2, [r4, #4]
   b570c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5710:	f000 f80e 	bl	b5730 <__retarget_lock_release_recursive>
   b5714:	2000      	movs	r0, #0
   b5716:	e7c6      	b.n	b56a6 <__register_exitproc+0x3e>
   b5718:	2003e7e8 	.word	0x2003e7e8
   b571c:	2003e75c 	.word	0x2003e75c
   b5720:	00000000 	.word	0x00000000
   b5724:	000b4941 	.word	0x000b4941
   b5728:	2003e644 	.word	0x2003e644

000b572c <__retarget_lock_acquire_recursive>:
   b572c:	4770      	bx	lr

000b572e <__retarget_lock_release>:
   b572e:	4770      	bx	lr

000b5730 <__retarget_lock_release_recursive>:
   b5730:	4770      	bx	lr

000b5732 <link_code_end>:
	...

000b5734 <dynalib_user>:
   b5734:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5744:	0000 0000                                   ....

000b5748 <_ZL10cp437_font>:
	...
   b5750:	817e b195 95b1 7e81 ff7e cfeb ebcf 7eff     ~......~~......~
   b5760:	1f0e 7e3f 1f3f 000e 1c08 7f3e 1c3e 0008     ..?~?.....>.>...
   b5770:	ba18 ffff baff 0018 b810 fffc b8fc 0010     ................
   b5780:	0000 3c18 183c 0000 ffff c3e7 e7c3 ffff     ...<<...........
   b5790:	3c00 4266 6642 003c c3ff bd99 99bd ffc3     .<fBBf<.........
   b57a0:	f870 8888 7ffd 0f07 4e00 f15f 5ff1 004e     p........N_.._N.
   b57b0:	e0c0 7fff 0505 0707 ffc0 057f 6505 3f7f     .............e.?
   b57c0:	5a99 e73c 3ce7 995a 3e7f 1c3e 081c 0008     .Z<..<Z..>>.....
   b57d0:	0808 1c1c 3e3e 007f 2400 ff66 66ff 0024     ....>>...$f..f$.
   b57e0:	5f00 005f 5f00 005f 0f06 7f09 017f 7f7f     .__..__.........
   b57f0:	da40 a5bf 59fd 0203 7000 7070 7070 0070     @....Y...pppppp.
   b5800:	9480 ffb6 b6ff 8094 0400 7f06 067f 0004     ................
   b5810:	1000 7f30 307f 0010 0808 2a08 1c3e 0008     ..0..0.....*>...
   b5820:	1c08 2a3e 0808 0008 3c3c 2020 2020 0020     ..>*....<<     .
   b5830:	1c08 083e 3e08 081c 3830 3e3c 3c3e 3038     ..>..>..08<>><80
   b5840:	0e06 3e1e 1e3e 060e 0000 0000 0000 0000     ...>>...........
   b5850:	0600 5f5f 0006 0000 0700 0007 0707 0000     ..__............
   b5860:	7f14 147f 7f7f 0014 2e24 6b6b 123a 0000     ........$.kk:...
   b5870:	6646 1830 660c 0062 7a30 5d4f 7a37 0048     Ff0..fb.0zO]7zH.
   b5880:	0704 0003 0000 0000 1c00 633e 0041 0000     ..........>cA...
   b5890:	4100 3e63 001c 0000 2a08 1c3e 3e1c 082a     .Ac>.....*>..>*.
   b58a0:	0808 3e3e 0808 0000 8000 60e0 0000 0000     ..>>.......`....
   b58b0:	0808 0808 0808 0000 0000 6060 0000 0000     ..........``....
   b58c0:	3060 0c18 0306 0001 7f3e 5971 7f4d 003e     `0......>.qYM.>.
   b58d0:	4240 7f7f 4040 0000 7362 4959 666f 0000     @B..@@..bsYIof..
   b58e0:	6322 4949 367f 0000 1c18 5316 7f7f 0050     "cII.6.....S..P.
   b58f0:	6727 4545 397d 0000 7e3c 494b 3079 0000     'gEE}9..<~KIy0..
   b5900:	0303 7971 070f 0000 7f36 4949 367f 0000     ..qy....6.II.6..
   b5910:	4f06 6949 1e3f 0000 0000 6666 0000 0000     .OIi?.....ff....
   b5920:	8000 66e6 0000 0000 1c08 6336 0041 0000     ...f......6cA...
   b5930:	2424 2424 2424 0000 4100 3663 081c 0000     $$$$$$...Ac6....
   b5940:	0302 5951 060f 0000 7f3e 5d41 1f5d 001e     ..QY....>.A]]...
   b5950:	7e7c 1313 7c7e 0000 7f41 497f 7f49 0036     |~..~|..A..II.6.
   b5960:	3e1c 4163 6341 0022 7f41 417f 3e63 001c     .>cAAc".A..Ac>..
   b5970:	7f41 497f 415d 0063 7f41 497f 011d 0003     A..I]Ac.A..I....
   b5980:	3e1c 4163 7351 0072 7f7f 0808 7f7f 0000     .>cAQsr.........
   b5990:	4100 7f7f 0041 0000 7030 4140 3f7f 0001     .A..A...0p@A.?..
   b59a0:	7f41 087f 771c 0063 7f41 417f 6040 0070     A....wc.A..A@`p.
   b59b0:	7f7f 1c0e 7f0e 007f 7f7f 0c06 7f18 007f     ................
   b59c0:	3e1c 4163 3e63 001c 7f41 497f 0f09 0006     .>cAc>..A..I....
   b59d0:	3f1e 7121 5e7f 0000 7f41 097f 7f19 0066     .?!q.^..A.....f.
   b59e0:	6f26 594d 3273 0000 4103 7f7f 0341 0000     &oMYs2...A..A...
   b59f0:	7f7f 4040 7f7f 0000 3f1f 6060 1f3f 0000     ..@@.....?``?...
   b5a00:	7f7f 1830 7f30 007f 6743 183c 673c 0043     ..0.0...Cg<.<gC.
   b5a10:	4f07 7878 074f 0000 6347 5971 674d 0073     .OxxO...GcqYMgs.
   b5a20:	7f00 417f 0041 0000 0301 0c06 3018 0060     ...AA........0`.
   b5a30:	4100 7f41 007f 0000 0c08 0306 0c06 0008     .AA.............
   b5a40:	8080 8080 8080 8080 0000 0703 0004 0000     ................
   b5a50:	7420 5454 783c 0040 7f41 483f 7848 0030      tTT<x@.A.?HHx0.
   b5a60:	7c38 4444 286c 0000 7830 4948 7f3f 0040     8|DDl(..0xHI?.@.
   b5a70:	7c38 5454 185c 0000 7e48 497f 0203 0000     8|TT\...H~.I....
   b5a80:	bc98 a4a4 7cf8 0004 7f41 087f 7c04 0078     .....|..A....|x.
   b5a90:	4400 7d7d 0040 0000 e060 8080 7dfd 0000     .D}}@...`....}..
   b5aa0:	7f41 107f 6c38 0044 4100 7f7f 0040 0000     A...8lD..A..@...
   b5ab0:	7c7c 3818 7c1c 0078 7c7c 0404 787c 0000     ||.8.|x.||..|x..
   b5ac0:	7c38 4444 387c 0000 fc84 a4f8 3c24 0018     8|DD|8......$<..
   b5ad0:	3c18 a424 fcf8 0084 7c44 4c78 1c04 0018     .<$.....D|xL....
   b5ae0:	5c48 5454 2474 0000 0400 7f3e 2444 0000     H\TTt$....>.D$..
   b5af0:	7c3c 4040 7c3c 0040 3c1c 6060 1c3c 0000     <|@@<|@..<``<...
   b5b00:	7c3c 3870 7c70 003c 6c44 1038 6c38 0044     <|p8p|<.Dl8.8lD.
   b5b10:	bc9c a0a0 7cfc 0000 644c 5c74 644c 0000     .....|..Ldt\Ld..
   b5b20:	0808 773e 4141 0000 0000 7700 0077 0000     ..>wAA.....ww...
   b5b30:	4141 3e77 0808 0000 0302 0301 0302 0001     AAw>............
   b5b40:	7870 464c 784c 0070 9f0e b191 4afb 0000     pxLFLxp......J..
   b5b50:	7a3a 4040 7a7a 0040 7c38 5554 195d 0000     :z@@zz@.8|TU]...
   b5b60:	2302 5575 7d55 427b 7521 5454 797d 0040     .#uUU}{B!uTT}y@.
   b5b70:	7521 5455 787c 0040 7420 5757 787c 0040     !uUT|x@. tWW|x@.
   b5b80:	3c18 a4a4 40e4 0000 3b02 557d 5d55 021b     .<...@...;}UU]..
   b5b90:	7d39 5454 195d 0000 7d39 5455 185c 0000     9}TT]...9}UT\...
   b5ba0:	4501 7c7c 0141 0000 0302 7d45 437d 0002     .E||A.....E}}C..
   b5bb0:	4501 7c7d 0040 0000 7d79 1216 7d16 0079     .E}|@...y}...}y.
   b5bc0:	7870 2b2b 7078 0000 7c44 557c 4555 0000     px++xp..D||UUE..
   b5bd0:	7420 5454 7c7c 5454 7e7c 090b 7f7f 0049      tTT||TT|~....I.
   b5be0:	7b32 4949 327b 0000 7a32 4848 327a 0000     2{II{2..2zHHz2..
   b5bf0:	7a32 484a 3078 0000 7b3a 4141 7a7b 0040     2zJHx0..:{AA{z@.
   b5c00:	7a3a 4042 7878 0040 ba9a a0a0 7afa 0000     :zB@xx@......z..
   b5c10:	1901 663c 3c66 0119 7d3d 4040 3d7d 0000     ..<ff<..=}@@}=..
   b5c20:	3c18 e724 24e7 0024 7e68 497f 6643 0020     .<$..$$.h~.ICf .
   b5c30:	2f2b fcfc 2b2f 0000 ffff 0909 f62f a0f8     +/../+....../...
   b5c40:	c040 fe88 097f 0203 7420 5554 797d 0040     @....... tTU}y@.
   b5c50:	4400 7d7d 0041 0000 7830 4a48 327a 0000     .D}}A...0xHJz2..
   b5c60:	7838 4240 7a7a 0040 7a7a 0a0a 707a 0000     8x@Bzz@.zz..zp..
   b5c70:	7d7d 3119 7d7d 0000 2600 292f 2f2f 0028     }}.1}}...&/)//(.
   b5c80:	2600 292f 262f 0000 7830 454d 2060 0000     .&/)/&..0xME` ..
   b5c90:	3838 0808 0808 0000 0808 0808 3838 0000     88..........88..
   b5ca0:	6f4f 1830 eecc 91bb 6f4f 1830 766c f9fb     Oo0.....Oo0.lv..
   b5cb0:	0000 7b00 007b 0000 1c08 2236 1c08 2236     ...{{.....6"..6"
   b5cc0:	3622 081c 3622 081c 00aa 0055 00aa 0055     "6.."6....U...U.
   b5cd0:	55aa 55aa 55aa 55aa ffdd 77aa aadd 77ff     .U.U.U.U...w...w
   b5ce0:	0000 ff00 00ff 0000 1010 ff10 00ff 0000     ................
   b5cf0:	1414 ff14 00ff 0000 1010 ffff ff00 00ff     ................
   b5d00:	1010 f0f0 f010 00f0 1414 fc14 00fc 0000     ................
   b5d10:	1414 f7f7 ff00 00ff 0000 ffff ff00 00ff     ................
   b5d20:	1414 f4f4 fc04 00fc 1414 1717 1f10 001f     ................
   b5d30:	1010 1f1f 1f10 001f 1414 1f14 001f 0000     ................
   b5d40:	1010 f010 00f0 0000 0000 1f00 101f 1010     ................
   b5d50:	1010 1f10 101f 1010 1010 f010 10f0 1010     ................
   b5d60:	0000 ff00 10ff 1010 1010 1010 1010 1010     ................
   b5d70:	1010 ff10 10ff 1010 0000 ff00 14ff 1414     ................
   b5d80:	0000 ffff ff00 10ff 0000 1f1f 1710 1417     ................
   b5d90:	0000 fcfc f404 14f4 1414 1717 1710 1417     ................
   b5da0:	1414 f4f4 f404 14f4 0000 ffff f700 14f7     ................
   b5db0:	1414 1414 1414 1414 1414 f7f7 f700 14f7     ................
   b5dc0:	1414 1714 1417 1414 1010 1f1f 1f10 101f     ................
   b5dd0:	1414 f414 14f4 1414 1010 f0f0 f010 10f0     ................
   b5de0:	0000 1f1f 1f10 101f 0000 1f00 141f 1414     ................
   b5df0:	0000 fc00 14fc 1414 0000 f0f0 f010 10f0     ................
   b5e00:	1010 ffff ff10 10ff 1414 ff14 14ff 1414     ................
   b5e10:	1010 1f10 001f 0000 0000 f000 10f0 1010     ................
   b5e20:	ffff ffff ffff ffff f0f0 f0f0 f0f0 f0f0     ................
   b5e30:	ffff ffff 0000 0000 0000 0000 ffff ffff     ................
   b5e40:	0f0f 0f0f 0f0f 0f0f 7c38 6c44 6c38 0044     ........8|Dl8lD.
   b5e50:	fefc 2a2a 143e 0000 7e7e 0202 0606 0000     ..**>...~~......
   b5e60:	7e02 027e 7e7e 0002 7763 495d 6363 0000     .~~.~~..cw]Icc..
   b5e70:	7c38 7c44 043c 0004 fe80 207e 3e20 001e     8|D|<.....~  >..
   b5e80:	0604 7e02 067c 0002 bd99 e7e7 99bd 0000     ...~|...........
   b5e90:	3e1c 496b 3e6b 001c 7e4c 0173 7e73 004c     .>kIk>..L~s.s~L.
   b5ea0:	7830 4f4a 397d 0000 3c18 3c24 243c 183c     0xJO}9...<$<<$<.
   b5eb0:	fc98 3c64 273e 183d 3e1c 496b 0049 0000     ..d<>'=..>kII...
   b5ec0:	7f7e 0101 7e7f 0000 2a2a 2a2a 2a2a 0000     ~....~..******..
   b5ed0:	4444 5f5f 4444 0000 5140 4e5b 4044 0000     DD__DD..@Q[ND@..
   b5ee0:	4440 5b4e 4051 0000 0000 fe00 01ff 0607     @DN[Q@..........
   b5ef0:	e060 ff80 007f 0000 0808 6b6b 0808 0000     `.........kk....
   b5f00:	3624 3612 3624 0012 0600 090f 060f 0000     $6.6$6..........
   b5f10:	0000 1800 0018 0000 0000 1000 0010 0000     ................
   b5f20:	3010 c070 ffff 0101 1f00 011f 1e1f 0000     .0p.............
   b5f30:	1900 171d 0012 0000 0000 3c3c 3c3c 0000     ..........<<<<..
	...
   b5f48:	454c 2044 614d 7274 7869 7420 7268 6165     LED Matrix threa
   b5f58:	0064 414d 3758 3132 2039 6e41 6d69 7461     d.MAX7219 Animat
   b5f68:	6f69 206e 6544 6f6d 5300 6365 6e6f 2064     ion Demo.Second 
   b5f78:	6574 7478 5400 6968 6472 7420 7865 0074     text.Third text.

000b5f88 <_ZTVN5spark12NetworkClassE>:
	...
   b5f90:	49a1 000b 49ab 000b 49b5 000b 49bf 000b     .I...I...I...I..
   b5fa0:	49c9 000b 49d5 000b 49e1 000b 49e9 000b     .I...I...I...I..
   b5fb0:	49f1 000b 49fd 000b 4a05 000b 4a0f 000b     .I...I...J...J..
   b5fc0:	4a19 000b                                   .J..

000b5fc4 <_ZTV7TwoWire>:
	...
   b5fcc:	4b05 000b 4b4f 000b 4b27 000b 4b07 000b     .K..OK..'K...K..
   b5fdc:	4b2f 000b 4b37 000b 4b3f 000b 4b47 000b     /K..7K..?K..GK..

000b5fec <_ZTV9USBSerial>:
	...
   b5ff4:	4b9f 000b 4c07 000b 4bdd 000b 4f91 000b     .K...L...K...O..
   b6004:	4bcf 000b 4ba1 000b 4bb1 000b 4c01 000b     .K...K...K...L..
   b6014:	4bc1 000b 4b99 000b                         .K...K..

000b601c <_ZTV9IPAddress>:
	...
   b6024:	4ca9 000b 4c99 000b 4c9b 000b               .L...L...L..

000b6030 <_ZTVN5spark13CellularClassE>:
	...
   b6038:	4f27 000b 4f1d 000b 4f13 000b 4ec9 000b     'O...O...O...N..
   b6048:	4f07 000b 4efb 000b 49e1 000b 49e9 000b     .O...N...I...I..
   b6058:	4eef 000b 4ee7 000b 4edd 000b 4ed3 000b     .N...N...N...N..
   b6068:	4a19 000b 5925 252d 2d6d 6425 2554 3a48     .J..%Y-%m-%dT%H:
   b6078:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   b6088:	7061 0070                                   app.

000b608c <_ZTV11USARTSerial>:
	...
   b6094:	5035 000b 50a1 000b 5079 000b 4f91 000b     5P...P..yP...O..
   b60a4:	5049 000b 5065 000b 5057 000b 5073 000b     IP..eP..WP..sP..
   b60b4:	5037 000b 503b 000b                         7P..;P..

000b60bc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b60bc:	0800 1810 2820 3830                         .... (08

000b60c4 <_ZTVN5spark13EthernetClassE>:
	...
   b60cc:	52b3 000b 52a9 000b 529f 000b 5295 000b     .R...R...R...R..
   b60dc:	5289 000b 527d 000b 49e1 000b 49e9 000b     .R..}R...I...I..
   b60ec:	5271 000b 5269 000b 525f 000b 5255 000b     qR..iR.._R..UR..
   b60fc:	4a19 000b                                   .J..

000b6100 <_ZSt7nothrow>:
   b6100:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6110:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6120:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6130:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6140:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6150:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6160:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6170:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6180:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6190:	646e 632e                                    nd.c.

000b6195 <link_const_variable_data_end>:
   b6195:	00          	.byte	0x00
	...

000b6198 <link_constructors_location>:
   b6198:	000b4579 	.word	0x000b4579
   b619c:	000b4af1 	.word	0x000b4af1
   b61a0:	000b4f31 	.word	0x000b4f31
   b61a4:	000b4f61 	.word	0x000b4f61
   b61a8:	000b4f6d 	.word	0x000b4f6d
   b61ac:	000b4f81 	.word	0x000b4f81
   b61b0:	000b5025 	.word	0x000b5025
   b61b4:	000b50d9 	.word	0x000b50d9
   b61b8:	000b52bd 	.word	0x000b52bd

000b61bc <link_constructors_end>:
   b61bc:	00000000 	.word	0x00000000
